
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Pais
 * 
 */
export type Pais = $Result.DefaultSelection<Prisma.$PaisPayload>
/**
 * Model Indicador
 * 
 */
export type Indicador = $Result.DefaultSelection<Prisma.$IndicadorPayload>
/**
 * Model Saude
 * 
 */
export type Saude = $Result.DefaultSelection<Prisma.$SaudePayload>
/**
 * Model Economia
 * 
 */
export type Economia = $Result.DefaultSelection<Prisma.$EconomiaPayload>
/**
 * Model Ambiente
 * 
 */
export type Ambiente = $Result.DefaultSelection<Prisma.$AmbientePayload>
/**
 * Model Tecnologia
 * 
 */
export type Tecnologia = $Result.DefaultSelection<Prisma.$TecnologiaPayload>
/**
 * Model Demografia
 * 
 */
export type Demografia = $Result.DefaultSelection<Prisma.$DemografiaPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Categoria: {
  SAUDE: 'SAUDE',
  ECONOMIA: 'ECONOMIA',
  AMBIENTE: 'AMBIENTE',
  TECNOLOGIA: 'TECNOLOGIA',
  DEMOGRAFIA: 'DEMOGRAFIA'
};

export type Categoria = (typeof Categoria)[keyof typeof Categoria]

}

export type Categoria = $Enums.Categoria

export const Categoria: typeof $Enums.Categoria

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Pais
 * const pais = await prisma.pais.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Pais
   * const pais = await prisma.pais.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.pais`: Exposes CRUD operations for the **Pais** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pais
    * const pais = await prisma.pais.findMany()
    * ```
    */
  get pais(): Prisma.PaisDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.indicador`: Exposes CRUD operations for the **Indicador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Indicadors
    * const indicadors = await prisma.indicador.findMany()
    * ```
    */
  get indicador(): Prisma.IndicadorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.saude`: Exposes CRUD operations for the **Saude** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Saudes
    * const saudes = await prisma.saude.findMany()
    * ```
    */
  get saude(): Prisma.SaudeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.economia`: Exposes CRUD operations for the **Economia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Economias
    * const economias = await prisma.economia.findMany()
    * ```
    */
  get economia(): Prisma.EconomiaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ambiente`: Exposes CRUD operations for the **Ambiente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ambientes
    * const ambientes = await prisma.ambiente.findMany()
    * ```
    */
  get ambiente(): Prisma.AmbienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tecnologia`: Exposes CRUD operations for the **Tecnologia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tecnologias
    * const tecnologias = await prisma.tecnologia.findMany()
    * ```
    */
  get tecnologia(): Prisma.TecnologiaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.demografia`: Exposes CRUD operations for the **Demografia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Demografias
    * const demografias = await prisma.demografia.findMany()
    * ```
    */
  get demografia(): Prisma.DemografiaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Pais: 'Pais',
    Indicador: 'Indicador',
    Saude: 'Saude',
    Economia: 'Economia',
    Ambiente: 'Ambiente',
    Tecnologia: 'Tecnologia',
    Demografia: 'Demografia'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "pais" | "indicador" | "saude" | "economia" | "ambiente" | "tecnologia" | "demografia"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Pais: {
        payload: Prisma.$PaisPayload<ExtArgs>
        fields: Prisma.PaisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaisPayload>
          }
          findFirst: {
            args: Prisma.PaisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaisPayload>
          }
          findMany: {
            args: Prisma.PaisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaisPayload>[]
          }
          create: {
            args: Prisma.PaisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaisPayload>
          }
          createMany: {
            args: Prisma.PaisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaisCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaisPayload>[]
          }
          delete: {
            args: Prisma.PaisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaisPayload>
          }
          update: {
            args: Prisma.PaisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaisPayload>
          }
          deleteMany: {
            args: Prisma.PaisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaisUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaisPayload>[]
          }
          upsert: {
            args: Prisma.PaisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaisPayload>
          }
          aggregate: {
            args: Prisma.PaisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePais>
          }
          groupBy: {
            args: Prisma.PaisGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaisGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaisCountArgs<ExtArgs>
            result: $Utils.Optional<PaisCountAggregateOutputType> | number
          }
        }
      }
      Indicador: {
        payload: Prisma.$IndicadorPayload<ExtArgs>
        fields: Prisma.IndicadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IndicadorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IndicadorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicadorPayload>
          }
          findFirst: {
            args: Prisma.IndicadorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IndicadorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicadorPayload>
          }
          findMany: {
            args: Prisma.IndicadorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicadorPayload>[]
          }
          create: {
            args: Prisma.IndicadorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicadorPayload>
          }
          createMany: {
            args: Prisma.IndicadorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IndicadorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicadorPayload>[]
          }
          delete: {
            args: Prisma.IndicadorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicadorPayload>
          }
          update: {
            args: Prisma.IndicadorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicadorPayload>
          }
          deleteMany: {
            args: Prisma.IndicadorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IndicadorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IndicadorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicadorPayload>[]
          }
          upsert: {
            args: Prisma.IndicadorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndicadorPayload>
          }
          aggregate: {
            args: Prisma.IndicadorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIndicador>
          }
          groupBy: {
            args: Prisma.IndicadorGroupByArgs<ExtArgs>
            result: $Utils.Optional<IndicadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.IndicadorCountArgs<ExtArgs>
            result: $Utils.Optional<IndicadorCountAggregateOutputType> | number
          }
        }
      }
      Saude: {
        payload: Prisma.$SaudePayload<ExtArgs>
        fields: Prisma.SaudeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaudeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaudePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaudeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaudePayload>
          }
          findFirst: {
            args: Prisma.SaudeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaudePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaudeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaudePayload>
          }
          findMany: {
            args: Prisma.SaudeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaudePayload>[]
          }
          create: {
            args: Prisma.SaudeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaudePayload>
          }
          createMany: {
            args: Prisma.SaudeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SaudeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaudePayload>[]
          }
          delete: {
            args: Prisma.SaudeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaudePayload>
          }
          update: {
            args: Prisma.SaudeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaudePayload>
          }
          deleteMany: {
            args: Prisma.SaudeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SaudeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SaudeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaudePayload>[]
          }
          upsert: {
            args: Prisma.SaudeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaudePayload>
          }
          aggregate: {
            args: Prisma.SaudeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSaude>
          }
          groupBy: {
            args: Prisma.SaudeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SaudeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SaudeCountArgs<ExtArgs>
            result: $Utils.Optional<SaudeCountAggregateOutputType> | number
          }
        }
      }
      Economia: {
        payload: Prisma.$EconomiaPayload<ExtArgs>
        fields: Prisma.EconomiaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EconomiaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EconomiaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EconomiaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EconomiaPayload>
          }
          findFirst: {
            args: Prisma.EconomiaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EconomiaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EconomiaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EconomiaPayload>
          }
          findMany: {
            args: Prisma.EconomiaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EconomiaPayload>[]
          }
          create: {
            args: Prisma.EconomiaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EconomiaPayload>
          }
          createMany: {
            args: Prisma.EconomiaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EconomiaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EconomiaPayload>[]
          }
          delete: {
            args: Prisma.EconomiaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EconomiaPayload>
          }
          update: {
            args: Prisma.EconomiaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EconomiaPayload>
          }
          deleteMany: {
            args: Prisma.EconomiaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EconomiaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EconomiaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EconomiaPayload>[]
          }
          upsert: {
            args: Prisma.EconomiaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EconomiaPayload>
          }
          aggregate: {
            args: Prisma.EconomiaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEconomia>
          }
          groupBy: {
            args: Prisma.EconomiaGroupByArgs<ExtArgs>
            result: $Utils.Optional<EconomiaGroupByOutputType>[]
          }
          count: {
            args: Prisma.EconomiaCountArgs<ExtArgs>
            result: $Utils.Optional<EconomiaCountAggregateOutputType> | number
          }
        }
      }
      Ambiente: {
        payload: Prisma.$AmbientePayload<ExtArgs>
        fields: Prisma.AmbienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AmbienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AmbienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbientePayload>
          }
          findFirst: {
            args: Prisma.AmbienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AmbienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbientePayload>
          }
          findMany: {
            args: Prisma.AmbienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbientePayload>[]
          }
          create: {
            args: Prisma.AmbienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbientePayload>
          }
          createMany: {
            args: Prisma.AmbienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AmbienteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbientePayload>[]
          }
          delete: {
            args: Prisma.AmbienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbientePayload>
          }
          update: {
            args: Prisma.AmbienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbientePayload>
          }
          deleteMany: {
            args: Prisma.AmbienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AmbienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AmbienteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbientePayload>[]
          }
          upsert: {
            args: Prisma.AmbienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbientePayload>
          }
          aggregate: {
            args: Prisma.AmbienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAmbiente>
          }
          groupBy: {
            args: Prisma.AmbienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<AmbienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.AmbienteCountArgs<ExtArgs>
            result: $Utils.Optional<AmbienteCountAggregateOutputType> | number
          }
        }
      }
      Tecnologia: {
        payload: Prisma.$TecnologiaPayload<ExtArgs>
        fields: Prisma.TecnologiaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TecnologiaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnologiaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TecnologiaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnologiaPayload>
          }
          findFirst: {
            args: Prisma.TecnologiaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnologiaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TecnologiaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnologiaPayload>
          }
          findMany: {
            args: Prisma.TecnologiaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnologiaPayload>[]
          }
          create: {
            args: Prisma.TecnologiaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnologiaPayload>
          }
          createMany: {
            args: Prisma.TecnologiaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TecnologiaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnologiaPayload>[]
          }
          delete: {
            args: Prisma.TecnologiaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnologiaPayload>
          }
          update: {
            args: Prisma.TecnologiaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnologiaPayload>
          }
          deleteMany: {
            args: Prisma.TecnologiaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TecnologiaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TecnologiaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnologiaPayload>[]
          }
          upsert: {
            args: Prisma.TecnologiaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TecnologiaPayload>
          }
          aggregate: {
            args: Prisma.TecnologiaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTecnologia>
          }
          groupBy: {
            args: Prisma.TecnologiaGroupByArgs<ExtArgs>
            result: $Utils.Optional<TecnologiaGroupByOutputType>[]
          }
          count: {
            args: Prisma.TecnologiaCountArgs<ExtArgs>
            result: $Utils.Optional<TecnologiaCountAggregateOutputType> | number
          }
        }
      }
      Demografia: {
        payload: Prisma.$DemografiaPayload<ExtArgs>
        fields: Prisma.DemografiaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DemografiaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemografiaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DemografiaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemografiaPayload>
          }
          findFirst: {
            args: Prisma.DemografiaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemografiaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DemografiaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemografiaPayload>
          }
          findMany: {
            args: Prisma.DemografiaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemografiaPayload>[]
          }
          create: {
            args: Prisma.DemografiaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemografiaPayload>
          }
          createMany: {
            args: Prisma.DemografiaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DemografiaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemografiaPayload>[]
          }
          delete: {
            args: Prisma.DemografiaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemografiaPayload>
          }
          update: {
            args: Prisma.DemografiaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemografiaPayload>
          }
          deleteMany: {
            args: Prisma.DemografiaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DemografiaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DemografiaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemografiaPayload>[]
          }
          upsert: {
            args: Prisma.DemografiaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DemografiaPayload>
          }
          aggregate: {
            args: Prisma.DemografiaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDemografia>
          }
          groupBy: {
            args: Prisma.DemografiaGroupByArgs<ExtArgs>
            result: $Utils.Optional<DemografiaGroupByOutputType>[]
          }
          count: {
            args: Prisma.DemografiaCountArgs<ExtArgs>
            result: $Utils.Optional<DemografiaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    pais?: PaisOmit
    indicador?: IndicadorOmit
    saude?: SaudeOmit
    economia?: EconomiaOmit
    ambiente?: AmbienteOmit
    tecnologia?: TecnologiaOmit
    demografia?: DemografiaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PaisCountOutputType
   */

  export type PaisCountOutputType = {
    saude: number
    economia: number
    ambiente: number
    tecnologia: number
    demografia: number
  }

  export type PaisCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    saude?: boolean | PaisCountOutputTypeCountSaudeArgs
    economia?: boolean | PaisCountOutputTypeCountEconomiaArgs
    ambiente?: boolean | PaisCountOutputTypeCountAmbienteArgs
    tecnologia?: boolean | PaisCountOutputTypeCountTecnologiaArgs
    demografia?: boolean | PaisCountOutputTypeCountDemografiaArgs
  }

  // Custom InputTypes
  /**
   * PaisCountOutputType without action
   */
  export type PaisCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaisCountOutputType
     */
    select?: PaisCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaisCountOutputType without action
   */
  export type PaisCountOutputTypeCountSaudeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaudeWhereInput
  }

  /**
   * PaisCountOutputType without action
   */
  export type PaisCountOutputTypeCountEconomiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EconomiaWhereInput
  }

  /**
   * PaisCountOutputType without action
   */
  export type PaisCountOutputTypeCountAmbienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmbienteWhereInput
  }

  /**
   * PaisCountOutputType without action
   */
  export type PaisCountOutputTypeCountTecnologiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TecnologiaWhereInput
  }

  /**
   * PaisCountOutputType without action
   */
  export type PaisCountOutputTypeCountDemografiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemografiaWhereInput
  }


  /**
   * Count Type IndicadorCountOutputType
   */

  export type IndicadorCountOutputType = {
    saude: number
    economia: number
    ambiente: number
    tecnologia: number
    demografia: number
  }

  export type IndicadorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    saude?: boolean | IndicadorCountOutputTypeCountSaudeArgs
    economia?: boolean | IndicadorCountOutputTypeCountEconomiaArgs
    ambiente?: boolean | IndicadorCountOutputTypeCountAmbienteArgs
    tecnologia?: boolean | IndicadorCountOutputTypeCountTecnologiaArgs
    demografia?: boolean | IndicadorCountOutputTypeCountDemografiaArgs
  }

  // Custom InputTypes
  /**
   * IndicadorCountOutputType without action
   */
  export type IndicadorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndicadorCountOutputType
     */
    select?: IndicadorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IndicadorCountOutputType without action
   */
  export type IndicadorCountOutputTypeCountSaudeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaudeWhereInput
  }

  /**
   * IndicadorCountOutputType without action
   */
  export type IndicadorCountOutputTypeCountEconomiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EconomiaWhereInput
  }

  /**
   * IndicadorCountOutputType without action
   */
  export type IndicadorCountOutputTypeCountAmbienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmbienteWhereInput
  }

  /**
   * IndicadorCountOutputType without action
   */
  export type IndicadorCountOutputTypeCountTecnologiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TecnologiaWhereInput
  }

  /**
   * IndicadorCountOutputType without action
   */
  export type IndicadorCountOutputTypeCountDemografiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemografiaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Pais
   */

  export type AggregatePais = {
    _count: PaisCountAggregateOutputType | null
    _min: PaisMinAggregateOutputType | null
    _max: PaisMaxAggregateOutputType | null
  }

  export type PaisMinAggregateOutputType = {
    id: string | null
    nome: string | null
    iso3: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaisMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    iso3: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaisCountAggregateOutputType = {
    id: number
    nome: number
    iso3: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaisMinAggregateInputType = {
    id?: true
    nome?: true
    iso3?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaisMaxAggregateInputType = {
    id?: true
    nome?: true
    iso3?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaisCountAggregateInputType = {
    id?: true
    nome?: true
    iso3?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pais to aggregate.
     */
    where?: PaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pais to fetch.
     */
    orderBy?: PaisOrderByWithRelationInput | PaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pais
    **/
    _count?: true | PaisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaisMaxAggregateInputType
  }

  export type GetPaisAggregateType<T extends PaisAggregateArgs> = {
        [P in keyof T & keyof AggregatePais]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePais[P]>
      : GetScalarType<T[P], AggregatePais[P]>
  }




  export type PaisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaisWhereInput
    orderBy?: PaisOrderByWithAggregationInput | PaisOrderByWithAggregationInput[]
    by: PaisScalarFieldEnum[] | PaisScalarFieldEnum
    having?: PaisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaisCountAggregateInputType | true
    _min?: PaisMinAggregateInputType
    _max?: PaisMaxAggregateInputType
  }

  export type PaisGroupByOutputType = {
    id: string
    nome: string
    iso3: string
    createdAt: Date
    updatedAt: Date
    _count: PaisCountAggregateOutputType | null
    _min: PaisMinAggregateOutputType | null
    _max: PaisMaxAggregateOutputType | null
  }

  type GetPaisGroupByPayload<T extends PaisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaisGroupByOutputType[P]>
            : GetScalarType<T[P], PaisGroupByOutputType[P]>
        }
      >
    >


  export type PaisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    iso3?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    saude?: boolean | Pais$saudeArgs<ExtArgs>
    economia?: boolean | Pais$economiaArgs<ExtArgs>
    ambiente?: boolean | Pais$ambienteArgs<ExtArgs>
    tecnologia?: boolean | Pais$tecnologiaArgs<ExtArgs>
    demografia?: boolean | Pais$demografiaArgs<ExtArgs>
    _count?: boolean | PaisCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pais"]>

  export type PaisSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    iso3?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pais"]>

  export type PaisSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    iso3?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pais"]>

  export type PaisSelectScalar = {
    id?: boolean
    nome?: boolean
    iso3?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaisOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "iso3" | "createdAt" | "updatedAt", ExtArgs["result"]["pais"]>
  export type PaisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    saude?: boolean | Pais$saudeArgs<ExtArgs>
    economia?: boolean | Pais$economiaArgs<ExtArgs>
    ambiente?: boolean | Pais$ambienteArgs<ExtArgs>
    tecnologia?: boolean | Pais$tecnologiaArgs<ExtArgs>
    demografia?: boolean | Pais$demografiaArgs<ExtArgs>
    _count?: boolean | PaisCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PaisIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PaisIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PaisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pais"
    objects: {
      saude: Prisma.$SaudePayload<ExtArgs>[]
      economia: Prisma.$EconomiaPayload<ExtArgs>[]
      ambiente: Prisma.$AmbientePayload<ExtArgs>[]
      tecnologia: Prisma.$TecnologiaPayload<ExtArgs>[]
      demografia: Prisma.$DemografiaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      iso3: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pais"]>
    composites: {}
  }

  type PaisGetPayload<S extends boolean | null | undefined | PaisDefaultArgs> = $Result.GetResult<Prisma.$PaisPayload, S>

  type PaisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaisFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaisCountAggregateInputType | true
    }

  export interface PaisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pais'], meta: { name: 'Pais' } }
    /**
     * Find zero or one Pais that matches the filter.
     * @param {PaisFindUniqueArgs} args - Arguments to find a Pais
     * @example
     * // Get one Pais
     * const pais = await prisma.pais.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaisFindUniqueArgs>(args: SelectSubset<T, PaisFindUniqueArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pais that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaisFindUniqueOrThrowArgs} args - Arguments to find a Pais
     * @example
     * // Get one Pais
     * const pais = await prisma.pais.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaisFindUniqueOrThrowArgs>(args: SelectSubset<T, PaisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaisFindFirstArgs} args - Arguments to find a Pais
     * @example
     * // Get one Pais
     * const pais = await prisma.pais.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaisFindFirstArgs>(args?: SelectSubset<T, PaisFindFirstArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pais that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaisFindFirstOrThrowArgs} args - Arguments to find a Pais
     * @example
     * // Get one Pais
     * const pais = await prisma.pais.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaisFindFirstOrThrowArgs>(args?: SelectSubset<T, PaisFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pais that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pais
     * const pais = await prisma.pais.findMany()
     * 
     * // Get first 10 Pais
     * const pais = await prisma.pais.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paisWithIdOnly = await prisma.pais.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaisFindManyArgs>(args?: SelectSubset<T, PaisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pais.
     * @param {PaisCreateArgs} args - Arguments to create a Pais.
     * @example
     * // Create one Pais
     * const Pais = await prisma.pais.create({
     *   data: {
     *     // ... data to create a Pais
     *   }
     * })
     * 
     */
    create<T extends PaisCreateArgs>(args: SelectSubset<T, PaisCreateArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pais.
     * @param {PaisCreateManyArgs} args - Arguments to create many Pais.
     * @example
     * // Create many Pais
     * const pais = await prisma.pais.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaisCreateManyArgs>(args?: SelectSubset<T, PaisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pais and returns the data saved in the database.
     * @param {PaisCreateManyAndReturnArgs} args - Arguments to create many Pais.
     * @example
     * // Create many Pais
     * const pais = await prisma.pais.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pais and only return the `id`
     * const paisWithIdOnly = await prisma.pais.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaisCreateManyAndReturnArgs>(args?: SelectSubset<T, PaisCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Pais.
     * @param {PaisDeleteArgs} args - Arguments to delete one Pais.
     * @example
     * // Delete one Pais
     * const Pais = await prisma.pais.delete({
     *   where: {
     *     // ... filter to delete one Pais
     *   }
     * })
     * 
     */
    delete<T extends PaisDeleteArgs>(args: SelectSubset<T, PaisDeleteArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pais.
     * @param {PaisUpdateArgs} args - Arguments to update one Pais.
     * @example
     * // Update one Pais
     * const pais = await prisma.pais.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaisUpdateArgs>(args: SelectSubset<T, PaisUpdateArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pais.
     * @param {PaisDeleteManyArgs} args - Arguments to filter Pais to delete.
     * @example
     * // Delete a few Pais
     * const { count } = await prisma.pais.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaisDeleteManyArgs>(args?: SelectSubset<T, PaisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pais
     * const pais = await prisma.pais.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaisUpdateManyArgs>(args: SelectSubset<T, PaisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pais and returns the data updated in the database.
     * @param {PaisUpdateManyAndReturnArgs} args - Arguments to update many Pais.
     * @example
     * // Update many Pais
     * const pais = await prisma.pais.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pais and only return the `id`
     * const paisWithIdOnly = await prisma.pais.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaisUpdateManyAndReturnArgs>(args: SelectSubset<T, PaisUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Pais.
     * @param {PaisUpsertArgs} args - Arguments to update or create a Pais.
     * @example
     * // Update or create a Pais
     * const pais = await prisma.pais.upsert({
     *   create: {
     *     // ... data to create a Pais
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pais we want to update
     *   }
     * })
     */
    upsert<T extends PaisUpsertArgs>(args: SelectSubset<T, PaisUpsertArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaisCountArgs} args - Arguments to filter Pais to count.
     * @example
     * // Count the number of Pais
     * const count = await prisma.pais.count({
     *   where: {
     *     // ... the filter for the Pais we want to count
     *   }
     * })
    **/
    count<T extends PaisCountArgs>(
      args?: Subset<T, PaisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaisAggregateArgs>(args: Subset<T, PaisAggregateArgs>): Prisma.PrismaPromise<GetPaisAggregateType<T>>

    /**
     * Group by Pais.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaisGroupByArgs['orderBy'] }
        : { orderBy?: PaisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pais model
   */
  readonly fields: PaisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pais.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    saude<T extends Pais$saudeArgs<ExtArgs> = {}>(args?: Subset<T, Pais$saudeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    economia<T extends Pais$economiaArgs<ExtArgs> = {}>(args?: Subset<T, Pais$economiaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ambiente<T extends Pais$ambienteArgs<ExtArgs> = {}>(args?: Subset<T, Pais$ambienteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tecnologia<T extends Pais$tecnologiaArgs<ExtArgs> = {}>(args?: Subset<T, Pais$tecnologiaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    demografia<T extends Pais$demografiaArgs<ExtArgs> = {}>(args?: Subset<T, Pais$demografiaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pais model
   */
  interface PaisFieldRefs {
    readonly id: FieldRef<"Pais", 'String'>
    readonly nome: FieldRef<"Pais", 'String'>
    readonly iso3: FieldRef<"Pais", 'String'>
    readonly createdAt: FieldRef<"Pais", 'DateTime'>
    readonly updatedAt: FieldRef<"Pais", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Pais findUnique
   */
  export type PaisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pais
     */
    select?: PaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pais
     */
    omit?: PaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaisInclude<ExtArgs> | null
    /**
     * Filter, which Pais to fetch.
     */
    where: PaisWhereUniqueInput
  }

  /**
   * Pais findUniqueOrThrow
   */
  export type PaisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pais
     */
    select?: PaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pais
     */
    omit?: PaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaisInclude<ExtArgs> | null
    /**
     * Filter, which Pais to fetch.
     */
    where: PaisWhereUniqueInput
  }

  /**
   * Pais findFirst
   */
  export type PaisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pais
     */
    select?: PaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pais
     */
    omit?: PaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaisInclude<ExtArgs> | null
    /**
     * Filter, which Pais to fetch.
     */
    where?: PaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pais to fetch.
     */
    orderBy?: PaisOrderByWithRelationInput | PaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pais.
     */
    cursor?: PaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pais.
     */
    distinct?: PaisScalarFieldEnum | PaisScalarFieldEnum[]
  }

  /**
   * Pais findFirstOrThrow
   */
  export type PaisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pais
     */
    select?: PaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pais
     */
    omit?: PaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaisInclude<ExtArgs> | null
    /**
     * Filter, which Pais to fetch.
     */
    where?: PaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pais to fetch.
     */
    orderBy?: PaisOrderByWithRelationInput | PaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pais.
     */
    cursor?: PaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pais.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pais.
     */
    distinct?: PaisScalarFieldEnum | PaisScalarFieldEnum[]
  }

  /**
   * Pais findMany
   */
  export type PaisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pais
     */
    select?: PaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pais
     */
    omit?: PaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaisInclude<ExtArgs> | null
    /**
     * Filter, which Pais to fetch.
     */
    where?: PaisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pais to fetch.
     */
    orderBy?: PaisOrderByWithRelationInput | PaisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pais.
     */
    cursor?: PaisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pais from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pais.
     */
    skip?: number
    distinct?: PaisScalarFieldEnum | PaisScalarFieldEnum[]
  }

  /**
   * Pais create
   */
  export type PaisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pais
     */
    select?: PaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pais
     */
    omit?: PaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaisInclude<ExtArgs> | null
    /**
     * The data needed to create a Pais.
     */
    data: XOR<PaisCreateInput, PaisUncheckedCreateInput>
  }

  /**
   * Pais createMany
   */
  export type PaisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pais.
     */
    data: PaisCreateManyInput | PaisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pais createManyAndReturn
   */
  export type PaisCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pais
     */
    select?: PaisSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pais
     */
    omit?: PaisOmit<ExtArgs> | null
    /**
     * The data used to create many Pais.
     */
    data: PaisCreateManyInput | PaisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pais update
   */
  export type PaisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pais
     */
    select?: PaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pais
     */
    omit?: PaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaisInclude<ExtArgs> | null
    /**
     * The data needed to update a Pais.
     */
    data: XOR<PaisUpdateInput, PaisUncheckedUpdateInput>
    /**
     * Choose, which Pais to update.
     */
    where: PaisWhereUniqueInput
  }

  /**
   * Pais updateMany
   */
  export type PaisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pais.
     */
    data: XOR<PaisUpdateManyMutationInput, PaisUncheckedUpdateManyInput>
    /**
     * Filter which Pais to update
     */
    where?: PaisWhereInput
    /**
     * Limit how many Pais to update.
     */
    limit?: number
  }

  /**
   * Pais updateManyAndReturn
   */
  export type PaisUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pais
     */
    select?: PaisSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pais
     */
    omit?: PaisOmit<ExtArgs> | null
    /**
     * The data used to update Pais.
     */
    data: XOR<PaisUpdateManyMutationInput, PaisUncheckedUpdateManyInput>
    /**
     * Filter which Pais to update
     */
    where?: PaisWhereInput
    /**
     * Limit how many Pais to update.
     */
    limit?: number
  }

  /**
   * Pais upsert
   */
  export type PaisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pais
     */
    select?: PaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pais
     */
    omit?: PaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaisInclude<ExtArgs> | null
    /**
     * The filter to search for the Pais to update in case it exists.
     */
    where: PaisWhereUniqueInput
    /**
     * In case the Pais found by the `where` argument doesn't exist, create a new Pais with this data.
     */
    create: XOR<PaisCreateInput, PaisUncheckedCreateInput>
    /**
     * In case the Pais was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaisUpdateInput, PaisUncheckedUpdateInput>
  }

  /**
   * Pais delete
   */
  export type PaisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pais
     */
    select?: PaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pais
     */
    omit?: PaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaisInclude<ExtArgs> | null
    /**
     * Filter which Pais to delete.
     */
    where: PaisWhereUniqueInput
  }

  /**
   * Pais deleteMany
   */
  export type PaisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pais to delete
     */
    where?: PaisWhereInput
    /**
     * Limit how many Pais to delete.
     */
    limit?: number
  }

  /**
   * Pais.saude
   */
  export type Pais$saudeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeInclude<ExtArgs> | null
    where?: SaudeWhereInput
    orderBy?: SaudeOrderByWithRelationInput | SaudeOrderByWithRelationInput[]
    cursor?: SaudeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaudeScalarFieldEnum | SaudeScalarFieldEnum[]
  }

  /**
   * Pais.economia
   */
  export type Pais$economiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaInclude<ExtArgs> | null
    where?: EconomiaWhereInput
    orderBy?: EconomiaOrderByWithRelationInput | EconomiaOrderByWithRelationInput[]
    cursor?: EconomiaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EconomiaScalarFieldEnum | EconomiaScalarFieldEnum[]
  }

  /**
   * Pais.ambiente
   */
  export type Pais$ambienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteInclude<ExtArgs> | null
    where?: AmbienteWhereInput
    orderBy?: AmbienteOrderByWithRelationInput | AmbienteOrderByWithRelationInput[]
    cursor?: AmbienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmbienteScalarFieldEnum | AmbienteScalarFieldEnum[]
  }

  /**
   * Pais.tecnologia
   */
  export type Pais$tecnologiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaInclude<ExtArgs> | null
    where?: TecnologiaWhereInput
    orderBy?: TecnologiaOrderByWithRelationInput | TecnologiaOrderByWithRelationInput[]
    cursor?: TecnologiaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TecnologiaScalarFieldEnum | TecnologiaScalarFieldEnum[]
  }

  /**
   * Pais.demografia
   */
  export type Pais$demografiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaInclude<ExtArgs> | null
    where?: DemografiaWhereInput
    orderBy?: DemografiaOrderByWithRelationInput | DemografiaOrderByWithRelationInput[]
    cursor?: DemografiaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DemografiaScalarFieldEnum | DemografiaScalarFieldEnum[]
  }

  /**
   * Pais without action
   */
  export type PaisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pais
     */
    select?: PaisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pais
     */
    omit?: PaisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaisInclude<ExtArgs> | null
  }


  /**
   * Model Indicador
   */

  export type AggregateIndicador = {
    _count: IndicadorCountAggregateOutputType | null
    _min: IndicadorMinAggregateOutputType | null
    _max: IndicadorMaxAggregateOutputType | null
  }

  export type IndicadorMinAggregateOutputType = {
    id: string | null
    nome: string | null
    categoria: $Enums.Categoria | null
  }

  export type IndicadorMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    categoria: $Enums.Categoria | null
  }

  export type IndicadorCountAggregateOutputType = {
    id: number
    nome: number
    categoria: number
    _all: number
  }


  export type IndicadorMinAggregateInputType = {
    id?: true
    nome?: true
    categoria?: true
  }

  export type IndicadorMaxAggregateInputType = {
    id?: true
    nome?: true
    categoria?: true
  }

  export type IndicadorCountAggregateInputType = {
    id?: true
    nome?: true
    categoria?: true
    _all?: true
  }

  export type IndicadorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Indicador to aggregate.
     */
    where?: IndicadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Indicadors to fetch.
     */
    orderBy?: IndicadorOrderByWithRelationInput | IndicadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IndicadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Indicadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Indicadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Indicadors
    **/
    _count?: true | IndicadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IndicadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IndicadorMaxAggregateInputType
  }

  export type GetIndicadorAggregateType<T extends IndicadorAggregateArgs> = {
        [P in keyof T & keyof AggregateIndicador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIndicador[P]>
      : GetScalarType<T[P], AggregateIndicador[P]>
  }




  export type IndicadorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IndicadorWhereInput
    orderBy?: IndicadorOrderByWithAggregationInput | IndicadorOrderByWithAggregationInput[]
    by: IndicadorScalarFieldEnum[] | IndicadorScalarFieldEnum
    having?: IndicadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IndicadorCountAggregateInputType | true
    _min?: IndicadorMinAggregateInputType
    _max?: IndicadorMaxAggregateInputType
  }

  export type IndicadorGroupByOutputType = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    _count: IndicadorCountAggregateOutputType | null
    _min: IndicadorMinAggregateOutputType | null
    _max: IndicadorMaxAggregateOutputType | null
  }

  type GetIndicadorGroupByPayload<T extends IndicadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IndicadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IndicadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IndicadorGroupByOutputType[P]>
            : GetScalarType<T[P], IndicadorGroupByOutputType[P]>
        }
      >
    >


  export type IndicadorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    categoria?: boolean
    saude?: boolean | Indicador$saudeArgs<ExtArgs>
    economia?: boolean | Indicador$economiaArgs<ExtArgs>
    ambiente?: boolean | Indicador$ambienteArgs<ExtArgs>
    tecnologia?: boolean | Indicador$tecnologiaArgs<ExtArgs>
    demografia?: boolean | Indicador$demografiaArgs<ExtArgs>
    _count?: boolean | IndicadorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["indicador"]>

  export type IndicadorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    categoria?: boolean
  }, ExtArgs["result"]["indicador"]>

  export type IndicadorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    categoria?: boolean
  }, ExtArgs["result"]["indicador"]>

  export type IndicadorSelectScalar = {
    id?: boolean
    nome?: boolean
    categoria?: boolean
  }

  export type IndicadorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "categoria", ExtArgs["result"]["indicador"]>
  export type IndicadorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    saude?: boolean | Indicador$saudeArgs<ExtArgs>
    economia?: boolean | Indicador$economiaArgs<ExtArgs>
    ambiente?: boolean | Indicador$ambienteArgs<ExtArgs>
    tecnologia?: boolean | Indicador$tecnologiaArgs<ExtArgs>
    demografia?: boolean | Indicador$demografiaArgs<ExtArgs>
    _count?: boolean | IndicadorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IndicadorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type IndicadorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $IndicadorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Indicador"
    objects: {
      saude: Prisma.$SaudePayload<ExtArgs>[]
      economia: Prisma.$EconomiaPayload<ExtArgs>[]
      ambiente: Prisma.$AmbientePayload<ExtArgs>[]
      tecnologia: Prisma.$TecnologiaPayload<ExtArgs>[]
      demografia: Prisma.$DemografiaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      categoria: $Enums.Categoria
    }, ExtArgs["result"]["indicador"]>
    composites: {}
  }

  type IndicadorGetPayload<S extends boolean | null | undefined | IndicadorDefaultArgs> = $Result.GetResult<Prisma.$IndicadorPayload, S>

  type IndicadorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IndicadorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IndicadorCountAggregateInputType | true
    }

  export interface IndicadorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Indicador'], meta: { name: 'Indicador' } }
    /**
     * Find zero or one Indicador that matches the filter.
     * @param {IndicadorFindUniqueArgs} args - Arguments to find a Indicador
     * @example
     * // Get one Indicador
     * const indicador = await prisma.indicador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IndicadorFindUniqueArgs>(args: SelectSubset<T, IndicadorFindUniqueArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Indicador that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IndicadorFindUniqueOrThrowArgs} args - Arguments to find a Indicador
     * @example
     * // Get one Indicador
     * const indicador = await prisma.indicador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IndicadorFindUniqueOrThrowArgs>(args: SelectSubset<T, IndicadorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Indicador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicadorFindFirstArgs} args - Arguments to find a Indicador
     * @example
     * // Get one Indicador
     * const indicador = await prisma.indicador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IndicadorFindFirstArgs>(args?: SelectSubset<T, IndicadorFindFirstArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Indicador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicadorFindFirstOrThrowArgs} args - Arguments to find a Indicador
     * @example
     * // Get one Indicador
     * const indicador = await prisma.indicador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IndicadorFindFirstOrThrowArgs>(args?: SelectSubset<T, IndicadorFindFirstOrThrowArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Indicadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicadorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Indicadors
     * const indicadors = await prisma.indicador.findMany()
     * 
     * // Get first 10 Indicadors
     * const indicadors = await prisma.indicador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const indicadorWithIdOnly = await prisma.indicador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IndicadorFindManyArgs>(args?: SelectSubset<T, IndicadorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Indicador.
     * @param {IndicadorCreateArgs} args - Arguments to create a Indicador.
     * @example
     * // Create one Indicador
     * const Indicador = await prisma.indicador.create({
     *   data: {
     *     // ... data to create a Indicador
     *   }
     * })
     * 
     */
    create<T extends IndicadorCreateArgs>(args: SelectSubset<T, IndicadorCreateArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Indicadors.
     * @param {IndicadorCreateManyArgs} args - Arguments to create many Indicadors.
     * @example
     * // Create many Indicadors
     * const indicador = await prisma.indicador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IndicadorCreateManyArgs>(args?: SelectSubset<T, IndicadorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Indicadors and returns the data saved in the database.
     * @param {IndicadorCreateManyAndReturnArgs} args - Arguments to create many Indicadors.
     * @example
     * // Create many Indicadors
     * const indicador = await prisma.indicador.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Indicadors and only return the `id`
     * const indicadorWithIdOnly = await prisma.indicador.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IndicadorCreateManyAndReturnArgs>(args?: SelectSubset<T, IndicadorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Indicador.
     * @param {IndicadorDeleteArgs} args - Arguments to delete one Indicador.
     * @example
     * // Delete one Indicador
     * const Indicador = await prisma.indicador.delete({
     *   where: {
     *     // ... filter to delete one Indicador
     *   }
     * })
     * 
     */
    delete<T extends IndicadorDeleteArgs>(args: SelectSubset<T, IndicadorDeleteArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Indicador.
     * @param {IndicadorUpdateArgs} args - Arguments to update one Indicador.
     * @example
     * // Update one Indicador
     * const indicador = await prisma.indicador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IndicadorUpdateArgs>(args: SelectSubset<T, IndicadorUpdateArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Indicadors.
     * @param {IndicadorDeleteManyArgs} args - Arguments to filter Indicadors to delete.
     * @example
     * // Delete a few Indicadors
     * const { count } = await prisma.indicador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IndicadorDeleteManyArgs>(args?: SelectSubset<T, IndicadorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Indicadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Indicadors
     * const indicador = await prisma.indicador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IndicadorUpdateManyArgs>(args: SelectSubset<T, IndicadorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Indicadors and returns the data updated in the database.
     * @param {IndicadorUpdateManyAndReturnArgs} args - Arguments to update many Indicadors.
     * @example
     * // Update many Indicadors
     * const indicador = await prisma.indicador.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Indicadors and only return the `id`
     * const indicadorWithIdOnly = await prisma.indicador.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IndicadorUpdateManyAndReturnArgs>(args: SelectSubset<T, IndicadorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Indicador.
     * @param {IndicadorUpsertArgs} args - Arguments to update or create a Indicador.
     * @example
     * // Update or create a Indicador
     * const indicador = await prisma.indicador.upsert({
     *   create: {
     *     // ... data to create a Indicador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Indicador we want to update
     *   }
     * })
     */
    upsert<T extends IndicadorUpsertArgs>(args: SelectSubset<T, IndicadorUpsertArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Indicadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicadorCountArgs} args - Arguments to filter Indicadors to count.
     * @example
     * // Count the number of Indicadors
     * const count = await prisma.indicador.count({
     *   where: {
     *     // ... the filter for the Indicadors we want to count
     *   }
     * })
    **/
    count<T extends IndicadorCountArgs>(
      args?: Subset<T, IndicadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IndicadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Indicador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IndicadorAggregateArgs>(args: Subset<T, IndicadorAggregateArgs>): Prisma.PrismaPromise<GetIndicadorAggregateType<T>>

    /**
     * Group by Indicador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IndicadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IndicadorGroupByArgs['orderBy'] }
        : { orderBy?: IndicadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IndicadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIndicadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Indicador model
   */
  readonly fields: IndicadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Indicador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IndicadorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    saude<T extends Indicador$saudeArgs<ExtArgs> = {}>(args?: Subset<T, Indicador$saudeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    economia<T extends Indicador$economiaArgs<ExtArgs> = {}>(args?: Subset<T, Indicador$economiaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ambiente<T extends Indicador$ambienteArgs<ExtArgs> = {}>(args?: Subset<T, Indicador$ambienteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tecnologia<T extends Indicador$tecnologiaArgs<ExtArgs> = {}>(args?: Subset<T, Indicador$tecnologiaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    demografia<T extends Indicador$demografiaArgs<ExtArgs> = {}>(args?: Subset<T, Indicador$demografiaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Indicador model
   */
  interface IndicadorFieldRefs {
    readonly id: FieldRef<"Indicador", 'String'>
    readonly nome: FieldRef<"Indicador", 'String'>
    readonly categoria: FieldRef<"Indicador", 'Categoria'>
  }
    

  // Custom InputTypes
  /**
   * Indicador findUnique
   */
  export type IndicadorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicador
     */
    select?: IndicadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Indicador
     */
    omit?: IndicadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicadorInclude<ExtArgs> | null
    /**
     * Filter, which Indicador to fetch.
     */
    where: IndicadorWhereUniqueInput
  }

  /**
   * Indicador findUniqueOrThrow
   */
  export type IndicadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicador
     */
    select?: IndicadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Indicador
     */
    omit?: IndicadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicadorInclude<ExtArgs> | null
    /**
     * Filter, which Indicador to fetch.
     */
    where: IndicadorWhereUniqueInput
  }

  /**
   * Indicador findFirst
   */
  export type IndicadorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicador
     */
    select?: IndicadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Indicador
     */
    omit?: IndicadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicadorInclude<ExtArgs> | null
    /**
     * Filter, which Indicador to fetch.
     */
    where?: IndicadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Indicadors to fetch.
     */
    orderBy?: IndicadorOrderByWithRelationInput | IndicadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Indicadors.
     */
    cursor?: IndicadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Indicadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Indicadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Indicadors.
     */
    distinct?: IndicadorScalarFieldEnum | IndicadorScalarFieldEnum[]
  }

  /**
   * Indicador findFirstOrThrow
   */
  export type IndicadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicador
     */
    select?: IndicadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Indicador
     */
    omit?: IndicadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicadorInclude<ExtArgs> | null
    /**
     * Filter, which Indicador to fetch.
     */
    where?: IndicadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Indicadors to fetch.
     */
    orderBy?: IndicadorOrderByWithRelationInput | IndicadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Indicadors.
     */
    cursor?: IndicadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Indicadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Indicadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Indicadors.
     */
    distinct?: IndicadorScalarFieldEnum | IndicadorScalarFieldEnum[]
  }

  /**
   * Indicador findMany
   */
  export type IndicadorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicador
     */
    select?: IndicadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Indicador
     */
    omit?: IndicadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicadorInclude<ExtArgs> | null
    /**
     * Filter, which Indicadors to fetch.
     */
    where?: IndicadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Indicadors to fetch.
     */
    orderBy?: IndicadorOrderByWithRelationInput | IndicadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Indicadors.
     */
    cursor?: IndicadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Indicadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Indicadors.
     */
    skip?: number
    distinct?: IndicadorScalarFieldEnum | IndicadorScalarFieldEnum[]
  }

  /**
   * Indicador create
   */
  export type IndicadorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicador
     */
    select?: IndicadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Indicador
     */
    omit?: IndicadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicadorInclude<ExtArgs> | null
    /**
     * The data needed to create a Indicador.
     */
    data: XOR<IndicadorCreateInput, IndicadorUncheckedCreateInput>
  }

  /**
   * Indicador createMany
   */
  export type IndicadorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Indicadors.
     */
    data: IndicadorCreateManyInput | IndicadorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Indicador createManyAndReturn
   */
  export type IndicadorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicador
     */
    select?: IndicadorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Indicador
     */
    omit?: IndicadorOmit<ExtArgs> | null
    /**
     * The data used to create many Indicadors.
     */
    data: IndicadorCreateManyInput | IndicadorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Indicador update
   */
  export type IndicadorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicador
     */
    select?: IndicadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Indicador
     */
    omit?: IndicadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicadorInclude<ExtArgs> | null
    /**
     * The data needed to update a Indicador.
     */
    data: XOR<IndicadorUpdateInput, IndicadorUncheckedUpdateInput>
    /**
     * Choose, which Indicador to update.
     */
    where: IndicadorWhereUniqueInput
  }

  /**
   * Indicador updateMany
   */
  export type IndicadorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Indicadors.
     */
    data: XOR<IndicadorUpdateManyMutationInput, IndicadorUncheckedUpdateManyInput>
    /**
     * Filter which Indicadors to update
     */
    where?: IndicadorWhereInput
    /**
     * Limit how many Indicadors to update.
     */
    limit?: number
  }

  /**
   * Indicador updateManyAndReturn
   */
  export type IndicadorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicador
     */
    select?: IndicadorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Indicador
     */
    omit?: IndicadorOmit<ExtArgs> | null
    /**
     * The data used to update Indicadors.
     */
    data: XOR<IndicadorUpdateManyMutationInput, IndicadorUncheckedUpdateManyInput>
    /**
     * Filter which Indicadors to update
     */
    where?: IndicadorWhereInput
    /**
     * Limit how many Indicadors to update.
     */
    limit?: number
  }

  /**
   * Indicador upsert
   */
  export type IndicadorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicador
     */
    select?: IndicadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Indicador
     */
    omit?: IndicadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicadorInclude<ExtArgs> | null
    /**
     * The filter to search for the Indicador to update in case it exists.
     */
    where: IndicadorWhereUniqueInput
    /**
     * In case the Indicador found by the `where` argument doesn't exist, create a new Indicador with this data.
     */
    create: XOR<IndicadorCreateInput, IndicadorUncheckedCreateInput>
    /**
     * In case the Indicador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IndicadorUpdateInput, IndicadorUncheckedUpdateInput>
  }

  /**
   * Indicador delete
   */
  export type IndicadorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicador
     */
    select?: IndicadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Indicador
     */
    omit?: IndicadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicadorInclude<ExtArgs> | null
    /**
     * Filter which Indicador to delete.
     */
    where: IndicadorWhereUniqueInput
  }

  /**
   * Indicador deleteMany
   */
  export type IndicadorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Indicadors to delete
     */
    where?: IndicadorWhereInput
    /**
     * Limit how many Indicadors to delete.
     */
    limit?: number
  }

  /**
   * Indicador.saude
   */
  export type Indicador$saudeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeInclude<ExtArgs> | null
    where?: SaudeWhereInput
    orderBy?: SaudeOrderByWithRelationInput | SaudeOrderByWithRelationInput[]
    cursor?: SaudeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaudeScalarFieldEnum | SaudeScalarFieldEnum[]
  }

  /**
   * Indicador.economia
   */
  export type Indicador$economiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaInclude<ExtArgs> | null
    where?: EconomiaWhereInput
    orderBy?: EconomiaOrderByWithRelationInput | EconomiaOrderByWithRelationInput[]
    cursor?: EconomiaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EconomiaScalarFieldEnum | EconomiaScalarFieldEnum[]
  }

  /**
   * Indicador.ambiente
   */
  export type Indicador$ambienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteInclude<ExtArgs> | null
    where?: AmbienteWhereInput
    orderBy?: AmbienteOrderByWithRelationInput | AmbienteOrderByWithRelationInput[]
    cursor?: AmbienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmbienteScalarFieldEnum | AmbienteScalarFieldEnum[]
  }

  /**
   * Indicador.tecnologia
   */
  export type Indicador$tecnologiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaInclude<ExtArgs> | null
    where?: TecnologiaWhereInput
    orderBy?: TecnologiaOrderByWithRelationInput | TecnologiaOrderByWithRelationInput[]
    cursor?: TecnologiaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TecnologiaScalarFieldEnum | TecnologiaScalarFieldEnum[]
  }

  /**
   * Indicador.demografia
   */
  export type Indicador$demografiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaInclude<ExtArgs> | null
    where?: DemografiaWhereInput
    orderBy?: DemografiaOrderByWithRelationInput | DemografiaOrderByWithRelationInput[]
    cursor?: DemografiaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DemografiaScalarFieldEnum | DemografiaScalarFieldEnum[]
  }

  /**
   * Indicador without action
   */
  export type IndicadorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Indicador
     */
    select?: IndicadorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Indicador
     */
    omit?: IndicadorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndicadorInclude<ExtArgs> | null
  }


  /**
   * Model Saude
   */

  export type AggregateSaude = {
    _count: SaudeCountAggregateOutputType | null
    _avg: SaudeAvgAggregateOutputType | null
    _sum: SaudeSumAggregateOutputType | null
    _min: SaudeMinAggregateOutputType | null
    _max: SaudeMaxAggregateOutputType | null
  }

  export type SaudeAvgAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
  }

  export type SaudeSumAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
  }

  export type SaudeMinAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
    paisId: string | null
    indicadorId: string | null
    createdAt: Date | null
  }

  export type SaudeMaxAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
    paisId: string | null
    indicadorId: string | null
    createdAt: Date | null
  }

  export type SaudeCountAggregateOutputType = {
    id: number
    valor: number
    ano: number
    paisId: number
    indicadorId: number
    createdAt: number
    _all: number
  }


  export type SaudeAvgAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
  }

  export type SaudeSumAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
  }

  export type SaudeMinAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
  }

  export type SaudeMaxAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
  }

  export type SaudeCountAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
    _all?: true
  }

  export type SaudeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Saude to aggregate.
     */
    where?: SaudeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Saudes to fetch.
     */
    orderBy?: SaudeOrderByWithRelationInput | SaudeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaudeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Saudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Saudes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Saudes
    **/
    _count?: true | SaudeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaudeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaudeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaudeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaudeMaxAggregateInputType
  }

  export type GetSaudeAggregateType<T extends SaudeAggregateArgs> = {
        [P in keyof T & keyof AggregateSaude]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaude[P]>
      : GetScalarType<T[P], AggregateSaude[P]>
  }




  export type SaudeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaudeWhereInput
    orderBy?: SaudeOrderByWithAggregationInput | SaudeOrderByWithAggregationInput[]
    by: SaudeScalarFieldEnum[] | SaudeScalarFieldEnum
    having?: SaudeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaudeCountAggregateInputType | true
    _avg?: SaudeAvgAggregateInputType
    _sum?: SaudeSumAggregateInputType
    _min?: SaudeMinAggregateInputType
    _max?: SaudeMaxAggregateInputType
  }

  export type SaudeGroupByOutputType = {
    id: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt: Date
    _count: SaudeCountAggregateOutputType | null
    _avg: SaudeAvgAggregateOutputType | null
    _sum: SaudeSumAggregateOutputType | null
    _min: SaudeMinAggregateOutputType | null
    _max: SaudeMaxAggregateOutputType | null
  }

  type GetSaudeGroupByPayload<T extends SaudeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaudeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaudeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaudeGroupByOutputType[P]>
            : GetScalarType<T[P], SaudeGroupByOutputType[P]>
        }
      >
    >


  export type SaudeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saude"]>

  export type SaudeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saude"]>

  export type SaudeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saude"]>

  export type SaudeSelectScalar = {
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
  }

  export type SaudeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "valor" | "ano" | "paisId" | "indicadorId" | "createdAt", ExtArgs["result"]["saude"]>
  export type SaudeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }
  export type SaudeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }
  export type SaudeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }

  export type $SaudePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Saude"
    objects: {
      pais: Prisma.$PaisPayload<ExtArgs>
      indicador: Prisma.$IndicadorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      valor: number
      ano: number
      paisId: string
      indicadorId: string
      createdAt: Date
    }, ExtArgs["result"]["saude"]>
    composites: {}
  }

  type SaudeGetPayload<S extends boolean | null | undefined | SaudeDefaultArgs> = $Result.GetResult<Prisma.$SaudePayload, S>

  type SaudeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SaudeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SaudeCountAggregateInputType | true
    }

  export interface SaudeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Saude'], meta: { name: 'Saude' } }
    /**
     * Find zero or one Saude that matches the filter.
     * @param {SaudeFindUniqueArgs} args - Arguments to find a Saude
     * @example
     * // Get one Saude
     * const saude = await prisma.saude.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SaudeFindUniqueArgs>(args: SelectSubset<T, SaudeFindUniqueArgs<ExtArgs>>): Prisma__SaudeClient<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Saude that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SaudeFindUniqueOrThrowArgs} args - Arguments to find a Saude
     * @example
     * // Get one Saude
     * const saude = await prisma.saude.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SaudeFindUniqueOrThrowArgs>(args: SelectSubset<T, SaudeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SaudeClient<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Saude that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaudeFindFirstArgs} args - Arguments to find a Saude
     * @example
     * // Get one Saude
     * const saude = await prisma.saude.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SaudeFindFirstArgs>(args?: SelectSubset<T, SaudeFindFirstArgs<ExtArgs>>): Prisma__SaudeClient<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Saude that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaudeFindFirstOrThrowArgs} args - Arguments to find a Saude
     * @example
     * // Get one Saude
     * const saude = await prisma.saude.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SaudeFindFirstOrThrowArgs>(args?: SelectSubset<T, SaudeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SaudeClient<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Saudes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaudeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Saudes
     * const saudes = await prisma.saude.findMany()
     * 
     * // Get first 10 Saudes
     * const saudes = await prisma.saude.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saudeWithIdOnly = await prisma.saude.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SaudeFindManyArgs>(args?: SelectSubset<T, SaudeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Saude.
     * @param {SaudeCreateArgs} args - Arguments to create a Saude.
     * @example
     * // Create one Saude
     * const Saude = await prisma.saude.create({
     *   data: {
     *     // ... data to create a Saude
     *   }
     * })
     * 
     */
    create<T extends SaudeCreateArgs>(args: SelectSubset<T, SaudeCreateArgs<ExtArgs>>): Prisma__SaudeClient<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Saudes.
     * @param {SaudeCreateManyArgs} args - Arguments to create many Saudes.
     * @example
     * // Create many Saudes
     * const saude = await prisma.saude.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SaudeCreateManyArgs>(args?: SelectSubset<T, SaudeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Saudes and returns the data saved in the database.
     * @param {SaudeCreateManyAndReturnArgs} args - Arguments to create many Saudes.
     * @example
     * // Create many Saudes
     * const saude = await prisma.saude.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Saudes and only return the `id`
     * const saudeWithIdOnly = await prisma.saude.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SaudeCreateManyAndReturnArgs>(args?: SelectSubset<T, SaudeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Saude.
     * @param {SaudeDeleteArgs} args - Arguments to delete one Saude.
     * @example
     * // Delete one Saude
     * const Saude = await prisma.saude.delete({
     *   where: {
     *     // ... filter to delete one Saude
     *   }
     * })
     * 
     */
    delete<T extends SaudeDeleteArgs>(args: SelectSubset<T, SaudeDeleteArgs<ExtArgs>>): Prisma__SaudeClient<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Saude.
     * @param {SaudeUpdateArgs} args - Arguments to update one Saude.
     * @example
     * // Update one Saude
     * const saude = await prisma.saude.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SaudeUpdateArgs>(args: SelectSubset<T, SaudeUpdateArgs<ExtArgs>>): Prisma__SaudeClient<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Saudes.
     * @param {SaudeDeleteManyArgs} args - Arguments to filter Saudes to delete.
     * @example
     * // Delete a few Saudes
     * const { count } = await prisma.saude.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SaudeDeleteManyArgs>(args?: SelectSubset<T, SaudeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Saudes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaudeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Saudes
     * const saude = await prisma.saude.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SaudeUpdateManyArgs>(args: SelectSubset<T, SaudeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Saudes and returns the data updated in the database.
     * @param {SaudeUpdateManyAndReturnArgs} args - Arguments to update many Saudes.
     * @example
     * // Update many Saudes
     * const saude = await prisma.saude.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Saudes and only return the `id`
     * const saudeWithIdOnly = await prisma.saude.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SaudeUpdateManyAndReturnArgs>(args: SelectSubset<T, SaudeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Saude.
     * @param {SaudeUpsertArgs} args - Arguments to update or create a Saude.
     * @example
     * // Update or create a Saude
     * const saude = await prisma.saude.upsert({
     *   create: {
     *     // ... data to create a Saude
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Saude we want to update
     *   }
     * })
     */
    upsert<T extends SaudeUpsertArgs>(args: SelectSubset<T, SaudeUpsertArgs<ExtArgs>>): Prisma__SaudeClient<$Result.GetResult<Prisma.$SaudePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Saudes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaudeCountArgs} args - Arguments to filter Saudes to count.
     * @example
     * // Count the number of Saudes
     * const count = await prisma.saude.count({
     *   where: {
     *     // ... the filter for the Saudes we want to count
     *   }
     * })
    **/
    count<T extends SaudeCountArgs>(
      args?: Subset<T, SaudeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaudeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Saude.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaudeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaudeAggregateArgs>(args: Subset<T, SaudeAggregateArgs>): Prisma.PrismaPromise<GetSaudeAggregateType<T>>

    /**
     * Group by Saude.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaudeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaudeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaudeGroupByArgs['orderBy'] }
        : { orderBy?: SaudeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaudeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaudeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Saude model
   */
  readonly fields: SaudeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Saude.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaudeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pais<T extends PaisDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaisDefaultArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    indicador<T extends IndicadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IndicadorDefaultArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Saude model
   */
  interface SaudeFieldRefs {
    readonly id: FieldRef<"Saude", 'Int'>
    readonly valor: FieldRef<"Saude", 'Float'>
    readonly ano: FieldRef<"Saude", 'Int'>
    readonly paisId: FieldRef<"Saude", 'String'>
    readonly indicadorId: FieldRef<"Saude", 'String'>
    readonly createdAt: FieldRef<"Saude", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Saude findUnique
   */
  export type SaudeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeInclude<ExtArgs> | null
    /**
     * Filter, which Saude to fetch.
     */
    where: SaudeWhereUniqueInput
  }

  /**
   * Saude findUniqueOrThrow
   */
  export type SaudeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeInclude<ExtArgs> | null
    /**
     * Filter, which Saude to fetch.
     */
    where: SaudeWhereUniqueInput
  }

  /**
   * Saude findFirst
   */
  export type SaudeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeInclude<ExtArgs> | null
    /**
     * Filter, which Saude to fetch.
     */
    where?: SaudeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Saudes to fetch.
     */
    orderBy?: SaudeOrderByWithRelationInput | SaudeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Saudes.
     */
    cursor?: SaudeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Saudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Saudes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Saudes.
     */
    distinct?: SaudeScalarFieldEnum | SaudeScalarFieldEnum[]
  }

  /**
   * Saude findFirstOrThrow
   */
  export type SaudeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeInclude<ExtArgs> | null
    /**
     * Filter, which Saude to fetch.
     */
    where?: SaudeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Saudes to fetch.
     */
    orderBy?: SaudeOrderByWithRelationInput | SaudeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Saudes.
     */
    cursor?: SaudeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Saudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Saudes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Saudes.
     */
    distinct?: SaudeScalarFieldEnum | SaudeScalarFieldEnum[]
  }

  /**
   * Saude findMany
   */
  export type SaudeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeInclude<ExtArgs> | null
    /**
     * Filter, which Saudes to fetch.
     */
    where?: SaudeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Saudes to fetch.
     */
    orderBy?: SaudeOrderByWithRelationInput | SaudeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Saudes.
     */
    cursor?: SaudeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Saudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Saudes.
     */
    skip?: number
    distinct?: SaudeScalarFieldEnum | SaudeScalarFieldEnum[]
  }

  /**
   * Saude create
   */
  export type SaudeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeInclude<ExtArgs> | null
    /**
     * The data needed to create a Saude.
     */
    data: XOR<SaudeCreateInput, SaudeUncheckedCreateInput>
  }

  /**
   * Saude createMany
   */
  export type SaudeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Saudes.
     */
    data: SaudeCreateManyInput | SaudeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Saude createManyAndReturn
   */
  export type SaudeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * The data used to create many Saudes.
     */
    data: SaudeCreateManyInput | SaudeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Saude update
   */
  export type SaudeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeInclude<ExtArgs> | null
    /**
     * The data needed to update a Saude.
     */
    data: XOR<SaudeUpdateInput, SaudeUncheckedUpdateInput>
    /**
     * Choose, which Saude to update.
     */
    where: SaudeWhereUniqueInput
  }

  /**
   * Saude updateMany
   */
  export type SaudeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Saudes.
     */
    data: XOR<SaudeUpdateManyMutationInput, SaudeUncheckedUpdateManyInput>
    /**
     * Filter which Saudes to update
     */
    where?: SaudeWhereInput
    /**
     * Limit how many Saudes to update.
     */
    limit?: number
  }

  /**
   * Saude updateManyAndReturn
   */
  export type SaudeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * The data used to update Saudes.
     */
    data: XOR<SaudeUpdateManyMutationInput, SaudeUncheckedUpdateManyInput>
    /**
     * Filter which Saudes to update
     */
    where?: SaudeWhereInput
    /**
     * Limit how many Saudes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Saude upsert
   */
  export type SaudeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeInclude<ExtArgs> | null
    /**
     * The filter to search for the Saude to update in case it exists.
     */
    where: SaudeWhereUniqueInput
    /**
     * In case the Saude found by the `where` argument doesn't exist, create a new Saude with this data.
     */
    create: XOR<SaudeCreateInput, SaudeUncheckedCreateInput>
    /**
     * In case the Saude was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaudeUpdateInput, SaudeUncheckedUpdateInput>
  }

  /**
   * Saude delete
   */
  export type SaudeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeInclude<ExtArgs> | null
    /**
     * Filter which Saude to delete.
     */
    where: SaudeWhereUniqueInput
  }

  /**
   * Saude deleteMany
   */
  export type SaudeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Saudes to delete
     */
    where?: SaudeWhereInput
    /**
     * Limit how many Saudes to delete.
     */
    limit?: number
  }

  /**
   * Saude without action
   */
  export type SaudeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Saude
     */
    select?: SaudeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Saude
     */
    omit?: SaudeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaudeInclude<ExtArgs> | null
  }


  /**
   * Model Economia
   */

  export type AggregateEconomia = {
    _count: EconomiaCountAggregateOutputType | null
    _avg: EconomiaAvgAggregateOutputType | null
    _sum: EconomiaSumAggregateOutputType | null
    _min: EconomiaMinAggregateOutputType | null
    _max: EconomiaMaxAggregateOutputType | null
  }

  export type EconomiaAvgAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
  }

  export type EconomiaSumAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
  }

  export type EconomiaMinAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
    paisId: string | null
    indicadorId: string | null
    createdAt: Date | null
  }

  export type EconomiaMaxAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
    paisId: string | null
    indicadorId: string | null
    createdAt: Date | null
  }

  export type EconomiaCountAggregateOutputType = {
    id: number
    valor: number
    ano: number
    paisId: number
    indicadorId: number
    createdAt: number
    _all: number
  }


  export type EconomiaAvgAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
  }

  export type EconomiaSumAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
  }

  export type EconomiaMinAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
  }

  export type EconomiaMaxAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
  }

  export type EconomiaCountAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
    _all?: true
  }

  export type EconomiaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Economia to aggregate.
     */
    where?: EconomiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Economias to fetch.
     */
    orderBy?: EconomiaOrderByWithRelationInput | EconomiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EconomiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Economias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Economias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Economias
    **/
    _count?: true | EconomiaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EconomiaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EconomiaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EconomiaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EconomiaMaxAggregateInputType
  }

  export type GetEconomiaAggregateType<T extends EconomiaAggregateArgs> = {
        [P in keyof T & keyof AggregateEconomia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEconomia[P]>
      : GetScalarType<T[P], AggregateEconomia[P]>
  }




  export type EconomiaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EconomiaWhereInput
    orderBy?: EconomiaOrderByWithAggregationInput | EconomiaOrderByWithAggregationInput[]
    by: EconomiaScalarFieldEnum[] | EconomiaScalarFieldEnum
    having?: EconomiaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EconomiaCountAggregateInputType | true
    _avg?: EconomiaAvgAggregateInputType
    _sum?: EconomiaSumAggregateInputType
    _min?: EconomiaMinAggregateInputType
    _max?: EconomiaMaxAggregateInputType
  }

  export type EconomiaGroupByOutputType = {
    id: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt: Date
    _count: EconomiaCountAggregateOutputType | null
    _avg: EconomiaAvgAggregateOutputType | null
    _sum: EconomiaSumAggregateOutputType | null
    _min: EconomiaMinAggregateOutputType | null
    _max: EconomiaMaxAggregateOutputType | null
  }

  type GetEconomiaGroupByPayload<T extends EconomiaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EconomiaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EconomiaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EconomiaGroupByOutputType[P]>
            : GetScalarType<T[P], EconomiaGroupByOutputType[P]>
        }
      >
    >


  export type EconomiaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["economia"]>

  export type EconomiaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["economia"]>

  export type EconomiaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["economia"]>

  export type EconomiaSelectScalar = {
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
  }

  export type EconomiaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "valor" | "ano" | "paisId" | "indicadorId" | "createdAt", ExtArgs["result"]["economia"]>
  export type EconomiaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }
  export type EconomiaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }
  export type EconomiaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }

  export type $EconomiaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Economia"
    objects: {
      pais: Prisma.$PaisPayload<ExtArgs>
      indicador: Prisma.$IndicadorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      valor: number
      ano: number
      paisId: string
      indicadorId: string
      createdAt: Date
    }, ExtArgs["result"]["economia"]>
    composites: {}
  }

  type EconomiaGetPayload<S extends boolean | null | undefined | EconomiaDefaultArgs> = $Result.GetResult<Prisma.$EconomiaPayload, S>

  type EconomiaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EconomiaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EconomiaCountAggregateInputType | true
    }

  export interface EconomiaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Economia'], meta: { name: 'Economia' } }
    /**
     * Find zero or one Economia that matches the filter.
     * @param {EconomiaFindUniqueArgs} args - Arguments to find a Economia
     * @example
     * // Get one Economia
     * const economia = await prisma.economia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EconomiaFindUniqueArgs>(args: SelectSubset<T, EconomiaFindUniqueArgs<ExtArgs>>): Prisma__EconomiaClient<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Economia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EconomiaFindUniqueOrThrowArgs} args - Arguments to find a Economia
     * @example
     * // Get one Economia
     * const economia = await prisma.economia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EconomiaFindUniqueOrThrowArgs>(args: SelectSubset<T, EconomiaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EconomiaClient<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Economia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EconomiaFindFirstArgs} args - Arguments to find a Economia
     * @example
     * // Get one Economia
     * const economia = await prisma.economia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EconomiaFindFirstArgs>(args?: SelectSubset<T, EconomiaFindFirstArgs<ExtArgs>>): Prisma__EconomiaClient<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Economia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EconomiaFindFirstOrThrowArgs} args - Arguments to find a Economia
     * @example
     * // Get one Economia
     * const economia = await prisma.economia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EconomiaFindFirstOrThrowArgs>(args?: SelectSubset<T, EconomiaFindFirstOrThrowArgs<ExtArgs>>): Prisma__EconomiaClient<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Economias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EconomiaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Economias
     * const economias = await prisma.economia.findMany()
     * 
     * // Get first 10 Economias
     * const economias = await prisma.economia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const economiaWithIdOnly = await prisma.economia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EconomiaFindManyArgs>(args?: SelectSubset<T, EconomiaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Economia.
     * @param {EconomiaCreateArgs} args - Arguments to create a Economia.
     * @example
     * // Create one Economia
     * const Economia = await prisma.economia.create({
     *   data: {
     *     // ... data to create a Economia
     *   }
     * })
     * 
     */
    create<T extends EconomiaCreateArgs>(args: SelectSubset<T, EconomiaCreateArgs<ExtArgs>>): Prisma__EconomiaClient<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Economias.
     * @param {EconomiaCreateManyArgs} args - Arguments to create many Economias.
     * @example
     * // Create many Economias
     * const economia = await prisma.economia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EconomiaCreateManyArgs>(args?: SelectSubset<T, EconomiaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Economias and returns the data saved in the database.
     * @param {EconomiaCreateManyAndReturnArgs} args - Arguments to create many Economias.
     * @example
     * // Create many Economias
     * const economia = await prisma.economia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Economias and only return the `id`
     * const economiaWithIdOnly = await prisma.economia.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EconomiaCreateManyAndReturnArgs>(args?: SelectSubset<T, EconomiaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Economia.
     * @param {EconomiaDeleteArgs} args - Arguments to delete one Economia.
     * @example
     * // Delete one Economia
     * const Economia = await prisma.economia.delete({
     *   where: {
     *     // ... filter to delete one Economia
     *   }
     * })
     * 
     */
    delete<T extends EconomiaDeleteArgs>(args: SelectSubset<T, EconomiaDeleteArgs<ExtArgs>>): Prisma__EconomiaClient<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Economia.
     * @param {EconomiaUpdateArgs} args - Arguments to update one Economia.
     * @example
     * // Update one Economia
     * const economia = await prisma.economia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EconomiaUpdateArgs>(args: SelectSubset<T, EconomiaUpdateArgs<ExtArgs>>): Prisma__EconomiaClient<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Economias.
     * @param {EconomiaDeleteManyArgs} args - Arguments to filter Economias to delete.
     * @example
     * // Delete a few Economias
     * const { count } = await prisma.economia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EconomiaDeleteManyArgs>(args?: SelectSubset<T, EconomiaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Economias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EconomiaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Economias
     * const economia = await prisma.economia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EconomiaUpdateManyArgs>(args: SelectSubset<T, EconomiaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Economias and returns the data updated in the database.
     * @param {EconomiaUpdateManyAndReturnArgs} args - Arguments to update many Economias.
     * @example
     * // Update many Economias
     * const economia = await prisma.economia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Economias and only return the `id`
     * const economiaWithIdOnly = await prisma.economia.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EconomiaUpdateManyAndReturnArgs>(args: SelectSubset<T, EconomiaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Economia.
     * @param {EconomiaUpsertArgs} args - Arguments to update or create a Economia.
     * @example
     * // Update or create a Economia
     * const economia = await prisma.economia.upsert({
     *   create: {
     *     // ... data to create a Economia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Economia we want to update
     *   }
     * })
     */
    upsert<T extends EconomiaUpsertArgs>(args: SelectSubset<T, EconomiaUpsertArgs<ExtArgs>>): Prisma__EconomiaClient<$Result.GetResult<Prisma.$EconomiaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Economias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EconomiaCountArgs} args - Arguments to filter Economias to count.
     * @example
     * // Count the number of Economias
     * const count = await prisma.economia.count({
     *   where: {
     *     // ... the filter for the Economias we want to count
     *   }
     * })
    **/
    count<T extends EconomiaCountArgs>(
      args?: Subset<T, EconomiaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EconomiaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Economia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EconomiaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EconomiaAggregateArgs>(args: Subset<T, EconomiaAggregateArgs>): Prisma.PrismaPromise<GetEconomiaAggregateType<T>>

    /**
     * Group by Economia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EconomiaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EconomiaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EconomiaGroupByArgs['orderBy'] }
        : { orderBy?: EconomiaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EconomiaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEconomiaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Economia model
   */
  readonly fields: EconomiaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Economia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EconomiaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pais<T extends PaisDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaisDefaultArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    indicador<T extends IndicadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IndicadorDefaultArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Economia model
   */
  interface EconomiaFieldRefs {
    readonly id: FieldRef<"Economia", 'Int'>
    readonly valor: FieldRef<"Economia", 'Float'>
    readonly ano: FieldRef<"Economia", 'Int'>
    readonly paisId: FieldRef<"Economia", 'String'>
    readonly indicadorId: FieldRef<"Economia", 'String'>
    readonly createdAt: FieldRef<"Economia", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Economia findUnique
   */
  export type EconomiaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaInclude<ExtArgs> | null
    /**
     * Filter, which Economia to fetch.
     */
    where: EconomiaWhereUniqueInput
  }

  /**
   * Economia findUniqueOrThrow
   */
  export type EconomiaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaInclude<ExtArgs> | null
    /**
     * Filter, which Economia to fetch.
     */
    where: EconomiaWhereUniqueInput
  }

  /**
   * Economia findFirst
   */
  export type EconomiaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaInclude<ExtArgs> | null
    /**
     * Filter, which Economia to fetch.
     */
    where?: EconomiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Economias to fetch.
     */
    orderBy?: EconomiaOrderByWithRelationInput | EconomiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Economias.
     */
    cursor?: EconomiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Economias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Economias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Economias.
     */
    distinct?: EconomiaScalarFieldEnum | EconomiaScalarFieldEnum[]
  }

  /**
   * Economia findFirstOrThrow
   */
  export type EconomiaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaInclude<ExtArgs> | null
    /**
     * Filter, which Economia to fetch.
     */
    where?: EconomiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Economias to fetch.
     */
    orderBy?: EconomiaOrderByWithRelationInput | EconomiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Economias.
     */
    cursor?: EconomiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Economias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Economias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Economias.
     */
    distinct?: EconomiaScalarFieldEnum | EconomiaScalarFieldEnum[]
  }

  /**
   * Economia findMany
   */
  export type EconomiaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaInclude<ExtArgs> | null
    /**
     * Filter, which Economias to fetch.
     */
    where?: EconomiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Economias to fetch.
     */
    orderBy?: EconomiaOrderByWithRelationInput | EconomiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Economias.
     */
    cursor?: EconomiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Economias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Economias.
     */
    skip?: number
    distinct?: EconomiaScalarFieldEnum | EconomiaScalarFieldEnum[]
  }

  /**
   * Economia create
   */
  export type EconomiaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaInclude<ExtArgs> | null
    /**
     * The data needed to create a Economia.
     */
    data: XOR<EconomiaCreateInput, EconomiaUncheckedCreateInput>
  }

  /**
   * Economia createMany
   */
  export type EconomiaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Economias.
     */
    data: EconomiaCreateManyInput | EconomiaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Economia createManyAndReturn
   */
  export type EconomiaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * The data used to create many Economias.
     */
    data: EconomiaCreateManyInput | EconomiaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Economia update
   */
  export type EconomiaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaInclude<ExtArgs> | null
    /**
     * The data needed to update a Economia.
     */
    data: XOR<EconomiaUpdateInput, EconomiaUncheckedUpdateInput>
    /**
     * Choose, which Economia to update.
     */
    where: EconomiaWhereUniqueInput
  }

  /**
   * Economia updateMany
   */
  export type EconomiaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Economias.
     */
    data: XOR<EconomiaUpdateManyMutationInput, EconomiaUncheckedUpdateManyInput>
    /**
     * Filter which Economias to update
     */
    where?: EconomiaWhereInput
    /**
     * Limit how many Economias to update.
     */
    limit?: number
  }

  /**
   * Economia updateManyAndReturn
   */
  export type EconomiaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * The data used to update Economias.
     */
    data: XOR<EconomiaUpdateManyMutationInput, EconomiaUncheckedUpdateManyInput>
    /**
     * Filter which Economias to update
     */
    where?: EconomiaWhereInput
    /**
     * Limit how many Economias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Economia upsert
   */
  export type EconomiaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaInclude<ExtArgs> | null
    /**
     * The filter to search for the Economia to update in case it exists.
     */
    where: EconomiaWhereUniqueInput
    /**
     * In case the Economia found by the `where` argument doesn't exist, create a new Economia with this data.
     */
    create: XOR<EconomiaCreateInput, EconomiaUncheckedCreateInput>
    /**
     * In case the Economia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EconomiaUpdateInput, EconomiaUncheckedUpdateInput>
  }

  /**
   * Economia delete
   */
  export type EconomiaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaInclude<ExtArgs> | null
    /**
     * Filter which Economia to delete.
     */
    where: EconomiaWhereUniqueInput
  }

  /**
   * Economia deleteMany
   */
  export type EconomiaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Economias to delete
     */
    where?: EconomiaWhereInput
    /**
     * Limit how many Economias to delete.
     */
    limit?: number
  }

  /**
   * Economia without action
   */
  export type EconomiaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Economia
     */
    select?: EconomiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Economia
     */
    omit?: EconomiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EconomiaInclude<ExtArgs> | null
  }


  /**
   * Model Ambiente
   */

  export type AggregateAmbiente = {
    _count: AmbienteCountAggregateOutputType | null
    _avg: AmbienteAvgAggregateOutputType | null
    _sum: AmbienteSumAggregateOutputType | null
    _min: AmbienteMinAggregateOutputType | null
    _max: AmbienteMaxAggregateOutputType | null
  }

  export type AmbienteAvgAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
  }

  export type AmbienteSumAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
  }

  export type AmbienteMinAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
    paisId: string | null
    indicadorId: string | null
    createdAt: Date | null
  }

  export type AmbienteMaxAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
    paisId: string | null
    indicadorId: string | null
    createdAt: Date | null
  }

  export type AmbienteCountAggregateOutputType = {
    id: number
    valor: number
    ano: number
    paisId: number
    indicadorId: number
    createdAt: number
    _all: number
  }


  export type AmbienteAvgAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
  }

  export type AmbienteSumAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
  }

  export type AmbienteMinAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
  }

  export type AmbienteMaxAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
  }

  export type AmbienteCountAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
    _all?: true
  }

  export type AmbienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ambiente to aggregate.
     */
    where?: AmbienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ambientes to fetch.
     */
    orderBy?: AmbienteOrderByWithRelationInput | AmbienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AmbienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ambientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ambientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ambientes
    **/
    _count?: true | AmbienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AmbienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AmbienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AmbienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AmbienteMaxAggregateInputType
  }

  export type GetAmbienteAggregateType<T extends AmbienteAggregateArgs> = {
        [P in keyof T & keyof AggregateAmbiente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAmbiente[P]>
      : GetScalarType<T[P], AggregateAmbiente[P]>
  }




  export type AmbienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmbienteWhereInput
    orderBy?: AmbienteOrderByWithAggregationInput | AmbienteOrderByWithAggregationInput[]
    by: AmbienteScalarFieldEnum[] | AmbienteScalarFieldEnum
    having?: AmbienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AmbienteCountAggregateInputType | true
    _avg?: AmbienteAvgAggregateInputType
    _sum?: AmbienteSumAggregateInputType
    _min?: AmbienteMinAggregateInputType
    _max?: AmbienteMaxAggregateInputType
  }

  export type AmbienteGroupByOutputType = {
    id: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt: Date
    _count: AmbienteCountAggregateOutputType | null
    _avg: AmbienteAvgAggregateOutputType | null
    _sum: AmbienteSumAggregateOutputType | null
    _min: AmbienteMinAggregateOutputType | null
    _max: AmbienteMaxAggregateOutputType | null
  }

  type GetAmbienteGroupByPayload<T extends AmbienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AmbienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AmbienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AmbienteGroupByOutputType[P]>
            : GetScalarType<T[P], AmbienteGroupByOutputType[P]>
        }
      >
    >


  export type AmbienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ambiente"]>

  export type AmbienteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ambiente"]>

  export type AmbienteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ambiente"]>

  export type AmbienteSelectScalar = {
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
  }

  export type AmbienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "valor" | "ano" | "paisId" | "indicadorId" | "createdAt", ExtArgs["result"]["ambiente"]>
  export type AmbienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }
  export type AmbienteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }
  export type AmbienteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }

  export type $AmbientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ambiente"
    objects: {
      pais: Prisma.$PaisPayload<ExtArgs>
      indicador: Prisma.$IndicadorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      valor: number
      ano: number
      paisId: string
      indicadorId: string
      createdAt: Date
    }, ExtArgs["result"]["ambiente"]>
    composites: {}
  }

  type AmbienteGetPayload<S extends boolean | null | undefined | AmbienteDefaultArgs> = $Result.GetResult<Prisma.$AmbientePayload, S>

  type AmbienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AmbienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AmbienteCountAggregateInputType | true
    }

  export interface AmbienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ambiente'], meta: { name: 'Ambiente' } }
    /**
     * Find zero or one Ambiente that matches the filter.
     * @param {AmbienteFindUniqueArgs} args - Arguments to find a Ambiente
     * @example
     * // Get one Ambiente
     * const ambiente = await prisma.ambiente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AmbienteFindUniqueArgs>(args: SelectSubset<T, AmbienteFindUniqueArgs<ExtArgs>>): Prisma__AmbienteClient<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ambiente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AmbienteFindUniqueOrThrowArgs} args - Arguments to find a Ambiente
     * @example
     * // Get one Ambiente
     * const ambiente = await prisma.ambiente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AmbienteFindUniqueOrThrowArgs>(args: SelectSubset<T, AmbienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AmbienteClient<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ambiente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbienteFindFirstArgs} args - Arguments to find a Ambiente
     * @example
     * // Get one Ambiente
     * const ambiente = await prisma.ambiente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AmbienteFindFirstArgs>(args?: SelectSubset<T, AmbienteFindFirstArgs<ExtArgs>>): Prisma__AmbienteClient<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ambiente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbienteFindFirstOrThrowArgs} args - Arguments to find a Ambiente
     * @example
     * // Get one Ambiente
     * const ambiente = await prisma.ambiente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AmbienteFindFirstOrThrowArgs>(args?: SelectSubset<T, AmbienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__AmbienteClient<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ambientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ambientes
     * const ambientes = await prisma.ambiente.findMany()
     * 
     * // Get first 10 Ambientes
     * const ambientes = await prisma.ambiente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ambienteWithIdOnly = await prisma.ambiente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AmbienteFindManyArgs>(args?: SelectSubset<T, AmbienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ambiente.
     * @param {AmbienteCreateArgs} args - Arguments to create a Ambiente.
     * @example
     * // Create one Ambiente
     * const Ambiente = await prisma.ambiente.create({
     *   data: {
     *     // ... data to create a Ambiente
     *   }
     * })
     * 
     */
    create<T extends AmbienteCreateArgs>(args: SelectSubset<T, AmbienteCreateArgs<ExtArgs>>): Prisma__AmbienteClient<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ambientes.
     * @param {AmbienteCreateManyArgs} args - Arguments to create many Ambientes.
     * @example
     * // Create many Ambientes
     * const ambiente = await prisma.ambiente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AmbienteCreateManyArgs>(args?: SelectSubset<T, AmbienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ambientes and returns the data saved in the database.
     * @param {AmbienteCreateManyAndReturnArgs} args - Arguments to create many Ambientes.
     * @example
     * // Create many Ambientes
     * const ambiente = await prisma.ambiente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ambientes and only return the `id`
     * const ambienteWithIdOnly = await prisma.ambiente.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AmbienteCreateManyAndReturnArgs>(args?: SelectSubset<T, AmbienteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ambiente.
     * @param {AmbienteDeleteArgs} args - Arguments to delete one Ambiente.
     * @example
     * // Delete one Ambiente
     * const Ambiente = await prisma.ambiente.delete({
     *   where: {
     *     // ... filter to delete one Ambiente
     *   }
     * })
     * 
     */
    delete<T extends AmbienteDeleteArgs>(args: SelectSubset<T, AmbienteDeleteArgs<ExtArgs>>): Prisma__AmbienteClient<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ambiente.
     * @param {AmbienteUpdateArgs} args - Arguments to update one Ambiente.
     * @example
     * // Update one Ambiente
     * const ambiente = await prisma.ambiente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AmbienteUpdateArgs>(args: SelectSubset<T, AmbienteUpdateArgs<ExtArgs>>): Prisma__AmbienteClient<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ambientes.
     * @param {AmbienteDeleteManyArgs} args - Arguments to filter Ambientes to delete.
     * @example
     * // Delete a few Ambientes
     * const { count } = await prisma.ambiente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AmbienteDeleteManyArgs>(args?: SelectSubset<T, AmbienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ambientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ambientes
     * const ambiente = await prisma.ambiente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AmbienteUpdateManyArgs>(args: SelectSubset<T, AmbienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ambientes and returns the data updated in the database.
     * @param {AmbienteUpdateManyAndReturnArgs} args - Arguments to update many Ambientes.
     * @example
     * // Update many Ambientes
     * const ambiente = await prisma.ambiente.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ambientes and only return the `id`
     * const ambienteWithIdOnly = await prisma.ambiente.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AmbienteUpdateManyAndReturnArgs>(args: SelectSubset<T, AmbienteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ambiente.
     * @param {AmbienteUpsertArgs} args - Arguments to update or create a Ambiente.
     * @example
     * // Update or create a Ambiente
     * const ambiente = await prisma.ambiente.upsert({
     *   create: {
     *     // ... data to create a Ambiente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ambiente we want to update
     *   }
     * })
     */
    upsert<T extends AmbienteUpsertArgs>(args: SelectSubset<T, AmbienteUpsertArgs<ExtArgs>>): Prisma__AmbienteClient<$Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ambientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbienteCountArgs} args - Arguments to filter Ambientes to count.
     * @example
     * // Count the number of Ambientes
     * const count = await prisma.ambiente.count({
     *   where: {
     *     // ... the filter for the Ambientes we want to count
     *   }
     * })
    **/
    count<T extends AmbienteCountArgs>(
      args?: Subset<T, AmbienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AmbienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ambiente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AmbienteAggregateArgs>(args: Subset<T, AmbienteAggregateArgs>): Prisma.PrismaPromise<GetAmbienteAggregateType<T>>

    /**
     * Group by Ambiente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AmbienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AmbienteGroupByArgs['orderBy'] }
        : { orderBy?: AmbienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AmbienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAmbienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ambiente model
   */
  readonly fields: AmbienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ambiente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AmbienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pais<T extends PaisDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaisDefaultArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    indicador<T extends IndicadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IndicadorDefaultArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ambiente model
   */
  interface AmbienteFieldRefs {
    readonly id: FieldRef<"Ambiente", 'Int'>
    readonly valor: FieldRef<"Ambiente", 'Float'>
    readonly ano: FieldRef<"Ambiente", 'Int'>
    readonly paisId: FieldRef<"Ambiente", 'String'>
    readonly indicadorId: FieldRef<"Ambiente", 'String'>
    readonly createdAt: FieldRef<"Ambiente", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Ambiente findUnique
   */
  export type AmbienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteInclude<ExtArgs> | null
    /**
     * Filter, which Ambiente to fetch.
     */
    where: AmbienteWhereUniqueInput
  }

  /**
   * Ambiente findUniqueOrThrow
   */
  export type AmbienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteInclude<ExtArgs> | null
    /**
     * Filter, which Ambiente to fetch.
     */
    where: AmbienteWhereUniqueInput
  }

  /**
   * Ambiente findFirst
   */
  export type AmbienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteInclude<ExtArgs> | null
    /**
     * Filter, which Ambiente to fetch.
     */
    where?: AmbienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ambientes to fetch.
     */
    orderBy?: AmbienteOrderByWithRelationInput | AmbienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ambientes.
     */
    cursor?: AmbienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ambientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ambientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ambientes.
     */
    distinct?: AmbienteScalarFieldEnum | AmbienteScalarFieldEnum[]
  }

  /**
   * Ambiente findFirstOrThrow
   */
  export type AmbienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteInclude<ExtArgs> | null
    /**
     * Filter, which Ambiente to fetch.
     */
    where?: AmbienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ambientes to fetch.
     */
    orderBy?: AmbienteOrderByWithRelationInput | AmbienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ambientes.
     */
    cursor?: AmbienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ambientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ambientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ambientes.
     */
    distinct?: AmbienteScalarFieldEnum | AmbienteScalarFieldEnum[]
  }

  /**
   * Ambiente findMany
   */
  export type AmbienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteInclude<ExtArgs> | null
    /**
     * Filter, which Ambientes to fetch.
     */
    where?: AmbienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ambientes to fetch.
     */
    orderBy?: AmbienteOrderByWithRelationInput | AmbienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ambientes.
     */
    cursor?: AmbienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ambientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ambientes.
     */
    skip?: number
    distinct?: AmbienteScalarFieldEnum | AmbienteScalarFieldEnum[]
  }

  /**
   * Ambiente create
   */
  export type AmbienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Ambiente.
     */
    data: XOR<AmbienteCreateInput, AmbienteUncheckedCreateInput>
  }

  /**
   * Ambiente createMany
   */
  export type AmbienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ambientes.
     */
    data: AmbienteCreateManyInput | AmbienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ambiente createManyAndReturn
   */
  export type AmbienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * The data used to create many Ambientes.
     */
    data: AmbienteCreateManyInput | AmbienteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ambiente update
   */
  export type AmbienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Ambiente.
     */
    data: XOR<AmbienteUpdateInput, AmbienteUncheckedUpdateInput>
    /**
     * Choose, which Ambiente to update.
     */
    where: AmbienteWhereUniqueInput
  }

  /**
   * Ambiente updateMany
   */
  export type AmbienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ambientes.
     */
    data: XOR<AmbienteUpdateManyMutationInput, AmbienteUncheckedUpdateManyInput>
    /**
     * Filter which Ambientes to update
     */
    where?: AmbienteWhereInput
    /**
     * Limit how many Ambientes to update.
     */
    limit?: number
  }

  /**
   * Ambiente updateManyAndReturn
   */
  export type AmbienteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * The data used to update Ambientes.
     */
    data: XOR<AmbienteUpdateManyMutationInput, AmbienteUncheckedUpdateManyInput>
    /**
     * Filter which Ambientes to update
     */
    where?: AmbienteWhereInput
    /**
     * Limit how many Ambientes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ambiente upsert
   */
  export type AmbienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Ambiente to update in case it exists.
     */
    where: AmbienteWhereUniqueInput
    /**
     * In case the Ambiente found by the `where` argument doesn't exist, create a new Ambiente with this data.
     */
    create: XOR<AmbienteCreateInput, AmbienteUncheckedCreateInput>
    /**
     * In case the Ambiente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AmbienteUpdateInput, AmbienteUncheckedUpdateInput>
  }

  /**
   * Ambiente delete
   */
  export type AmbienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteInclude<ExtArgs> | null
    /**
     * Filter which Ambiente to delete.
     */
    where: AmbienteWhereUniqueInput
  }

  /**
   * Ambiente deleteMany
   */
  export type AmbienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ambientes to delete
     */
    where?: AmbienteWhereInput
    /**
     * Limit how many Ambientes to delete.
     */
    limit?: number
  }

  /**
   * Ambiente without action
   */
  export type AmbienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambiente
     */
    select?: AmbienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambiente
     */
    omit?: AmbienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbienteInclude<ExtArgs> | null
  }


  /**
   * Model Tecnologia
   */

  export type AggregateTecnologia = {
    _count: TecnologiaCountAggregateOutputType | null
    _avg: TecnologiaAvgAggregateOutputType | null
    _sum: TecnologiaSumAggregateOutputType | null
    _min: TecnologiaMinAggregateOutputType | null
    _max: TecnologiaMaxAggregateOutputType | null
  }

  export type TecnologiaAvgAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
  }

  export type TecnologiaSumAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
  }

  export type TecnologiaMinAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
    paisId: string | null
    indicadorId: string | null
    createdAt: Date | null
  }

  export type TecnologiaMaxAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
    paisId: string | null
    indicadorId: string | null
    createdAt: Date | null
  }

  export type TecnologiaCountAggregateOutputType = {
    id: number
    valor: number
    ano: number
    paisId: number
    indicadorId: number
    createdAt: number
    _all: number
  }


  export type TecnologiaAvgAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
  }

  export type TecnologiaSumAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
  }

  export type TecnologiaMinAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
  }

  export type TecnologiaMaxAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
  }

  export type TecnologiaCountAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
    _all?: true
  }

  export type TecnologiaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tecnologia to aggregate.
     */
    where?: TecnologiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tecnologias to fetch.
     */
    orderBy?: TecnologiaOrderByWithRelationInput | TecnologiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TecnologiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tecnologias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tecnologias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tecnologias
    **/
    _count?: true | TecnologiaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TecnologiaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TecnologiaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TecnologiaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TecnologiaMaxAggregateInputType
  }

  export type GetTecnologiaAggregateType<T extends TecnologiaAggregateArgs> = {
        [P in keyof T & keyof AggregateTecnologia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTecnologia[P]>
      : GetScalarType<T[P], AggregateTecnologia[P]>
  }




  export type TecnologiaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TecnologiaWhereInput
    orderBy?: TecnologiaOrderByWithAggregationInput | TecnologiaOrderByWithAggregationInput[]
    by: TecnologiaScalarFieldEnum[] | TecnologiaScalarFieldEnum
    having?: TecnologiaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TecnologiaCountAggregateInputType | true
    _avg?: TecnologiaAvgAggregateInputType
    _sum?: TecnologiaSumAggregateInputType
    _min?: TecnologiaMinAggregateInputType
    _max?: TecnologiaMaxAggregateInputType
  }

  export type TecnologiaGroupByOutputType = {
    id: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt: Date
    _count: TecnologiaCountAggregateOutputType | null
    _avg: TecnologiaAvgAggregateOutputType | null
    _sum: TecnologiaSumAggregateOutputType | null
    _min: TecnologiaMinAggregateOutputType | null
    _max: TecnologiaMaxAggregateOutputType | null
  }

  type GetTecnologiaGroupByPayload<T extends TecnologiaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TecnologiaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TecnologiaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TecnologiaGroupByOutputType[P]>
            : GetScalarType<T[P], TecnologiaGroupByOutputType[P]>
        }
      >
    >


  export type TecnologiaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tecnologia"]>

  export type TecnologiaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tecnologia"]>

  export type TecnologiaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tecnologia"]>

  export type TecnologiaSelectScalar = {
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
  }

  export type TecnologiaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "valor" | "ano" | "paisId" | "indicadorId" | "createdAt", ExtArgs["result"]["tecnologia"]>
  export type TecnologiaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }
  export type TecnologiaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }
  export type TecnologiaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }

  export type $TecnologiaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tecnologia"
    objects: {
      pais: Prisma.$PaisPayload<ExtArgs>
      indicador: Prisma.$IndicadorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      valor: number
      ano: number
      paisId: string
      indicadorId: string
      createdAt: Date
    }, ExtArgs["result"]["tecnologia"]>
    composites: {}
  }

  type TecnologiaGetPayload<S extends boolean | null | undefined | TecnologiaDefaultArgs> = $Result.GetResult<Prisma.$TecnologiaPayload, S>

  type TecnologiaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TecnologiaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TecnologiaCountAggregateInputType | true
    }

  export interface TecnologiaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tecnologia'], meta: { name: 'Tecnologia' } }
    /**
     * Find zero or one Tecnologia that matches the filter.
     * @param {TecnologiaFindUniqueArgs} args - Arguments to find a Tecnologia
     * @example
     * // Get one Tecnologia
     * const tecnologia = await prisma.tecnologia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TecnologiaFindUniqueArgs>(args: SelectSubset<T, TecnologiaFindUniqueArgs<ExtArgs>>): Prisma__TecnologiaClient<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tecnologia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TecnologiaFindUniqueOrThrowArgs} args - Arguments to find a Tecnologia
     * @example
     * // Get one Tecnologia
     * const tecnologia = await prisma.tecnologia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TecnologiaFindUniqueOrThrowArgs>(args: SelectSubset<T, TecnologiaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TecnologiaClient<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tecnologia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnologiaFindFirstArgs} args - Arguments to find a Tecnologia
     * @example
     * // Get one Tecnologia
     * const tecnologia = await prisma.tecnologia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TecnologiaFindFirstArgs>(args?: SelectSubset<T, TecnologiaFindFirstArgs<ExtArgs>>): Prisma__TecnologiaClient<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tecnologia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnologiaFindFirstOrThrowArgs} args - Arguments to find a Tecnologia
     * @example
     * // Get one Tecnologia
     * const tecnologia = await prisma.tecnologia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TecnologiaFindFirstOrThrowArgs>(args?: SelectSubset<T, TecnologiaFindFirstOrThrowArgs<ExtArgs>>): Prisma__TecnologiaClient<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tecnologias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnologiaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tecnologias
     * const tecnologias = await prisma.tecnologia.findMany()
     * 
     * // Get first 10 Tecnologias
     * const tecnologias = await prisma.tecnologia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tecnologiaWithIdOnly = await prisma.tecnologia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TecnologiaFindManyArgs>(args?: SelectSubset<T, TecnologiaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tecnologia.
     * @param {TecnologiaCreateArgs} args - Arguments to create a Tecnologia.
     * @example
     * // Create one Tecnologia
     * const Tecnologia = await prisma.tecnologia.create({
     *   data: {
     *     // ... data to create a Tecnologia
     *   }
     * })
     * 
     */
    create<T extends TecnologiaCreateArgs>(args: SelectSubset<T, TecnologiaCreateArgs<ExtArgs>>): Prisma__TecnologiaClient<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tecnologias.
     * @param {TecnologiaCreateManyArgs} args - Arguments to create many Tecnologias.
     * @example
     * // Create many Tecnologias
     * const tecnologia = await prisma.tecnologia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TecnologiaCreateManyArgs>(args?: SelectSubset<T, TecnologiaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tecnologias and returns the data saved in the database.
     * @param {TecnologiaCreateManyAndReturnArgs} args - Arguments to create many Tecnologias.
     * @example
     * // Create many Tecnologias
     * const tecnologia = await prisma.tecnologia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tecnologias and only return the `id`
     * const tecnologiaWithIdOnly = await prisma.tecnologia.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TecnologiaCreateManyAndReturnArgs>(args?: SelectSubset<T, TecnologiaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tecnologia.
     * @param {TecnologiaDeleteArgs} args - Arguments to delete one Tecnologia.
     * @example
     * // Delete one Tecnologia
     * const Tecnologia = await prisma.tecnologia.delete({
     *   where: {
     *     // ... filter to delete one Tecnologia
     *   }
     * })
     * 
     */
    delete<T extends TecnologiaDeleteArgs>(args: SelectSubset<T, TecnologiaDeleteArgs<ExtArgs>>): Prisma__TecnologiaClient<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tecnologia.
     * @param {TecnologiaUpdateArgs} args - Arguments to update one Tecnologia.
     * @example
     * // Update one Tecnologia
     * const tecnologia = await prisma.tecnologia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TecnologiaUpdateArgs>(args: SelectSubset<T, TecnologiaUpdateArgs<ExtArgs>>): Prisma__TecnologiaClient<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tecnologias.
     * @param {TecnologiaDeleteManyArgs} args - Arguments to filter Tecnologias to delete.
     * @example
     * // Delete a few Tecnologias
     * const { count } = await prisma.tecnologia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TecnologiaDeleteManyArgs>(args?: SelectSubset<T, TecnologiaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tecnologias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnologiaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tecnologias
     * const tecnologia = await prisma.tecnologia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TecnologiaUpdateManyArgs>(args: SelectSubset<T, TecnologiaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tecnologias and returns the data updated in the database.
     * @param {TecnologiaUpdateManyAndReturnArgs} args - Arguments to update many Tecnologias.
     * @example
     * // Update many Tecnologias
     * const tecnologia = await prisma.tecnologia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tecnologias and only return the `id`
     * const tecnologiaWithIdOnly = await prisma.tecnologia.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TecnologiaUpdateManyAndReturnArgs>(args: SelectSubset<T, TecnologiaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tecnologia.
     * @param {TecnologiaUpsertArgs} args - Arguments to update or create a Tecnologia.
     * @example
     * // Update or create a Tecnologia
     * const tecnologia = await prisma.tecnologia.upsert({
     *   create: {
     *     // ... data to create a Tecnologia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tecnologia we want to update
     *   }
     * })
     */
    upsert<T extends TecnologiaUpsertArgs>(args: SelectSubset<T, TecnologiaUpsertArgs<ExtArgs>>): Prisma__TecnologiaClient<$Result.GetResult<Prisma.$TecnologiaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tecnologias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnologiaCountArgs} args - Arguments to filter Tecnologias to count.
     * @example
     * // Count the number of Tecnologias
     * const count = await prisma.tecnologia.count({
     *   where: {
     *     // ... the filter for the Tecnologias we want to count
     *   }
     * })
    **/
    count<T extends TecnologiaCountArgs>(
      args?: Subset<T, TecnologiaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TecnologiaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tecnologia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnologiaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TecnologiaAggregateArgs>(args: Subset<T, TecnologiaAggregateArgs>): Prisma.PrismaPromise<GetTecnologiaAggregateType<T>>

    /**
     * Group by Tecnologia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TecnologiaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TecnologiaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TecnologiaGroupByArgs['orderBy'] }
        : { orderBy?: TecnologiaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TecnologiaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTecnologiaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tecnologia model
   */
  readonly fields: TecnologiaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tecnologia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TecnologiaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pais<T extends PaisDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaisDefaultArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    indicador<T extends IndicadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IndicadorDefaultArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tecnologia model
   */
  interface TecnologiaFieldRefs {
    readonly id: FieldRef<"Tecnologia", 'Int'>
    readonly valor: FieldRef<"Tecnologia", 'Float'>
    readonly ano: FieldRef<"Tecnologia", 'Int'>
    readonly paisId: FieldRef<"Tecnologia", 'String'>
    readonly indicadorId: FieldRef<"Tecnologia", 'String'>
    readonly createdAt: FieldRef<"Tecnologia", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tecnologia findUnique
   */
  export type TecnologiaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaInclude<ExtArgs> | null
    /**
     * Filter, which Tecnologia to fetch.
     */
    where: TecnologiaWhereUniqueInput
  }

  /**
   * Tecnologia findUniqueOrThrow
   */
  export type TecnologiaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaInclude<ExtArgs> | null
    /**
     * Filter, which Tecnologia to fetch.
     */
    where: TecnologiaWhereUniqueInput
  }

  /**
   * Tecnologia findFirst
   */
  export type TecnologiaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaInclude<ExtArgs> | null
    /**
     * Filter, which Tecnologia to fetch.
     */
    where?: TecnologiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tecnologias to fetch.
     */
    orderBy?: TecnologiaOrderByWithRelationInput | TecnologiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tecnologias.
     */
    cursor?: TecnologiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tecnologias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tecnologias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tecnologias.
     */
    distinct?: TecnologiaScalarFieldEnum | TecnologiaScalarFieldEnum[]
  }

  /**
   * Tecnologia findFirstOrThrow
   */
  export type TecnologiaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaInclude<ExtArgs> | null
    /**
     * Filter, which Tecnologia to fetch.
     */
    where?: TecnologiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tecnologias to fetch.
     */
    orderBy?: TecnologiaOrderByWithRelationInput | TecnologiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tecnologias.
     */
    cursor?: TecnologiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tecnologias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tecnologias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tecnologias.
     */
    distinct?: TecnologiaScalarFieldEnum | TecnologiaScalarFieldEnum[]
  }

  /**
   * Tecnologia findMany
   */
  export type TecnologiaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaInclude<ExtArgs> | null
    /**
     * Filter, which Tecnologias to fetch.
     */
    where?: TecnologiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tecnologias to fetch.
     */
    orderBy?: TecnologiaOrderByWithRelationInput | TecnologiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tecnologias.
     */
    cursor?: TecnologiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tecnologias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tecnologias.
     */
    skip?: number
    distinct?: TecnologiaScalarFieldEnum | TecnologiaScalarFieldEnum[]
  }

  /**
   * Tecnologia create
   */
  export type TecnologiaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaInclude<ExtArgs> | null
    /**
     * The data needed to create a Tecnologia.
     */
    data: XOR<TecnologiaCreateInput, TecnologiaUncheckedCreateInput>
  }

  /**
   * Tecnologia createMany
   */
  export type TecnologiaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tecnologias.
     */
    data: TecnologiaCreateManyInput | TecnologiaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tecnologia createManyAndReturn
   */
  export type TecnologiaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * The data used to create many Tecnologias.
     */
    data: TecnologiaCreateManyInput | TecnologiaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tecnologia update
   */
  export type TecnologiaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaInclude<ExtArgs> | null
    /**
     * The data needed to update a Tecnologia.
     */
    data: XOR<TecnologiaUpdateInput, TecnologiaUncheckedUpdateInput>
    /**
     * Choose, which Tecnologia to update.
     */
    where: TecnologiaWhereUniqueInput
  }

  /**
   * Tecnologia updateMany
   */
  export type TecnologiaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tecnologias.
     */
    data: XOR<TecnologiaUpdateManyMutationInput, TecnologiaUncheckedUpdateManyInput>
    /**
     * Filter which Tecnologias to update
     */
    where?: TecnologiaWhereInput
    /**
     * Limit how many Tecnologias to update.
     */
    limit?: number
  }

  /**
   * Tecnologia updateManyAndReturn
   */
  export type TecnologiaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * The data used to update Tecnologias.
     */
    data: XOR<TecnologiaUpdateManyMutationInput, TecnologiaUncheckedUpdateManyInput>
    /**
     * Filter which Tecnologias to update
     */
    where?: TecnologiaWhereInput
    /**
     * Limit how many Tecnologias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tecnologia upsert
   */
  export type TecnologiaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaInclude<ExtArgs> | null
    /**
     * The filter to search for the Tecnologia to update in case it exists.
     */
    where: TecnologiaWhereUniqueInput
    /**
     * In case the Tecnologia found by the `where` argument doesn't exist, create a new Tecnologia with this data.
     */
    create: XOR<TecnologiaCreateInput, TecnologiaUncheckedCreateInput>
    /**
     * In case the Tecnologia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TecnologiaUpdateInput, TecnologiaUncheckedUpdateInput>
  }

  /**
   * Tecnologia delete
   */
  export type TecnologiaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaInclude<ExtArgs> | null
    /**
     * Filter which Tecnologia to delete.
     */
    where: TecnologiaWhereUniqueInput
  }

  /**
   * Tecnologia deleteMany
   */
  export type TecnologiaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tecnologias to delete
     */
    where?: TecnologiaWhereInput
    /**
     * Limit how many Tecnologias to delete.
     */
    limit?: number
  }

  /**
   * Tecnologia without action
   */
  export type TecnologiaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tecnologia
     */
    select?: TecnologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tecnologia
     */
    omit?: TecnologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TecnologiaInclude<ExtArgs> | null
  }


  /**
   * Model Demografia
   */

  export type AggregateDemografia = {
    _count: DemografiaCountAggregateOutputType | null
    _avg: DemografiaAvgAggregateOutputType | null
    _sum: DemografiaSumAggregateOutputType | null
    _min: DemografiaMinAggregateOutputType | null
    _max: DemografiaMaxAggregateOutputType | null
  }

  export type DemografiaAvgAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
  }

  export type DemografiaSumAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
  }

  export type DemografiaMinAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
    paisId: string | null
    indicadorId: string | null
    createdAt: Date | null
  }

  export type DemografiaMaxAggregateOutputType = {
    id: number | null
    valor: number | null
    ano: number | null
    paisId: string | null
    indicadorId: string | null
    createdAt: Date | null
  }

  export type DemografiaCountAggregateOutputType = {
    id: number
    valor: number
    ano: number
    paisId: number
    indicadorId: number
    createdAt: number
    _all: number
  }


  export type DemografiaAvgAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
  }

  export type DemografiaSumAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
  }

  export type DemografiaMinAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
  }

  export type DemografiaMaxAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
  }

  export type DemografiaCountAggregateInputType = {
    id?: true
    valor?: true
    ano?: true
    paisId?: true
    indicadorId?: true
    createdAt?: true
    _all?: true
  }

  export type DemografiaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Demografia to aggregate.
     */
    where?: DemografiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demografias to fetch.
     */
    orderBy?: DemografiaOrderByWithRelationInput | DemografiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DemografiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demografias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demografias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Demografias
    **/
    _count?: true | DemografiaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DemografiaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DemografiaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DemografiaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DemografiaMaxAggregateInputType
  }

  export type GetDemografiaAggregateType<T extends DemografiaAggregateArgs> = {
        [P in keyof T & keyof AggregateDemografia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDemografia[P]>
      : GetScalarType<T[P], AggregateDemografia[P]>
  }




  export type DemografiaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemografiaWhereInput
    orderBy?: DemografiaOrderByWithAggregationInput | DemografiaOrderByWithAggregationInput[]
    by: DemografiaScalarFieldEnum[] | DemografiaScalarFieldEnum
    having?: DemografiaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DemografiaCountAggregateInputType | true
    _avg?: DemografiaAvgAggregateInputType
    _sum?: DemografiaSumAggregateInputType
    _min?: DemografiaMinAggregateInputType
    _max?: DemografiaMaxAggregateInputType
  }

  export type DemografiaGroupByOutputType = {
    id: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt: Date
    _count: DemografiaCountAggregateOutputType | null
    _avg: DemografiaAvgAggregateOutputType | null
    _sum: DemografiaSumAggregateOutputType | null
    _min: DemografiaMinAggregateOutputType | null
    _max: DemografiaMaxAggregateOutputType | null
  }

  type GetDemografiaGroupByPayload<T extends DemografiaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DemografiaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DemografiaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DemografiaGroupByOutputType[P]>
            : GetScalarType<T[P], DemografiaGroupByOutputType[P]>
        }
      >
    >


  export type DemografiaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["demografia"]>

  export type DemografiaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["demografia"]>

  export type DemografiaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["demografia"]>

  export type DemografiaSelectScalar = {
    id?: boolean
    valor?: boolean
    ano?: boolean
    paisId?: boolean
    indicadorId?: boolean
    createdAt?: boolean
  }

  export type DemografiaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "valor" | "ano" | "paisId" | "indicadorId" | "createdAt", ExtArgs["result"]["demografia"]>
  export type DemografiaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }
  export type DemografiaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }
  export type DemografiaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pais?: boolean | PaisDefaultArgs<ExtArgs>
    indicador?: boolean | IndicadorDefaultArgs<ExtArgs>
  }

  export type $DemografiaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Demografia"
    objects: {
      pais: Prisma.$PaisPayload<ExtArgs>
      indicador: Prisma.$IndicadorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      valor: number
      ano: number
      paisId: string
      indicadorId: string
      createdAt: Date
    }, ExtArgs["result"]["demografia"]>
    composites: {}
  }

  type DemografiaGetPayload<S extends boolean | null | undefined | DemografiaDefaultArgs> = $Result.GetResult<Prisma.$DemografiaPayload, S>

  type DemografiaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DemografiaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DemografiaCountAggregateInputType | true
    }

  export interface DemografiaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Demografia'], meta: { name: 'Demografia' } }
    /**
     * Find zero or one Demografia that matches the filter.
     * @param {DemografiaFindUniqueArgs} args - Arguments to find a Demografia
     * @example
     * // Get one Demografia
     * const demografia = await prisma.demografia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DemografiaFindUniqueArgs>(args: SelectSubset<T, DemografiaFindUniqueArgs<ExtArgs>>): Prisma__DemografiaClient<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Demografia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DemografiaFindUniqueOrThrowArgs} args - Arguments to find a Demografia
     * @example
     * // Get one Demografia
     * const demografia = await prisma.demografia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DemografiaFindUniqueOrThrowArgs>(args: SelectSubset<T, DemografiaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DemografiaClient<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Demografia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemografiaFindFirstArgs} args - Arguments to find a Demografia
     * @example
     * // Get one Demografia
     * const demografia = await prisma.demografia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DemografiaFindFirstArgs>(args?: SelectSubset<T, DemografiaFindFirstArgs<ExtArgs>>): Prisma__DemografiaClient<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Demografia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemografiaFindFirstOrThrowArgs} args - Arguments to find a Demografia
     * @example
     * // Get one Demografia
     * const demografia = await prisma.demografia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DemografiaFindFirstOrThrowArgs>(args?: SelectSubset<T, DemografiaFindFirstOrThrowArgs<ExtArgs>>): Prisma__DemografiaClient<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Demografias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemografiaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Demografias
     * const demografias = await prisma.demografia.findMany()
     * 
     * // Get first 10 Demografias
     * const demografias = await prisma.demografia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const demografiaWithIdOnly = await prisma.demografia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DemografiaFindManyArgs>(args?: SelectSubset<T, DemografiaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Demografia.
     * @param {DemografiaCreateArgs} args - Arguments to create a Demografia.
     * @example
     * // Create one Demografia
     * const Demografia = await prisma.demografia.create({
     *   data: {
     *     // ... data to create a Demografia
     *   }
     * })
     * 
     */
    create<T extends DemografiaCreateArgs>(args: SelectSubset<T, DemografiaCreateArgs<ExtArgs>>): Prisma__DemografiaClient<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Demografias.
     * @param {DemografiaCreateManyArgs} args - Arguments to create many Demografias.
     * @example
     * // Create many Demografias
     * const demografia = await prisma.demografia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DemografiaCreateManyArgs>(args?: SelectSubset<T, DemografiaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Demografias and returns the data saved in the database.
     * @param {DemografiaCreateManyAndReturnArgs} args - Arguments to create many Demografias.
     * @example
     * // Create many Demografias
     * const demografia = await prisma.demografia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Demografias and only return the `id`
     * const demografiaWithIdOnly = await prisma.demografia.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DemografiaCreateManyAndReturnArgs>(args?: SelectSubset<T, DemografiaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Demografia.
     * @param {DemografiaDeleteArgs} args - Arguments to delete one Demografia.
     * @example
     * // Delete one Demografia
     * const Demografia = await prisma.demografia.delete({
     *   where: {
     *     // ... filter to delete one Demografia
     *   }
     * })
     * 
     */
    delete<T extends DemografiaDeleteArgs>(args: SelectSubset<T, DemografiaDeleteArgs<ExtArgs>>): Prisma__DemografiaClient<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Demografia.
     * @param {DemografiaUpdateArgs} args - Arguments to update one Demografia.
     * @example
     * // Update one Demografia
     * const demografia = await prisma.demografia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DemografiaUpdateArgs>(args: SelectSubset<T, DemografiaUpdateArgs<ExtArgs>>): Prisma__DemografiaClient<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Demografias.
     * @param {DemografiaDeleteManyArgs} args - Arguments to filter Demografias to delete.
     * @example
     * // Delete a few Demografias
     * const { count } = await prisma.demografia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DemografiaDeleteManyArgs>(args?: SelectSubset<T, DemografiaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Demografias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemografiaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Demografias
     * const demografia = await prisma.demografia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DemografiaUpdateManyArgs>(args: SelectSubset<T, DemografiaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Demografias and returns the data updated in the database.
     * @param {DemografiaUpdateManyAndReturnArgs} args - Arguments to update many Demografias.
     * @example
     * // Update many Demografias
     * const demografia = await prisma.demografia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Demografias and only return the `id`
     * const demografiaWithIdOnly = await prisma.demografia.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DemografiaUpdateManyAndReturnArgs>(args: SelectSubset<T, DemografiaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Demografia.
     * @param {DemografiaUpsertArgs} args - Arguments to update or create a Demografia.
     * @example
     * // Update or create a Demografia
     * const demografia = await prisma.demografia.upsert({
     *   create: {
     *     // ... data to create a Demografia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Demografia we want to update
     *   }
     * })
     */
    upsert<T extends DemografiaUpsertArgs>(args: SelectSubset<T, DemografiaUpsertArgs<ExtArgs>>): Prisma__DemografiaClient<$Result.GetResult<Prisma.$DemografiaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Demografias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemografiaCountArgs} args - Arguments to filter Demografias to count.
     * @example
     * // Count the number of Demografias
     * const count = await prisma.demografia.count({
     *   where: {
     *     // ... the filter for the Demografias we want to count
     *   }
     * })
    **/
    count<T extends DemografiaCountArgs>(
      args?: Subset<T, DemografiaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DemografiaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Demografia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemografiaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DemografiaAggregateArgs>(args: Subset<T, DemografiaAggregateArgs>): Prisma.PrismaPromise<GetDemografiaAggregateType<T>>

    /**
     * Group by Demografia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemografiaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DemografiaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DemografiaGroupByArgs['orderBy'] }
        : { orderBy?: DemografiaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DemografiaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDemografiaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Demografia model
   */
  readonly fields: DemografiaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Demografia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DemografiaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pais<T extends PaisDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaisDefaultArgs<ExtArgs>>): Prisma__PaisClient<$Result.GetResult<Prisma.$PaisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    indicador<T extends IndicadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IndicadorDefaultArgs<ExtArgs>>): Prisma__IndicadorClient<$Result.GetResult<Prisma.$IndicadorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Demografia model
   */
  interface DemografiaFieldRefs {
    readonly id: FieldRef<"Demografia", 'Int'>
    readonly valor: FieldRef<"Demografia", 'Float'>
    readonly ano: FieldRef<"Demografia", 'Int'>
    readonly paisId: FieldRef<"Demografia", 'String'>
    readonly indicadorId: FieldRef<"Demografia", 'String'>
    readonly createdAt: FieldRef<"Demografia", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Demografia findUnique
   */
  export type DemografiaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaInclude<ExtArgs> | null
    /**
     * Filter, which Demografia to fetch.
     */
    where: DemografiaWhereUniqueInput
  }

  /**
   * Demografia findUniqueOrThrow
   */
  export type DemografiaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaInclude<ExtArgs> | null
    /**
     * Filter, which Demografia to fetch.
     */
    where: DemografiaWhereUniqueInput
  }

  /**
   * Demografia findFirst
   */
  export type DemografiaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaInclude<ExtArgs> | null
    /**
     * Filter, which Demografia to fetch.
     */
    where?: DemografiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demografias to fetch.
     */
    orderBy?: DemografiaOrderByWithRelationInput | DemografiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Demografias.
     */
    cursor?: DemografiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demografias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demografias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Demografias.
     */
    distinct?: DemografiaScalarFieldEnum | DemografiaScalarFieldEnum[]
  }

  /**
   * Demografia findFirstOrThrow
   */
  export type DemografiaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaInclude<ExtArgs> | null
    /**
     * Filter, which Demografia to fetch.
     */
    where?: DemografiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demografias to fetch.
     */
    orderBy?: DemografiaOrderByWithRelationInput | DemografiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Demografias.
     */
    cursor?: DemografiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demografias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demografias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Demografias.
     */
    distinct?: DemografiaScalarFieldEnum | DemografiaScalarFieldEnum[]
  }

  /**
   * Demografia findMany
   */
  export type DemografiaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaInclude<ExtArgs> | null
    /**
     * Filter, which Demografias to fetch.
     */
    where?: DemografiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demografias to fetch.
     */
    orderBy?: DemografiaOrderByWithRelationInput | DemografiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Demografias.
     */
    cursor?: DemografiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demografias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demografias.
     */
    skip?: number
    distinct?: DemografiaScalarFieldEnum | DemografiaScalarFieldEnum[]
  }

  /**
   * Demografia create
   */
  export type DemografiaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaInclude<ExtArgs> | null
    /**
     * The data needed to create a Demografia.
     */
    data: XOR<DemografiaCreateInput, DemografiaUncheckedCreateInput>
  }

  /**
   * Demografia createMany
   */
  export type DemografiaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Demografias.
     */
    data: DemografiaCreateManyInput | DemografiaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Demografia createManyAndReturn
   */
  export type DemografiaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * The data used to create many Demografias.
     */
    data: DemografiaCreateManyInput | DemografiaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Demografia update
   */
  export type DemografiaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaInclude<ExtArgs> | null
    /**
     * The data needed to update a Demografia.
     */
    data: XOR<DemografiaUpdateInput, DemografiaUncheckedUpdateInput>
    /**
     * Choose, which Demografia to update.
     */
    where: DemografiaWhereUniqueInput
  }

  /**
   * Demografia updateMany
   */
  export type DemografiaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Demografias.
     */
    data: XOR<DemografiaUpdateManyMutationInput, DemografiaUncheckedUpdateManyInput>
    /**
     * Filter which Demografias to update
     */
    where?: DemografiaWhereInput
    /**
     * Limit how many Demografias to update.
     */
    limit?: number
  }

  /**
   * Demografia updateManyAndReturn
   */
  export type DemografiaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * The data used to update Demografias.
     */
    data: XOR<DemografiaUpdateManyMutationInput, DemografiaUncheckedUpdateManyInput>
    /**
     * Filter which Demografias to update
     */
    where?: DemografiaWhereInput
    /**
     * Limit how many Demografias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Demografia upsert
   */
  export type DemografiaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaInclude<ExtArgs> | null
    /**
     * The filter to search for the Demografia to update in case it exists.
     */
    where: DemografiaWhereUniqueInput
    /**
     * In case the Demografia found by the `where` argument doesn't exist, create a new Demografia with this data.
     */
    create: XOR<DemografiaCreateInput, DemografiaUncheckedCreateInput>
    /**
     * In case the Demografia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DemografiaUpdateInput, DemografiaUncheckedUpdateInput>
  }

  /**
   * Demografia delete
   */
  export type DemografiaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaInclude<ExtArgs> | null
    /**
     * Filter which Demografia to delete.
     */
    where: DemografiaWhereUniqueInput
  }

  /**
   * Demografia deleteMany
   */
  export type DemografiaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Demografias to delete
     */
    where?: DemografiaWhereInput
    /**
     * Limit how many Demografias to delete.
     */
    limit?: number
  }

  /**
   * Demografia without action
   */
  export type DemografiaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demografia
     */
    select?: DemografiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Demografia
     */
    omit?: DemografiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DemografiaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PaisScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    iso3: 'iso3',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaisScalarFieldEnum = (typeof PaisScalarFieldEnum)[keyof typeof PaisScalarFieldEnum]


  export const IndicadorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    categoria: 'categoria'
  };

  export type IndicadorScalarFieldEnum = (typeof IndicadorScalarFieldEnum)[keyof typeof IndicadorScalarFieldEnum]


  export const SaudeScalarFieldEnum: {
    id: 'id',
    valor: 'valor',
    ano: 'ano',
    paisId: 'paisId',
    indicadorId: 'indicadorId',
    createdAt: 'createdAt'
  };

  export type SaudeScalarFieldEnum = (typeof SaudeScalarFieldEnum)[keyof typeof SaudeScalarFieldEnum]


  export const EconomiaScalarFieldEnum: {
    id: 'id',
    valor: 'valor',
    ano: 'ano',
    paisId: 'paisId',
    indicadorId: 'indicadorId',
    createdAt: 'createdAt'
  };

  export type EconomiaScalarFieldEnum = (typeof EconomiaScalarFieldEnum)[keyof typeof EconomiaScalarFieldEnum]


  export const AmbienteScalarFieldEnum: {
    id: 'id',
    valor: 'valor',
    ano: 'ano',
    paisId: 'paisId',
    indicadorId: 'indicadorId',
    createdAt: 'createdAt'
  };

  export type AmbienteScalarFieldEnum = (typeof AmbienteScalarFieldEnum)[keyof typeof AmbienteScalarFieldEnum]


  export const TecnologiaScalarFieldEnum: {
    id: 'id',
    valor: 'valor',
    ano: 'ano',
    paisId: 'paisId',
    indicadorId: 'indicadorId',
    createdAt: 'createdAt'
  };

  export type TecnologiaScalarFieldEnum = (typeof TecnologiaScalarFieldEnum)[keyof typeof TecnologiaScalarFieldEnum]


  export const DemografiaScalarFieldEnum: {
    id: 'id',
    valor: 'valor',
    ano: 'ano',
    paisId: 'paisId',
    indicadorId: 'indicadorId',
    createdAt: 'createdAt'
  };

  export type DemografiaScalarFieldEnum = (typeof DemografiaScalarFieldEnum)[keyof typeof DemografiaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const PaisOrderByRelevanceFieldEnum: {
    id: 'id',
    nome: 'nome',
    iso3: 'iso3'
  };

  export type PaisOrderByRelevanceFieldEnum = (typeof PaisOrderByRelevanceFieldEnum)[keyof typeof PaisOrderByRelevanceFieldEnum]


  export const IndicadorOrderByRelevanceFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type IndicadorOrderByRelevanceFieldEnum = (typeof IndicadorOrderByRelevanceFieldEnum)[keyof typeof IndicadorOrderByRelevanceFieldEnum]


  export const SaudeOrderByRelevanceFieldEnum: {
    paisId: 'paisId',
    indicadorId: 'indicadorId'
  };

  export type SaudeOrderByRelevanceFieldEnum = (typeof SaudeOrderByRelevanceFieldEnum)[keyof typeof SaudeOrderByRelevanceFieldEnum]


  export const EconomiaOrderByRelevanceFieldEnum: {
    paisId: 'paisId',
    indicadorId: 'indicadorId'
  };

  export type EconomiaOrderByRelevanceFieldEnum = (typeof EconomiaOrderByRelevanceFieldEnum)[keyof typeof EconomiaOrderByRelevanceFieldEnum]


  export const AmbienteOrderByRelevanceFieldEnum: {
    paisId: 'paisId',
    indicadorId: 'indicadorId'
  };

  export type AmbienteOrderByRelevanceFieldEnum = (typeof AmbienteOrderByRelevanceFieldEnum)[keyof typeof AmbienteOrderByRelevanceFieldEnum]


  export const TecnologiaOrderByRelevanceFieldEnum: {
    paisId: 'paisId',
    indicadorId: 'indicadorId'
  };

  export type TecnologiaOrderByRelevanceFieldEnum = (typeof TecnologiaOrderByRelevanceFieldEnum)[keyof typeof TecnologiaOrderByRelevanceFieldEnum]


  export const DemografiaOrderByRelevanceFieldEnum: {
    paisId: 'paisId',
    indicadorId: 'indicadorId'
  };

  export type DemografiaOrderByRelevanceFieldEnum = (typeof DemografiaOrderByRelevanceFieldEnum)[keyof typeof DemografiaOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Categoria'
   */
  export type EnumCategoriaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Categoria'>
    


  /**
   * Reference to a field of type 'Categoria[]'
   */
  export type ListEnumCategoriaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Categoria[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PaisWhereInput = {
    AND?: PaisWhereInput | PaisWhereInput[]
    OR?: PaisWhereInput[]
    NOT?: PaisWhereInput | PaisWhereInput[]
    id?: StringFilter<"Pais"> | string
    nome?: StringFilter<"Pais"> | string
    iso3?: StringFilter<"Pais"> | string
    createdAt?: DateTimeFilter<"Pais"> | Date | string
    updatedAt?: DateTimeFilter<"Pais"> | Date | string
    saude?: SaudeListRelationFilter
    economia?: EconomiaListRelationFilter
    ambiente?: AmbienteListRelationFilter
    tecnologia?: TecnologiaListRelationFilter
    demografia?: DemografiaListRelationFilter
  }

  export type PaisOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    iso3?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    saude?: SaudeOrderByRelationAggregateInput
    economia?: EconomiaOrderByRelationAggregateInput
    ambiente?: AmbienteOrderByRelationAggregateInput
    tecnologia?: TecnologiaOrderByRelationAggregateInput
    demografia?: DemografiaOrderByRelationAggregateInput
    _relevance?: PaisOrderByRelevanceInput
  }

  export type PaisWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    iso3?: string
    AND?: PaisWhereInput | PaisWhereInput[]
    OR?: PaisWhereInput[]
    NOT?: PaisWhereInput | PaisWhereInput[]
    nome?: StringFilter<"Pais"> | string
    createdAt?: DateTimeFilter<"Pais"> | Date | string
    updatedAt?: DateTimeFilter<"Pais"> | Date | string
    saude?: SaudeListRelationFilter
    economia?: EconomiaListRelationFilter
    ambiente?: AmbienteListRelationFilter
    tecnologia?: TecnologiaListRelationFilter
    demografia?: DemografiaListRelationFilter
  }, "id" | "iso3">

  export type PaisOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    iso3?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaisCountOrderByAggregateInput
    _max?: PaisMaxOrderByAggregateInput
    _min?: PaisMinOrderByAggregateInput
  }

  export type PaisScalarWhereWithAggregatesInput = {
    AND?: PaisScalarWhereWithAggregatesInput | PaisScalarWhereWithAggregatesInput[]
    OR?: PaisScalarWhereWithAggregatesInput[]
    NOT?: PaisScalarWhereWithAggregatesInput | PaisScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Pais"> | string
    nome?: StringWithAggregatesFilter<"Pais"> | string
    iso3?: StringWithAggregatesFilter<"Pais"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Pais"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Pais"> | Date | string
  }

  export type IndicadorWhereInput = {
    AND?: IndicadorWhereInput | IndicadorWhereInput[]
    OR?: IndicadorWhereInput[]
    NOT?: IndicadorWhereInput | IndicadorWhereInput[]
    id?: StringFilter<"Indicador"> | string
    nome?: StringFilter<"Indicador"> | string
    categoria?: EnumCategoriaFilter<"Indicador"> | $Enums.Categoria
    saude?: SaudeListRelationFilter
    economia?: EconomiaListRelationFilter
    ambiente?: AmbienteListRelationFilter
    tecnologia?: TecnologiaListRelationFilter
    demografia?: DemografiaListRelationFilter
  }

  export type IndicadorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    saude?: SaudeOrderByRelationAggregateInput
    economia?: EconomiaOrderByRelationAggregateInput
    ambiente?: AmbienteOrderByRelationAggregateInput
    tecnologia?: TecnologiaOrderByRelationAggregateInput
    demografia?: DemografiaOrderByRelationAggregateInput
    _relevance?: IndicadorOrderByRelevanceInput
  }

  export type IndicadorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IndicadorWhereInput | IndicadorWhereInput[]
    OR?: IndicadorWhereInput[]
    NOT?: IndicadorWhereInput | IndicadorWhereInput[]
    nome?: StringFilter<"Indicador"> | string
    categoria?: EnumCategoriaFilter<"Indicador"> | $Enums.Categoria
    saude?: SaudeListRelationFilter
    economia?: EconomiaListRelationFilter
    ambiente?: AmbienteListRelationFilter
    tecnologia?: TecnologiaListRelationFilter
    demografia?: DemografiaListRelationFilter
  }, "id">

  export type IndicadorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
    _count?: IndicadorCountOrderByAggregateInput
    _max?: IndicadorMaxOrderByAggregateInput
    _min?: IndicadorMinOrderByAggregateInput
  }

  export type IndicadorScalarWhereWithAggregatesInput = {
    AND?: IndicadorScalarWhereWithAggregatesInput | IndicadorScalarWhereWithAggregatesInput[]
    OR?: IndicadorScalarWhereWithAggregatesInput[]
    NOT?: IndicadorScalarWhereWithAggregatesInput | IndicadorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Indicador"> | string
    nome?: StringWithAggregatesFilter<"Indicador"> | string
    categoria?: EnumCategoriaWithAggregatesFilter<"Indicador"> | $Enums.Categoria
  }

  export type SaudeWhereInput = {
    AND?: SaudeWhereInput | SaudeWhereInput[]
    OR?: SaudeWhereInput[]
    NOT?: SaudeWhereInput | SaudeWhereInput[]
    id?: IntFilter<"Saude"> | number
    valor?: FloatFilter<"Saude"> | number
    ano?: IntFilter<"Saude"> | number
    paisId?: StringFilter<"Saude"> | string
    indicadorId?: StringFilter<"Saude"> | string
    createdAt?: DateTimeFilter<"Saude"> | Date | string
    pais?: XOR<PaisScalarRelationFilter, PaisWhereInput>
    indicador?: XOR<IndicadorScalarRelationFilter, IndicadorWhereInput>
  }

  export type SaudeOrderByWithRelationInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
    pais?: PaisOrderByWithRelationInput
    indicador?: IndicadorOrderByWithRelationInput
    _relevance?: SaudeOrderByRelevanceInput
  }

  export type SaudeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    paisId_indicadorId_ano?: SaudePaisIdIndicadorIdAnoCompoundUniqueInput
    AND?: SaudeWhereInput | SaudeWhereInput[]
    OR?: SaudeWhereInput[]
    NOT?: SaudeWhereInput | SaudeWhereInput[]
    valor?: FloatFilter<"Saude"> | number
    ano?: IntFilter<"Saude"> | number
    paisId?: StringFilter<"Saude"> | string
    indicadorId?: StringFilter<"Saude"> | string
    createdAt?: DateTimeFilter<"Saude"> | Date | string
    pais?: XOR<PaisScalarRelationFilter, PaisWhereInput>
    indicador?: XOR<IndicadorScalarRelationFilter, IndicadorWhereInput>
  }, "id" | "paisId_indicadorId_ano">

  export type SaudeOrderByWithAggregationInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
    _count?: SaudeCountOrderByAggregateInput
    _avg?: SaudeAvgOrderByAggregateInput
    _max?: SaudeMaxOrderByAggregateInput
    _min?: SaudeMinOrderByAggregateInput
    _sum?: SaudeSumOrderByAggregateInput
  }

  export type SaudeScalarWhereWithAggregatesInput = {
    AND?: SaudeScalarWhereWithAggregatesInput | SaudeScalarWhereWithAggregatesInput[]
    OR?: SaudeScalarWhereWithAggregatesInput[]
    NOT?: SaudeScalarWhereWithAggregatesInput | SaudeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Saude"> | number
    valor?: FloatWithAggregatesFilter<"Saude"> | number
    ano?: IntWithAggregatesFilter<"Saude"> | number
    paisId?: StringWithAggregatesFilter<"Saude"> | string
    indicadorId?: StringWithAggregatesFilter<"Saude"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Saude"> | Date | string
  }

  export type EconomiaWhereInput = {
    AND?: EconomiaWhereInput | EconomiaWhereInput[]
    OR?: EconomiaWhereInput[]
    NOT?: EconomiaWhereInput | EconomiaWhereInput[]
    id?: IntFilter<"Economia"> | number
    valor?: FloatFilter<"Economia"> | number
    ano?: IntFilter<"Economia"> | number
    paisId?: StringFilter<"Economia"> | string
    indicadorId?: StringFilter<"Economia"> | string
    createdAt?: DateTimeFilter<"Economia"> | Date | string
    pais?: XOR<PaisScalarRelationFilter, PaisWhereInput>
    indicador?: XOR<IndicadorScalarRelationFilter, IndicadorWhereInput>
  }

  export type EconomiaOrderByWithRelationInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
    pais?: PaisOrderByWithRelationInput
    indicador?: IndicadorOrderByWithRelationInput
    _relevance?: EconomiaOrderByRelevanceInput
  }

  export type EconomiaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    paisId_indicadorId_ano?: EconomiaPaisIdIndicadorIdAnoCompoundUniqueInput
    AND?: EconomiaWhereInput | EconomiaWhereInput[]
    OR?: EconomiaWhereInput[]
    NOT?: EconomiaWhereInput | EconomiaWhereInput[]
    valor?: FloatFilter<"Economia"> | number
    ano?: IntFilter<"Economia"> | number
    paisId?: StringFilter<"Economia"> | string
    indicadorId?: StringFilter<"Economia"> | string
    createdAt?: DateTimeFilter<"Economia"> | Date | string
    pais?: XOR<PaisScalarRelationFilter, PaisWhereInput>
    indicador?: XOR<IndicadorScalarRelationFilter, IndicadorWhereInput>
  }, "id" | "paisId_indicadorId_ano">

  export type EconomiaOrderByWithAggregationInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
    _count?: EconomiaCountOrderByAggregateInput
    _avg?: EconomiaAvgOrderByAggregateInput
    _max?: EconomiaMaxOrderByAggregateInput
    _min?: EconomiaMinOrderByAggregateInput
    _sum?: EconomiaSumOrderByAggregateInput
  }

  export type EconomiaScalarWhereWithAggregatesInput = {
    AND?: EconomiaScalarWhereWithAggregatesInput | EconomiaScalarWhereWithAggregatesInput[]
    OR?: EconomiaScalarWhereWithAggregatesInput[]
    NOT?: EconomiaScalarWhereWithAggregatesInput | EconomiaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Economia"> | number
    valor?: FloatWithAggregatesFilter<"Economia"> | number
    ano?: IntWithAggregatesFilter<"Economia"> | number
    paisId?: StringWithAggregatesFilter<"Economia"> | string
    indicadorId?: StringWithAggregatesFilter<"Economia"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Economia"> | Date | string
  }

  export type AmbienteWhereInput = {
    AND?: AmbienteWhereInput | AmbienteWhereInput[]
    OR?: AmbienteWhereInput[]
    NOT?: AmbienteWhereInput | AmbienteWhereInput[]
    id?: IntFilter<"Ambiente"> | number
    valor?: FloatFilter<"Ambiente"> | number
    ano?: IntFilter<"Ambiente"> | number
    paisId?: StringFilter<"Ambiente"> | string
    indicadorId?: StringFilter<"Ambiente"> | string
    createdAt?: DateTimeFilter<"Ambiente"> | Date | string
    pais?: XOR<PaisScalarRelationFilter, PaisWhereInput>
    indicador?: XOR<IndicadorScalarRelationFilter, IndicadorWhereInput>
  }

  export type AmbienteOrderByWithRelationInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
    pais?: PaisOrderByWithRelationInput
    indicador?: IndicadorOrderByWithRelationInput
    _relevance?: AmbienteOrderByRelevanceInput
  }

  export type AmbienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    paisId_indicadorId_ano?: AmbientePaisIdIndicadorIdAnoCompoundUniqueInput
    AND?: AmbienteWhereInput | AmbienteWhereInput[]
    OR?: AmbienteWhereInput[]
    NOT?: AmbienteWhereInput | AmbienteWhereInput[]
    valor?: FloatFilter<"Ambiente"> | number
    ano?: IntFilter<"Ambiente"> | number
    paisId?: StringFilter<"Ambiente"> | string
    indicadorId?: StringFilter<"Ambiente"> | string
    createdAt?: DateTimeFilter<"Ambiente"> | Date | string
    pais?: XOR<PaisScalarRelationFilter, PaisWhereInput>
    indicador?: XOR<IndicadorScalarRelationFilter, IndicadorWhereInput>
  }, "id" | "paisId_indicadorId_ano">

  export type AmbienteOrderByWithAggregationInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
    _count?: AmbienteCountOrderByAggregateInput
    _avg?: AmbienteAvgOrderByAggregateInput
    _max?: AmbienteMaxOrderByAggregateInput
    _min?: AmbienteMinOrderByAggregateInput
    _sum?: AmbienteSumOrderByAggregateInput
  }

  export type AmbienteScalarWhereWithAggregatesInput = {
    AND?: AmbienteScalarWhereWithAggregatesInput | AmbienteScalarWhereWithAggregatesInput[]
    OR?: AmbienteScalarWhereWithAggregatesInput[]
    NOT?: AmbienteScalarWhereWithAggregatesInput | AmbienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ambiente"> | number
    valor?: FloatWithAggregatesFilter<"Ambiente"> | number
    ano?: IntWithAggregatesFilter<"Ambiente"> | number
    paisId?: StringWithAggregatesFilter<"Ambiente"> | string
    indicadorId?: StringWithAggregatesFilter<"Ambiente"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Ambiente"> | Date | string
  }

  export type TecnologiaWhereInput = {
    AND?: TecnologiaWhereInput | TecnologiaWhereInput[]
    OR?: TecnologiaWhereInput[]
    NOT?: TecnologiaWhereInput | TecnologiaWhereInput[]
    id?: IntFilter<"Tecnologia"> | number
    valor?: FloatFilter<"Tecnologia"> | number
    ano?: IntFilter<"Tecnologia"> | number
    paisId?: StringFilter<"Tecnologia"> | string
    indicadorId?: StringFilter<"Tecnologia"> | string
    createdAt?: DateTimeFilter<"Tecnologia"> | Date | string
    pais?: XOR<PaisScalarRelationFilter, PaisWhereInput>
    indicador?: XOR<IndicadorScalarRelationFilter, IndicadorWhereInput>
  }

  export type TecnologiaOrderByWithRelationInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
    pais?: PaisOrderByWithRelationInput
    indicador?: IndicadorOrderByWithRelationInput
    _relevance?: TecnologiaOrderByRelevanceInput
  }

  export type TecnologiaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    paisId_indicadorId_ano?: TecnologiaPaisIdIndicadorIdAnoCompoundUniqueInput
    AND?: TecnologiaWhereInput | TecnologiaWhereInput[]
    OR?: TecnologiaWhereInput[]
    NOT?: TecnologiaWhereInput | TecnologiaWhereInput[]
    valor?: FloatFilter<"Tecnologia"> | number
    ano?: IntFilter<"Tecnologia"> | number
    paisId?: StringFilter<"Tecnologia"> | string
    indicadorId?: StringFilter<"Tecnologia"> | string
    createdAt?: DateTimeFilter<"Tecnologia"> | Date | string
    pais?: XOR<PaisScalarRelationFilter, PaisWhereInput>
    indicador?: XOR<IndicadorScalarRelationFilter, IndicadorWhereInput>
  }, "id" | "paisId_indicadorId_ano">

  export type TecnologiaOrderByWithAggregationInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
    _count?: TecnologiaCountOrderByAggregateInput
    _avg?: TecnologiaAvgOrderByAggregateInput
    _max?: TecnologiaMaxOrderByAggregateInput
    _min?: TecnologiaMinOrderByAggregateInput
    _sum?: TecnologiaSumOrderByAggregateInput
  }

  export type TecnologiaScalarWhereWithAggregatesInput = {
    AND?: TecnologiaScalarWhereWithAggregatesInput | TecnologiaScalarWhereWithAggregatesInput[]
    OR?: TecnologiaScalarWhereWithAggregatesInput[]
    NOT?: TecnologiaScalarWhereWithAggregatesInput | TecnologiaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tecnologia"> | number
    valor?: FloatWithAggregatesFilter<"Tecnologia"> | number
    ano?: IntWithAggregatesFilter<"Tecnologia"> | number
    paisId?: StringWithAggregatesFilter<"Tecnologia"> | string
    indicadorId?: StringWithAggregatesFilter<"Tecnologia"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tecnologia"> | Date | string
  }

  export type DemografiaWhereInput = {
    AND?: DemografiaWhereInput | DemografiaWhereInput[]
    OR?: DemografiaWhereInput[]
    NOT?: DemografiaWhereInput | DemografiaWhereInput[]
    id?: IntFilter<"Demografia"> | number
    valor?: FloatFilter<"Demografia"> | number
    ano?: IntFilter<"Demografia"> | number
    paisId?: StringFilter<"Demografia"> | string
    indicadorId?: StringFilter<"Demografia"> | string
    createdAt?: DateTimeFilter<"Demografia"> | Date | string
    pais?: XOR<PaisScalarRelationFilter, PaisWhereInput>
    indicador?: XOR<IndicadorScalarRelationFilter, IndicadorWhereInput>
  }

  export type DemografiaOrderByWithRelationInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
    pais?: PaisOrderByWithRelationInput
    indicador?: IndicadorOrderByWithRelationInput
    _relevance?: DemografiaOrderByRelevanceInput
  }

  export type DemografiaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    paisId_indicadorId_ano?: DemografiaPaisIdIndicadorIdAnoCompoundUniqueInput
    AND?: DemografiaWhereInput | DemografiaWhereInput[]
    OR?: DemografiaWhereInput[]
    NOT?: DemografiaWhereInput | DemografiaWhereInput[]
    valor?: FloatFilter<"Demografia"> | number
    ano?: IntFilter<"Demografia"> | number
    paisId?: StringFilter<"Demografia"> | string
    indicadorId?: StringFilter<"Demografia"> | string
    createdAt?: DateTimeFilter<"Demografia"> | Date | string
    pais?: XOR<PaisScalarRelationFilter, PaisWhereInput>
    indicador?: XOR<IndicadorScalarRelationFilter, IndicadorWhereInput>
  }, "id" | "paisId_indicadorId_ano">

  export type DemografiaOrderByWithAggregationInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
    _count?: DemografiaCountOrderByAggregateInput
    _avg?: DemografiaAvgOrderByAggregateInput
    _max?: DemografiaMaxOrderByAggregateInput
    _min?: DemografiaMinOrderByAggregateInput
    _sum?: DemografiaSumOrderByAggregateInput
  }

  export type DemografiaScalarWhereWithAggregatesInput = {
    AND?: DemografiaScalarWhereWithAggregatesInput | DemografiaScalarWhereWithAggregatesInput[]
    OR?: DemografiaScalarWhereWithAggregatesInput[]
    NOT?: DemografiaScalarWhereWithAggregatesInput | DemografiaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Demografia"> | number
    valor?: FloatWithAggregatesFilter<"Demografia"> | number
    ano?: IntWithAggregatesFilter<"Demografia"> | number
    paisId?: StringWithAggregatesFilter<"Demografia"> | string
    indicadorId?: StringWithAggregatesFilter<"Demografia"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Demografia"> | Date | string
  }

  export type PaisCreateInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
    saude?: SaudeCreateNestedManyWithoutPaisInput
    economia?: EconomiaCreateNestedManyWithoutPaisInput
    ambiente?: AmbienteCreateNestedManyWithoutPaisInput
    tecnologia?: TecnologiaCreateNestedManyWithoutPaisInput
    demografia?: DemografiaCreateNestedManyWithoutPaisInput
  }

  export type PaisUncheckedCreateInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
    saude?: SaudeUncheckedCreateNestedManyWithoutPaisInput
    economia?: EconomiaUncheckedCreateNestedManyWithoutPaisInput
    ambiente?: AmbienteUncheckedCreateNestedManyWithoutPaisInput
    tecnologia?: TecnologiaUncheckedCreateNestedManyWithoutPaisInput
    demografia?: DemografiaUncheckedCreateNestedManyWithoutPaisInput
  }

  export type PaisUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saude?: SaudeUpdateManyWithoutPaisNestedInput
    economia?: EconomiaUpdateManyWithoutPaisNestedInput
    ambiente?: AmbienteUpdateManyWithoutPaisNestedInput
    tecnologia?: TecnologiaUpdateManyWithoutPaisNestedInput
    demografia?: DemografiaUpdateManyWithoutPaisNestedInput
  }

  export type PaisUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saude?: SaudeUncheckedUpdateManyWithoutPaisNestedInput
    economia?: EconomiaUncheckedUpdateManyWithoutPaisNestedInput
    ambiente?: AmbienteUncheckedUpdateManyWithoutPaisNestedInput
    tecnologia?: TecnologiaUncheckedUpdateManyWithoutPaisNestedInput
    demografia?: DemografiaUncheckedUpdateManyWithoutPaisNestedInput
  }

  export type PaisCreateManyInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaisUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaisUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndicadorCreateInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    saude?: SaudeCreateNestedManyWithoutIndicadorInput
    economia?: EconomiaCreateNestedManyWithoutIndicadorInput
    ambiente?: AmbienteCreateNestedManyWithoutIndicadorInput
    tecnologia?: TecnologiaCreateNestedManyWithoutIndicadorInput
    demografia?: DemografiaCreateNestedManyWithoutIndicadorInput
  }

  export type IndicadorUncheckedCreateInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    saude?: SaudeUncheckedCreateNestedManyWithoutIndicadorInput
    economia?: EconomiaUncheckedCreateNestedManyWithoutIndicadorInput
    ambiente?: AmbienteUncheckedCreateNestedManyWithoutIndicadorInput
    tecnologia?: TecnologiaUncheckedCreateNestedManyWithoutIndicadorInput
    demografia?: DemografiaUncheckedCreateNestedManyWithoutIndicadorInput
  }

  export type IndicadorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
    saude?: SaudeUpdateManyWithoutIndicadorNestedInput
    economia?: EconomiaUpdateManyWithoutIndicadorNestedInput
    ambiente?: AmbienteUpdateManyWithoutIndicadorNestedInput
    tecnologia?: TecnologiaUpdateManyWithoutIndicadorNestedInput
    demografia?: DemografiaUpdateManyWithoutIndicadorNestedInput
  }

  export type IndicadorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
    saude?: SaudeUncheckedUpdateManyWithoutIndicadorNestedInput
    economia?: EconomiaUncheckedUpdateManyWithoutIndicadorNestedInput
    ambiente?: AmbienteUncheckedUpdateManyWithoutIndicadorNestedInput
    tecnologia?: TecnologiaUncheckedUpdateManyWithoutIndicadorNestedInput
    demografia?: DemografiaUncheckedUpdateManyWithoutIndicadorNestedInput
  }

  export type IndicadorCreateManyInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
  }

  export type IndicadorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
  }

  export type IndicadorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
  }

  export type SaudeCreateInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    pais: PaisCreateNestedOneWithoutSaudeInput
    indicador: IndicadorCreateNestedOneWithoutSaudeInput
  }

  export type SaudeUncheckedCreateInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt?: Date | string
  }

  export type SaudeUpdateInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pais?: PaisUpdateOneRequiredWithoutSaudeNestedInput
    indicador?: IndicadorUpdateOneRequiredWithoutSaudeNestedInput
  }

  export type SaudeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaudeCreateManyInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt?: Date | string
  }

  export type SaudeUpdateManyMutationInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaudeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EconomiaCreateInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    pais: PaisCreateNestedOneWithoutEconomiaInput
    indicador: IndicadorCreateNestedOneWithoutEconomiaInput
  }

  export type EconomiaUncheckedCreateInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt?: Date | string
  }

  export type EconomiaUpdateInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pais?: PaisUpdateOneRequiredWithoutEconomiaNestedInput
    indicador?: IndicadorUpdateOneRequiredWithoutEconomiaNestedInput
  }

  export type EconomiaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EconomiaCreateManyInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt?: Date | string
  }

  export type EconomiaUpdateManyMutationInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EconomiaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbienteCreateInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    pais: PaisCreateNestedOneWithoutAmbienteInput
    indicador: IndicadorCreateNestedOneWithoutAmbienteInput
  }

  export type AmbienteUncheckedCreateInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt?: Date | string
  }

  export type AmbienteUpdateInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pais?: PaisUpdateOneRequiredWithoutAmbienteNestedInput
    indicador?: IndicadorUpdateOneRequiredWithoutAmbienteNestedInput
  }

  export type AmbienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbienteCreateManyInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt?: Date | string
  }

  export type AmbienteUpdateManyMutationInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TecnologiaCreateInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    pais: PaisCreateNestedOneWithoutTecnologiaInput
    indicador: IndicadorCreateNestedOneWithoutTecnologiaInput
  }

  export type TecnologiaUncheckedCreateInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt?: Date | string
  }

  export type TecnologiaUpdateInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pais?: PaisUpdateOneRequiredWithoutTecnologiaNestedInput
    indicador?: IndicadorUpdateOneRequiredWithoutTecnologiaNestedInput
  }

  export type TecnologiaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TecnologiaCreateManyInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt?: Date | string
  }

  export type TecnologiaUpdateManyMutationInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TecnologiaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemografiaCreateInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    pais: PaisCreateNestedOneWithoutDemografiaInput
    indicador: IndicadorCreateNestedOneWithoutDemografiaInput
  }

  export type DemografiaUncheckedCreateInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt?: Date | string
  }

  export type DemografiaUpdateInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pais?: PaisUpdateOneRequiredWithoutDemografiaNestedInput
    indicador?: IndicadorUpdateOneRequiredWithoutDemografiaNestedInput
  }

  export type DemografiaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemografiaCreateManyInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    indicadorId: string
    createdAt?: Date | string
  }

  export type DemografiaUpdateManyMutationInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemografiaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SaudeListRelationFilter = {
    every?: SaudeWhereInput
    some?: SaudeWhereInput
    none?: SaudeWhereInput
  }

  export type EconomiaListRelationFilter = {
    every?: EconomiaWhereInput
    some?: EconomiaWhereInput
    none?: EconomiaWhereInput
  }

  export type AmbienteListRelationFilter = {
    every?: AmbienteWhereInput
    some?: AmbienteWhereInput
    none?: AmbienteWhereInput
  }

  export type TecnologiaListRelationFilter = {
    every?: TecnologiaWhereInput
    some?: TecnologiaWhereInput
    none?: TecnologiaWhereInput
  }

  export type DemografiaListRelationFilter = {
    every?: DemografiaWhereInput
    some?: DemografiaWhereInput
    none?: DemografiaWhereInput
  }

  export type SaudeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EconomiaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AmbienteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TecnologiaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DemografiaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaisOrderByRelevanceInput = {
    fields: PaisOrderByRelevanceFieldEnum | PaisOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PaisCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    iso3?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaisMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    iso3?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaisMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    iso3?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumCategoriaFilter<$PrismaModel = never> = {
    equals?: $Enums.Categoria | EnumCategoriaFieldRefInput<$PrismaModel>
    in?: $Enums.Categoria[] | ListEnumCategoriaFieldRefInput<$PrismaModel>
    notIn?: $Enums.Categoria[] | ListEnumCategoriaFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoriaFilter<$PrismaModel> | $Enums.Categoria
  }

  export type IndicadorOrderByRelevanceInput = {
    fields: IndicadorOrderByRelevanceFieldEnum | IndicadorOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type IndicadorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
  }

  export type IndicadorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
  }

  export type IndicadorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    categoria?: SortOrder
  }

  export type EnumCategoriaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Categoria | EnumCategoriaFieldRefInput<$PrismaModel>
    in?: $Enums.Categoria[] | ListEnumCategoriaFieldRefInput<$PrismaModel>
    notIn?: $Enums.Categoria[] | ListEnumCategoriaFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoriaWithAggregatesFilter<$PrismaModel> | $Enums.Categoria
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoriaFilter<$PrismaModel>
    _max?: NestedEnumCategoriaFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PaisScalarRelationFilter = {
    is?: PaisWhereInput
    isNot?: PaisWhereInput
  }

  export type IndicadorScalarRelationFilter = {
    is?: IndicadorWhereInput
    isNot?: IndicadorWhereInput
  }

  export type SaudeOrderByRelevanceInput = {
    fields: SaudeOrderByRelevanceFieldEnum | SaudeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SaudePaisIdIndicadorIdAnoCompoundUniqueInput = {
    paisId: string
    indicadorId: string
    ano: number
  }

  export type SaudeCountOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type SaudeAvgOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
  }

  export type SaudeMaxOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type SaudeMinOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type SaudeSumOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EconomiaOrderByRelevanceInput = {
    fields: EconomiaOrderByRelevanceFieldEnum | EconomiaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EconomiaPaisIdIndicadorIdAnoCompoundUniqueInput = {
    paisId: string
    indicadorId: string
    ano: number
  }

  export type EconomiaCountOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type EconomiaAvgOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
  }

  export type EconomiaMaxOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type EconomiaMinOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type EconomiaSumOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
  }

  export type AmbienteOrderByRelevanceInput = {
    fields: AmbienteOrderByRelevanceFieldEnum | AmbienteOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AmbientePaisIdIndicadorIdAnoCompoundUniqueInput = {
    paisId: string
    indicadorId: string
    ano: number
  }

  export type AmbienteCountOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type AmbienteAvgOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
  }

  export type AmbienteMaxOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type AmbienteMinOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type AmbienteSumOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
  }

  export type TecnologiaOrderByRelevanceInput = {
    fields: TecnologiaOrderByRelevanceFieldEnum | TecnologiaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TecnologiaPaisIdIndicadorIdAnoCompoundUniqueInput = {
    paisId: string
    indicadorId: string
    ano: number
  }

  export type TecnologiaCountOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type TecnologiaAvgOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
  }

  export type TecnologiaMaxOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type TecnologiaMinOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type TecnologiaSumOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
  }

  export type DemografiaOrderByRelevanceInput = {
    fields: DemografiaOrderByRelevanceFieldEnum | DemografiaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DemografiaPaisIdIndicadorIdAnoCompoundUniqueInput = {
    paisId: string
    indicadorId: string
    ano: number
  }

  export type DemografiaCountOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type DemografiaAvgOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
  }

  export type DemografiaMaxOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type DemografiaMinOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
    paisId?: SortOrder
    indicadorId?: SortOrder
    createdAt?: SortOrder
  }

  export type DemografiaSumOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    ano?: SortOrder
  }

  export type SaudeCreateNestedManyWithoutPaisInput = {
    create?: XOR<SaudeCreateWithoutPaisInput, SaudeUncheckedCreateWithoutPaisInput> | SaudeCreateWithoutPaisInput[] | SaudeUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: SaudeCreateOrConnectWithoutPaisInput | SaudeCreateOrConnectWithoutPaisInput[]
    createMany?: SaudeCreateManyPaisInputEnvelope
    connect?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
  }

  export type EconomiaCreateNestedManyWithoutPaisInput = {
    create?: XOR<EconomiaCreateWithoutPaisInput, EconomiaUncheckedCreateWithoutPaisInput> | EconomiaCreateWithoutPaisInput[] | EconomiaUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: EconomiaCreateOrConnectWithoutPaisInput | EconomiaCreateOrConnectWithoutPaisInput[]
    createMany?: EconomiaCreateManyPaisInputEnvelope
    connect?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
  }

  export type AmbienteCreateNestedManyWithoutPaisInput = {
    create?: XOR<AmbienteCreateWithoutPaisInput, AmbienteUncheckedCreateWithoutPaisInput> | AmbienteCreateWithoutPaisInput[] | AmbienteUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: AmbienteCreateOrConnectWithoutPaisInput | AmbienteCreateOrConnectWithoutPaisInput[]
    createMany?: AmbienteCreateManyPaisInputEnvelope
    connect?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
  }

  export type TecnologiaCreateNestedManyWithoutPaisInput = {
    create?: XOR<TecnologiaCreateWithoutPaisInput, TecnologiaUncheckedCreateWithoutPaisInput> | TecnologiaCreateWithoutPaisInput[] | TecnologiaUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: TecnologiaCreateOrConnectWithoutPaisInput | TecnologiaCreateOrConnectWithoutPaisInput[]
    createMany?: TecnologiaCreateManyPaisInputEnvelope
    connect?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
  }

  export type DemografiaCreateNestedManyWithoutPaisInput = {
    create?: XOR<DemografiaCreateWithoutPaisInput, DemografiaUncheckedCreateWithoutPaisInput> | DemografiaCreateWithoutPaisInput[] | DemografiaUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: DemografiaCreateOrConnectWithoutPaisInput | DemografiaCreateOrConnectWithoutPaisInput[]
    createMany?: DemografiaCreateManyPaisInputEnvelope
    connect?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
  }

  export type SaudeUncheckedCreateNestedManyWithoutPaisInput = {
    create?: XOR<SaudeCreateWithoutPaisInput, SaudeUncheckedCreateWithoutPaisInput> | SaudeCreateWithoutPaisInput[] | SaudeUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: SaudeCreateOrConnectWithoutPaisInput | SaudeCreateOrConnectWithoutPaisInput[]
    createMany?: SaudeCreateManyPaisInputEnvelope
    connect?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
  }

  export type EconomiaUncheckedCreateNestedManyWithoutPaisInput = {
    create?: XOR<EconomiaCreateWithoutPaisInput, EconomiaUncheckedCreateWithoutPaisInput> | EconomiaCreateWithoutPaisInput[] | EconomiaUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: EconomiaCreateOrConnectWithoutPaisInput | EconomiaCreateOrConnectWithoutPaisInput[]
    createMany?: EconomiaCreateManyPaisInputEnvelope
    connect?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
  }

  export type AmbienteUncheckedCreateNestedManyWithoutPaisInput = {
    create?: XOR<AmbienteCreateWithoutPaisInput, AmbienteUncheckedCreateWithoutPaisInput> | AmbienteCreateWithoutPaisInput[] | AmbienteUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: AmbienteCreateOrConnectWithoutPaisInput | AmbienteCreateOrConnectWithoutPaisInput[]
    createMany?: AmbienteCreateManyPaisInputEnvelope
    connect?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
  }

  export type TecnologiaUncheckedCreateNestedManyWithoutPaisInput = {
    create?: XOR<TecnologiaCreateWithoutPaisInput, TecnologiaUncheckedCreateWithoutPaisInput> | TecnologiaCreateWithoutPaisInput[] | TecnologiaUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: TecnologiaCreateOrConnectWithoutPaisInput | TecnologiaCreateOrConnectWithoutPaisInput[]
    createMany?: TecnologiaCreateManyPaisInputEnvelope
    connect?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
  }

  export type DemografiaUncheckedCreateNestedManyWithoutPaisInput = {
    create?: XOR<DemografiaCreateWithoutPaisInput, DemografiaUncheckedCreateWithoutPaisInput> | DemografiaCreateWithoutPaisInput[] | DemografiaUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: DemografiaCreateOrConnectWithoutPaisInput | DemografiaCreateOrConnectWithoutPaisInput[]
    createMany?: DemografiaCreateManyPaisInputEnvelope
    connect?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SaudeUpdateManyWithoutPaisNestedInput = {
    create?: XOR<SaudeCreateWithoutPaisInput, SaudeUncheckedCreateWithoutPaisInput> | SaudeCreateWithoutPaisInput[] | SaudeUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: SaudeCreateOrConnectWithoutPaisInput | SaudeCreateOrConnectWithoutPaisInput[]
    upsert?: SaudeUpsertWithWhereUniqueWithoutPaisInput | SaudeUpsertWithWhereUniqueWithoutPaisInput[]
    createMany?: SaudeCreateManyPaisInputEnvelope
    set?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    disconnect?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    delete?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    connect?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    update?: SaudeUpdateWithWhereUniqueWithoutPaisInput | SaudeUpdateWithWhereUniqueWithoutPaisInput[]
    updateMany?: SaudeUpdateManyWithWhereWithoutPaisInput | SaudeUpdateManyWithWhereWithoutPaisInput[]
    deleteMany?: SaudeScalarWhereInput | SaudeScalarWhereInput[]
  }

  export type EconomiaUpdateManyWithoutPaisNestedInput = {
    create?: XOR<EconomiaCreateWithoutPaisInput, EconomiaUncheckedCreateWithoutPaisInput> | EconomiaCreateWithoutPaisInput[] | EconomiaUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: EconomiaCreateOrConnectWithoutPaisInput | EconomiaCreateOrConnectWithoutPaisInput[]
    upsert?: EconomiaUpsertWithWhereUniqueWithoutPaisInput | EconomiaUpsertWithWhereUniqueWithoutPaisInput[]
    createMany?: EconomiaCreateManyPaisInputEnvelope
    set?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    disconnect?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    delete?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    connect?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    update?: EconomiaUpdateWithWhereUniqueWithoutPaisInput | EconomiaUpdateWithWhereUniqueWithoutPaisInput[]
    updateMany?: EconomiaUpdateManyWithWhereWithoutPaisInput | EconomiaUpdateManyWithWhereWithoutPaisInput[]
    deleteMany?: EconomiaScalarWhereInput | EconomiaScalarWhereInput[]
  }

  export type AmbienteUpdateManyWithoutPaisNestedInput = {
    create?: XOR<AmbienteCreateWithoutPaisInput, AmbienteUncheckedCreateWithoutPaisInput> | AmbienteCreateWithoutPaisInput[] | AmbienteUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: AmbienteCreateOrConnectWithoutPaisInput | AmbienteCreateOrConnectWithoutPaisInput[]
    upsert?: AmbienteUpsertWithWhereUniqueWithoutPaisInput | AmbienteUpsertWithWhereUniqueWithoutPaisInput[]
    createMany?: AmbienteCreateManyPaisInputEnvelope
    set?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    disconnect?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    delete?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    connect?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    update?: AmbienteUpdateWithWhereUniqueWithoutPaisInput | AmbienteUpdateWithWhereUniqueWithoutPaisInput[]
    updateMany?: AmbienteUpdateManyWithWhereWithoutPaisInput | AmbienteUpdateManyWithWhereWithoutPaisInput[]
    deleteMany?: AmbienteScalarWhereInput | AmbienteScalarWhereInput[]
  }

  export type TecnologiaUpdateManyWithoutPaisNestedInput = {
    create?: XOR<TecnologiaCreateWithoutPaisInput, TecnologiaUncheckedCreateWithoutPaisInput> | TecnologiaCreateWithoutPaisInput[] | TecnologiaUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: TecnologiaCreateOrConnectWithoutPaisInput | TecnologiaCreateOrConnectWithoutPaisInput[]
    upsert?: TecnologiaUpsertWithWhereUniqueWithoutPaisInput | TecnologiaUpsertWithWhereUniqueWithoutPaisInput[]
    createMany?: TecnologiaCreateManyPaisInputEnvelope
    set?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    disconnect?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    delete?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    connect?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    update?: TecnologiaUpdateWithWhereUniqueWithoutPaisInput | TecnologiaUpdateWithWhereUniqueWithoutPaisInput[]
    updateMany?: TecnologiaUpdateManyWithWhereWithoutPaisInput | TecnologiaUpdateManyWithWhereWithoutPaisInput[]
    deleteMany?: TecnologiaScalarWhereInput | TecnologiaScalarWhereInput[]
  }

  export type DemografiaUpdateManyWithoutPaisNestedInput = {
    create?: XOR<DemografiaCreateWithoutPaisInput, DemografiaUncheckedCreateWithoutPaisInput> | DemografiaCreateWithoutPaisInput[] | DemografiaUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: DemografiaCreateOrConnectWithoutPaisInput | DemografiaCreateOrConnectWithoutPaisInput[]
    upsert?: DemografiaUpsertWithWhereUniqueWithoutPaisInput | DemografiaUpsertWithWhereUniqueWithoutPaisInput[]
    createMany?: DemografiaCreateManyPaisInputEnvelope
    set?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    disconnect?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    delete?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    connect?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    update?: DemografiaUpdateWithWhereUniqueWithoutPaisInput | DemografiaUpdateWithWhereUniqueWithoutPaisInput[]
    updateMany?: DemografiaUpdateManyWithWhereWithoutPaisInput | DemografiaUpdateManyWithWhereWithoutPaisInput[]
    deleteMany?: DemografiaScalarWhereInput | DemografiaScalarWhereInput[]
  }

  export type SaudeUncheckedUpdateManyWithoutPaisNestedInput = {
    create?: XOR<SaudeCreateWithoutPaisInput, SaudeUncheckedCreateWithoutPaisInput> | SaudeCreateWithoutPaisInput[] | SaudeUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: SaudeCreateOrConnectWithoutPaisInput | SaudeCreateOrConnectWithoutPaisInput[]
    upsert?: SaudeUpsertWithWhereUniqueWithoutPaisInput | SaudeUpsertWithWhereUniqueWithoutPaisInput[]
    createMany?: SaudeCreateManyPaisInputEnvelope
    set?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    disconnect?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    delete?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    connect?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    update?: SaudeUpdateWithWhereUniqueWithoutPaisInput | SaudeUpdateWithWhereUniqueWithoutPaisInput[]
    updateMany?: SaudeUpdateManyWithWhereWithoutPaisInput | SaudeUpdateManyWithWhereWithoutPaisInput[]
    deleteMany?: SaudeScalarWhereInput | SaudeScalarWhereInput[]
  }

  export type EconomiaUncheckedUpdateManyWithoutPaisNestedInput = {
    create?: XOR<EconomiaCreateWithoutPaisInput, EconomiaUncheckedCreateWithoutPaisInput> | EconomiaCreateWithoutPaisInput[] | EconomiaUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: EconomiaCreateOrConnectWithoutPaisInput | EconomiaCreateOrConnectWithoutPaisInput[]
    upsert?: EconomiaUpsertWithWhereUniqueWithoutPaisInput | EconomiaUpsertWithWhereUniqueWithoutPaisInput[]
    createMany?: EconomiaCreateManyPaisInputEnvelope
    set?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    disconnect?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    delete?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    connect?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    update?: EconomiaUpdateWithWhereUniqueWithoutPaisInput | EconomiaUpdateWithWhereUniqueWithoutPaisInput[]
    updateMany?: EconomiaUpdateManyWithWhereWithoutPaisInput | EconomiaUpdateManyWithWhereWithoutPaisInput[]
    deleteMany?: EconomiaScalarWhereInput | EconomiaScalarWhereInput[]
  }

  export type AmbienteUncheckedUpdateManyWithoutPaisNestedInput = {
    create?: XOR<AmbienteCreateWithoutPaisInput, AmbienteUncheckedCreateWithoutPaisInput> | AmbienteCreateWithoutPaisInput[] | AmbienteUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: AmbienteCreateOrConnectWithoutPaisInput | AmbienteCreateOrConnectWithoutPaisInput[]
    upsert?: AmbienteUpsertWithWhereUniqueWithoutPaisInput | AmbienteUpsertWithWhereUniqueWithoutPaisInput[]
    createMany?: AmbienteCreateManyPaisInputEnvelope
    set?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    disconnect?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    delete?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    connect?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    update?: AmbienteUpdateWithWhereUniqueWithoutPaisInput | AmbienteUpdateWithWhereUniqueWithoutPaisInput[]
    updateMany?: AmbienteUpdateManyWithWhereWithoutPaisInput | AmbienteUpdateManyWithWhereWithoutPaisInput[]
    deleteMany?: AmbienteScalarWhereInput | AmbienteScalarWhereInput[]
  }

  export type TecnologiaUncheckedUpdateManyWithoutPaisNestedInput = {
    create?: XOR<TecnologiaCreateWithoutPaisInput, TecnologiaUncheckedCreateWithoutPaisInput> | TecnologiaCreateWithoutPaisInput[] | TecnologiaUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: TecnologiaCreateOrConnectWithoutPaisInput | TecnologiaCreateOrConnectWithoutPaisInput[]
    upsert?: TecnologiaUpsertWithWhereUniqueWithoutPaisInput | TecnologiaUpsertWithWhereUniqueWithoutPaisInput[]
    createMany?: TecnologiaCreateManyPaisInputEnvelope
    set?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    disconnect?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    delete?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    connect?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    update?: TecnologiaUpdateWithWhereUniqueWithoutPaisInput | TecnologiaUpdateWithWhereUniqueWithoutPaisInput[]
    updateMany?: TecnologiaUpdateManyWithWhereWithoutPaisInput | TecnologiaUpdateManyWithWhereWithoutPaisInput[]
    deleteMany?: TecnologiaScalarWhereInput | TecnologiaScalarWhereInput[]
  }

  export type DemografiaUncheckedUpdateManyWithoutPaisNestedInput = {
    create?: XOR<DemografiaCreateWithoutPaisInput, DemografiaUncheckedCreateWithoutPaisInput> | DemografiaCreateWithoutPaisInput[] | DemografiaUncheckedCreateWithoutPaisInput[]
    connectOrCreate?: DemografiaCreateOrConnectWithoutPaisInput | DemografiaCreateOrConnectWithoutPaisInput[]
    upsert?: DemografiaUpsertWithWhereUniqueWithoutPaisInput | DemografiaUpsertWithWhereUniqueWithoutPaisInput[]
    createMany?: DemografiaCreateManyPaisInputEnvelope
    set?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    disconnect?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    delete?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    connect?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    update?: DemografiaUpdateWithWhereUniqueWithoutPaisInput | DemografiaUpdateWithWhereUniqueWithoutPaisInput[]
    updateMany?: DemografiaUpdateManyWithWhereWithoutPaisInput | DemografiaUpdateManyWithWhereWithoutPaisInput[]
    deleteMany?: DemografiaScalarWhereInput | DemografiaScalarWhereInput[]
  }

  export type SaudeCreateNestedManyWithoutIndicadorInput = {
    create?: XOR<SaudeCreateWithoutIndicadorInput, SaudeUncheckedCreateWithoutIndicadorInput> | SaudeCreateWithoutIndicadorInput[] | SaudeUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: SaudeCreateOrConnectWithoutIndicadorInput | SaudeCreateOrConnectWithoutIndicadorInput[]
    createMany?: SaudeCreateManyIndicadorInputEnvelope
    connect?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
  }

  export type EconomiaCreateNestedManyWithoutIndicadorInput = {
    create?: XOR<EconomiaCreateWithoutIndicadorInput, EconomiaUncheckedCreateWithoutIndicadorInput> | EconomiaCreateWithoutIndicadorInput[] | EconomiaUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: EconomiaCreateOrConnectWithoutIndicadorInput | EconomiaCreateOrConnectWithoutIndicadorInput[]
    createMany?: EconomiaCreateManyIndicadorInputEnvelope
    connect?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
  }

  export type AmbienteCreateNestedManyWithoutIndicadorInput = {
    create?: XOR<AmbienteCreateWithoutIndicadorInput, AmbienteUncheckedCreateWithoutIndicadorInput> | AmbienteCreateWithoutIndicadorInput[] | AmbienteUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: AmbienteCreateOrConnectWithoutIndicadorInput | AmbienteCreateOrConnectWithoutIndicadorInput[]
    createMany?: AmbienteCreateManyIndicadorInputEnvelope
    connect?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
  }

  export type TecnologiaCreateNestedManyWithoutIndicadorInput = {
    create?: XOR<TecnologiaCreateWithoutIndicadorInput, TecnologiaUncheckedCreateWithoutIndicadorInput> | TecnologiaCreateWithoutIndicadorInput[] | TecnologiaUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: TecnologiaCreateOrConnectWithoutIndicadorInput | TecnologiaCreateOrConnectWithoutIndicadorInput[]
    createMany?: TecnologiaCreateManyIndicadorInputEnvelope
    connect?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
  }

  export type DemografiaCreateNestedManyWithoutIndicadorInput = {
    create?: XOR<DemografiaCreateWithoutIndicadorInput, DemografiaUncheckedCreateWithoutIndicadorInput> | DemografiaCreateWithoutIndicadorInput[] | DemografiaUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: DemografiaCreateOrConnectWithoutIndicadorInput | DemografiaCreateOrConnectWithoutIndicadorInput[]
    createMany?: DemografiaCreateManyIndicadorInputEnvelope
    connect?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
  }

  export type SaudeUncheckedCreateNestedManyWithoutIndicadorInput = {
    create?: XOR<SaudeCreateWithoutIndicadorInput, SaudeUncheckedCreateWithoutIndicadorInput> | SaudeCreateWithoutIndicadorInput[] | SaudeUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: SaudeCreateOrConnectWithoutIndicadorInput | SaudeCreateOrConnectWithoutIndicadorInput[]
    createMany?: SaudeCreateManyIndicadorInputEnvelope
    connect?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
  }

  export type EconomiaUncheckedCreateNestedManyWithoutIndicadorInput = {
    create?: XOR<EconomiaCreateWithoutIndicadorInput, EconomiaUncheckedCreateWithoutIndicadorInput> | EconomiaCreateWithoutIndicadorInput[] | EconomiaUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: EconomiaCreateOrConnectWithoutIndicadorInput | EconomiaCreateOrConnectWithoutIndicadorInput[]
    createMany?: EconomiaCreateManyIndicadorInputEnvelope
    connect?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
  }

  export type AmbienteUncheckedCreateNestedManyWithoutIndicadorInput = {
    create?: XOR<AmbienteCreateWithoutIndicadorInput, AmbienteUncheckedCreateWithoutIndicadorInput> | AmbienteCreateWithoutIndicadorInput[] | AmbienteUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: AmbienteCreateOrConnectWithoutIndicadorInput | AmbienteCreateOrConnectWithoutIndicadorInput[]
    createMany?: AmbienteCreateManyIndicadorInputEnvelope
    connect?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
  }

  export type TecnologiaUncheckedCreateNestedManyWithoutIndicadorInput = {
    create?: XOR<TecnologiaCreateWithoutIndicadorInput, TecnologiaUncheckedCreateWithoutIndicadorInput> | TecnologiaCreateWithoutIndicadorInput[] | TecnologiaUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: TecnologiaCreateOrConnectWithoutIndicadorInput | TecnologiaCreateOrConnectWithoutIndicadorInput[]
    createMany?: TecnologiaCreateManyIndicadorInputEnvelope
    connect?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
  }

  export type DemografiaUncheckedCreateNestedManyWithoutIndicadorInput = {
    create?: XOR<DemografiaCreateWithoutIndicadorInput, DemografiaUncheckedCreateWithoutIndicadorInput> | DemografiaCreateWithoutIndicadorInput[] | DemografiaUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: DemografiaCreateOrConnectWithoutIndicadorInput | DemografiaCreateOrConnectWithoutIndicadorInput[]
    createMany?: DemografiaCreateManyIndicadorInputEnvelope
    connect?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
  }

  export type EnumCategoriaFieldUpdateOperationsInput = {
    set?: $Enums.Categoria
  }

  export type SaudeUpdateManyWithoutIndicadorNestedInput = {
    create?: XOR<SaudeCreateWithoutIndicadorInput, SaudeUncheckedCreateWithoutIndicadorInput> | SaudeCreateWithoutIndicadorInput[] | SaudeUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: SaudeCreateOrConnectWithoutIndicadorInput | SaudeCreateOrConnectWithoutIndicadorInput[]
    upsert?: SaudeUpsertWithWhereUniqueWithoutIndicadorInput | SaudeUpsertWithWhereUniqueWithoutIndicadorInput[]
    createMany?: SaudeCreateManyIndicadorInputEnvelope
    set?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    disconnect?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    delete?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    connect?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    update?: SaudeUpdateWithWhereUniqueWithoutIndicadorInput | SaudeUpdateWithWhereUniqueWithoutIndicadorInput[]
    updateMany?: SaudeUpdateManyWithWhereWithoutIndicadorInput | SaudeUpdateManyWithWhereWithoutIndicadorInput[]
    deleteMany?: SaudeScalarWhereInput | SaudeScalarWhereInput[]
  }

  export type EconomiaUpdateManyWithoutIndicadorNestedInput = {
    create?: XOR<EconomiaCreateWithoutIndicadorInput, EconomiaUncheckedCreateWithoutIndicadorInput> | EconomiaCreateWithoutIndicadorInput[] | EconomiaUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: EconomiaCreateOrConnectWithoutIndicadorInput | EconomiaCreateOrConnectWithoutIndicadorInput[]
    upsert?: EconomiaUpsertWithWhereUniqueWithoutIndicadorInput | EconomiaUpsertWithWhereUniqueWithoutIndicadorInput[]
    createMany?: EconomiaCreateManyIndicadorInputEnvelope
    set?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    disconnect?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    delete?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    connect?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    update?: EconomiaUpdateWithWhereUniqueWithoutIndicadorInput | EconomiaUpdateWithWhereUniqueWithoutIndicadorInput[]
    updateMany?: EconomiaUpdateManyWithWhereWithoutIndicadorInput | EconomiaUpdateManyWithWhereWithoutIndicadorInput[]
    deleteMany?: EconomiaScalarWhereInput | EconomiaScalarWhereInput[]
  }

  export type AmbienteUpdateManyWithoutIndicadorNestedInput = {
    create?: XOR<AmbienteCreateWithoutIndicadorInput, AmbienteUncheckedCreateWithoutIndicadorInput> | AmbienteCreateWithoutIndicadorInput[] | AmbienteUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: AmbienteCreateOrConnectWithoutIndicadorInput | AmbienteCreateOrConnectWithoutIndicadorInput[]
    upsert?: AmbienteUpsertWithWhereUniqueWithoutIndicadorInput | AmbienteUpsertWithWhereUniqueWithoutIndicadorInput[]
    createMany?: AmbienteCreateManyIndicadorInputEnvelope
    set?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    disconnect?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    delete?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    connect?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    update?: AmbienteUpdateWithWhereUniqueWithoutIndicadorInput | AmbienteUpdateWithWhereUniqueWithoutIndicadorInput[]
    updateMany?: AmbienteUpdateManyWithWhereWithoutIndicadorInput | AmbienteUpdateManyWithWhereWithoutIndicadorInput[]
    deleteMany?: AmbienteScalarWhereInput | AmbienteScalarWhereInput[]
  }

  export type TecnologiaUpdateManyWithoutIndicadorNestedInput = {
    create?: XOR<TecnologiaCreateWithoutIndicadorInput, TecnologiaUncheckedCreateWithoutIndicadorInput> | TecnologiaCreateWithoutIndicadorInput[] | TecnologiaUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: TecnologiaCreateOrConnectWithoutIndicadorInput | TecnologiaCreateOrConnectWithoutIndicadorInput[]
    upsert?: TecnologiaUpsertWithWhereUniqueWithoutIndicadorInput | TecnologiaUpsertWithWhereUniqueWithoutIndicadorInput[]
    createMany?: TecnologiaCreateManyIndicadorInputEnvelope
    set?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    disconnect?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    delete?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    connect?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    update?: TecnologiaUpdateWithWhereUniqueWithoutIndicadorInput | TecnologiaUpdateWithWhereUniqueWithoutIndicadorInput[]
    updateMany?: TecnologiaUpdateManyWithWhereWithoutIndicadorInput | TecnologiaUpdateManyWithWhereWithoutIndicadorInput[]
    deleteMany?: TecnologiaScalarWhereInput | TecnologiaScalarWhereInput[]
  }

  export type DemografiaUpdateManyWithoutIndicadorNestedInput = {
    create?: XOR<DemografiaCreateWithoutIndicadorInput, DemografiaUncheckedCreateWithoutIndicadorInput> | DemografiaCreateWithoutIndicadorInput[] | DemografiaUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: DemografiaCreateOrConnectWithoutIndicadorInput | DemografiaCreateOrConnectWithoutIndicadorInput[]
    upsert?: DemografiaUpsertWithWhereUniqueWithoutIndicadorInput | DemografiaUpsertWithWhereUniqueWithoutIndicadorInput[]
    createMany?: DemografiaCreateManyIndicadorInputEnvelope
    set?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    disconnect?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    delete?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    connect?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    update?: DemografiaUpdateWithWhereUniqueWithoutIndicadorInput | DemografiaUpdateWithWhereUniqueWithoutIndicadorInput[]
    updateMany?: DemografiaUpdateManyWithWhereWithoutIndicadorInput | DemografiaUpdateManyWithWhereWithoutIndicadorInput[]
    deleteMany?: DemografiaScalarWhereInput | DemografiaScalarWhereInput[]
  }

  export type SaudeUncheckedUpdateManyWithoutIndicadorNestedInput = {
    create?: XOR<SaudeCreateWithoutIndicadorInput, SaudeUncheckedCreateWithoutIndicadorInput> | SaudeCreateWithoutIndicadorInput[] | SaudeUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: SaudeCreateOrConnectWithoutIndicadorInput | SaudeCreateOrConnectWithoutIndicadorInput[]
    upsert?: SaudeUpsertWithWhereUniqueWithoutIndicadorInput | SaudeUpsertWithWhereUniqueWithoutIndicadorInput[]
    createMany?: SaudeCreateManyIndicadorInputEnvelope
    set?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    disconnect?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    delete?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    connect?: SaudeWhereUniqueInput | SaudeWhereUniqueInput[]
    update?: SaudeUpdateWithWhereUniqueWithoutIndicadorInput | SaudeUpdateWithWhereUniqueWithoutIndicadorInput[]
    updateMany?: SaudeUpdateManyWithWhereWithoutIndicadorInput | SaudeUpdateManyWithWhereWithoutIndicadorInput[]
    deleteMany?: SaudeScalarWhereInput | SaudeScalarWhereInput[]
  }

  export type EconomiaUncheckedUpdateManyWithoutIndicadorNestedInput = {
    create?: XOR<EconomiaCreateWithoutIndicadorInput, EconomiaUncheckedCreateWithoutIndicadorInput> | EconomiaCreateWithoutIndicadorInput[] | EconomiaUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: EconomiaCreateOrConnectWithoutIndicadorInput | EconomiaCreateOrConnectWithoutIndicadorInput[]
    upsert?: EconomiaUpsertWithWhereUniqueWithoutIndicadorInput | EconomiaUpsertWithWhereUniqueWithoutIndicadorInput[]
    createMany?: EconomiaCreateManyIndicadorInputEnvelope
    set?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    disconnect?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    delete?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    connect?: EconomiaWhereUniqueInput | EconomiaWhereUniqueInput[]
    update?: EconomiaUpdateWithWhereUniqueWithoutIndicadorInput | EconomiaUpdateWithWhereUniqueWithoutIndicadorInput[]
    updateMany?: EconomiaUpdateManyWithWhereWithoutIndicadorInput | EconomiaUpdateManyWithWhereWithoutIndicadorInput[]
    deleteMany?: EconomiaScalarWhereInput | EconomiaScalarWhereInput[]
  }

  export type AmbienteUncheckedUpdateManyWithoutIndicadorNestedInput = {
    create?: XOR<AmbienteCreateWithoutIndicadorInput, AmbienteUncheckedCreateWithoutIndicadorInput> | AmbienteCreateWithoutIndicadorInput[] | AmbienteUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: AmbienteCreateOrConnectWithoutIndicadorInput | AmbienteCreateOrConnectWithoutIndicadorInput[]
    upsert?: AmbienteUpsertWithWhereUniqueWithoutIndicadorInput | AmbienteUpsertWithWhereUniqueWithoutIndicadorInput[]
    createMany?: AmbienteCreateManyIndicadorInputEnvelope
    set?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    disconnect?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    delete?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    connect?: AmbienteWhereUniqueInput | AmbienteWhereUniqueInput[]
    update?: AmbienteUpdateWithWhereUniqueWithoutIndicadorInput | AmbienteUpdateWithWhereUniqueWithoutIndicadorInput[]
    updateMany?: AmbienteUpdateManyWithWhereWithoutIndicadorInput | AmbienteUpdateManyWithWhereWithoutIndicadorInput[]
    deleteMany?: AmbienteScalarWhereInput | AmbienteScalarWhereInput[]
  }

  export type TecnologiaUncheckedUpdateManyWithoutIndicadorNestedInput = {
    create?: XOR<TecnologiaCreateWithoutIndicadorInput, TecnologiaUncheckedCreateWithoutIndicadorInput> | TecnologiaCreateWithoutIndicadorInput[] | TecnologiaUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: TecnologiaCreateOrConnectWithoutIndicadorInput | TecnologiaCreateOrConnectWithoutIndicadorInput[]
    upsert?: TecnologiaUpsertWithWhereUniqueWithoutIndicadorInput | TecnologiaUpsertWithWhereUniqueWithoutIndicadorInput[]
    createMany?: TecnologiaCreateManyIndicadorInputEnvelope
    set?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    disconnect?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    delete?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    connect?: TecnologiaWhereUniqueInput | TecnologiaWhereUniqueInput[]
    update?: TecnologiaUpdateWithWhereUniqueWithoutIndicadorInput | TecnologiaUpdateWithWhereUniqueWithoutIndicadorInput[]
    updateMany?: TecnologiaUpdateManyWithWhereWithoutIndicadorInput | TecnologiaUpdateManyWithWhereWithoutIndicadorInput[]
    deleteMany?: TecnologiaScalarWhereInput | TecnologiaScalarWhereInput[]
  }

  export type DemografiaUncheckedUpdateManyWithoutIndicadorNestedInput = {
    create?: XOR<DemografiaCreateWithoutIndicadorInput, DemografiaUncheckedCreateWithoutIndicadorInput> | DemografiaCreateWithoutIndicadorInput[] | DemografiaUncheckedCreateWithoutIndicadorInput[]
    connectOrCreate?: DemografiaCreateOrConnectWithoutIndicadorInput | DemografiaCreateOrConnectWithoutIndicadorInput[]
    upsert?: DemografiaUpsertWithWhereUniqueWithoutIndicadorInput | DemografiaUpsertWithWhereUniqueWithoutIndicadorInput[]
    createMany?: DemografiaCreateManyIndicadorInputEnvelope
    set?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    disconnect?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    delete?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    connect?: DemografiaWhereUniqueInput | DemografiaWhereUniqueInput[]
    update?: DemografiaUpdateWithWhereUniqueWithoutIndicadorInput | DemografiaUpdateWithWhereUniqueWithoutIndicadorInput[]
    updateMany?: DemografiaUpdateManyWithWhereWithoutIndicadorInput | DemografiaUpdateManyWithWhereWithoutIndicadorInput[]
    deleteMany?: DemografiaScalarWhereInput | DemografiaScalarWhereInput[]
  }

  export type PaisCreateNestedOneWithoutSaudeInput = {
    create?: XOR<PaisCreateWithoutSaudeInput, PaisUncheckedCreateWithoutSaudeInput>
    connectOrCreate?: PaisCreateOrConnectWithoutSaudeInput
    connect?: PaisWhereUniqueInput
  }

  export type IndicadorCreateNestedOneWithoutSaudeInput = {
    create?: XOR<IndicadorCreateWithoutSaudeInput, IndicadorUncheckedCreateWithoutSaudeInput>
    connectOrCreate?: IndicadorCreateOrConnectWithoutSaudeInput
    connect?: IndicadorWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PaisUpdateOneRequiredWithoutSaudeNestedInput = {
    create?: XOR<PaisCreateWithoutSaudeInput, PaisUncheckedCreateWithoutSaudeInput>
    connectOrCreate?: PaisCreateOrConnectWithoutSaudeInput
    upsert?: PaisUpsertWithoutSaudeInput
    connect?: PaisWhereUniqueInput
    update?: XOR<XOR<PaisUpdateToOneWithWhereWithoutSaudeInput, PaisUpdateWithoutSaudeInput>, PaisUncheckedUpdateWithoutSaudeInput>
  }

  export type IndicadorUpdateOneRequiredWithoutSaudeNestedInput = {
    create?: XOR<IndicadorCreateWithoutSaudeInput, IndicadorUncheckedCreateWithoutSaudeInput>
    connectOrCreate?: IndicadorCreateOrConnectWithoutSaudeInput
    upsert?: IndicadorUpsertWithoutSaudeInput
    connect?: IndicadorWhereUniqueInput
    update?: XOR<XOR<IndicadorUpdateToOneWithWhereWithoutSaudeInput, IndicadorUpdateWithoutSaudeInput>, IndicadorUncheckedUpdateWithoutSaudeInput>
  }

  export type PaisCreateNestedOneWithoutEconomiaInput = {
    create?: XOR<PaisCreateWithoutEconomiaInput, PaisUncheckedCreateWithoutEconomiaInput>
    connectOrCreate?: PaisCreateOrConnectWithoutEconomiaInput
    connect?: PaisWhereUniqueInput
  }

  export type IndicadorCreateNestedOneWithoutEconomiaInput = {
    create?: XOR<IndicadorCreateWithoutEconomiaInput, IndicadorUncheckedCreateWithoutEconomiaInput>
    connectOrCreate?: IndicadorCreateOrConnectWithoutEconomiaInput
    connect?: IndicadorWhereUniqueInput
  }

  export type PaisUpdateOneRequiredWithoutEconomiaNestedInput = {
    create?: XOR<PaisCreateWithoutEconomiaInput, PaisUncheckedCreateWithoutEconomiaInput>
    connectOrCreate?: PaisCreateOrConnectWithoutEconomiaInput
    upsert?: PaisUpsertWithoutEconomiaInput
    connect?: PaisWhereUniqueInput
    update?: XOR<XOR<PaisUpdateToOneWithWhereWithoutEconomiaInput, PaisUpdateWithoutEconomiaInput>, PaisUncheckedUpdateWithoutEconomiaInput>
  }

  export type IndicadorUpdateOneRequiredWithoutEconomiaNestedInput = {
    create?: XOR<IndicadorCreateWithoutEconomiaInput, IndicadorUncheckedCreateWithoutEconomiaInput>
    connectOrCreate?: IndicadorCreateOrConnectWithoutEconomiaInput
    upsert?: IndicadorUpsertWithoutEconomiaInput
    connect?: IndicadorWhereUniqueInput
    update?: XOR<XOR<IndicadorUpdateToOneWithWhereWithoutEconomiaInput, IndicadorUpdateWithoutEconomiaInput>, IndicadorUncheckedUpdateWithoutEconomiaInput>
  }

  export type PaisCreateNestedOneWithoutAmbienteInput = {
    create?: XOR<PaisCreateWithoutAmbienteInput, PaisUncheckedCreateWithoutAmbienteInput>
    connectOrCreate?: PaisCreateOrConnectWithoutAmbienteInput
    connect?: PaisWhereUniqueInput
  }

  export type IndicadorCreateNestedOneWithoutAmbienteInput = {
    create?: XOR<IndicadorCreateWithoutAmbienteInput, IndicadorUncheckedCreateWithoutAmbienteInput>
    connectOrCreate?: IndicadorCreateOrConnectWithoutAmbienteInput
    connect?: IndicadorWhereUniqueInput
  }

  export type PaisUpdateOneRequiredWithoutAmbienteNestedInput = {
    create?: XOR<PaisCreateWithoutAmbienteInput, PaisUncheckedCreateWithoutAmbienteInput>
    connectOrCreate?: PaisCreateOrConnectWithoutAmbienteInput
    upsert?: PaisUpsertWithoutAmbienteInput
    connect?: PaisWhereUniqueInput
    update?: XOR<XOR<PaisUpdateToOneWithWhereWithoutAmbienteInput, PaisUpdateWithoutAmbienteInput>, PaisUncheckedUpdateWithoutAmbienteInput>
  }

  export type IndicadorUpdateOneRequiredWithoutAmbienteNestedInput = {
    create?: XOR<IndicadorCreateWithoutAmbienteInput, IndicadorUncheckedCreateWithoutAmbienteInput>
    connectOrCreate?: IndicadorCreateOrConnectWithoutAmbienteInput
    upsert?: IndicadorUpsertWithoutAmbienteInput
    connect?: IndicadorWhereUniqueInput
    update?: XOR<XOR<IndicadorUpdateToOneWithWhereWithoutAmbienteInput, IndicadorUpdateWithoutAmbienteInput>, IndicadorUncheckedUpdateWithoutAmbienteInput>
  }

  export type PaisCreateNestedOneWithoutTecnologiaInput = {
    create?: XOR<PaisCreateWithoutTecnologiaInput, PaisUncheckedCreateWithoutTecnologiaInput>
    connectOrCreate?: PaisCreateOrConnectWithoutTecnologiaInput
    connect?: PaisWhereUniqueInput
  }

  export type IndicadorCreateNestedOneWithoutTecnologiaInput = {
    create?: XOR<IndicadorCreateWithoutTecnologiaInput, IndicadorUncheckedCreateWithoutTecnologiaInput>
    connectOrCreate?: IndicadorCreateOrConnectWithoutTecnologiaInput
    connect?: IndicadorWhereUniqueInput
  }

  export type PaisUpdateOneRequiredWithoutTecnologiaNestedInput = {
    create?: XOR<PaisCreateWithoutTecnologiaInput, PaisUncheckedCreateWithoutTecnologiaInput>
    connectOrCreate?: PaisCreateOrConnectWithoutTecnologiaInput
    upsert?: PaisUpsertWithoutTecnologiaInput
    connect?: PaisWhereUniqueInput
    update?: XOR<XOR<PaisUpdateToOneWithWhereWithoutTecnologiaInput, PaisUpdateWithoutTecnologiaInput>, PaisUncheckedUpdateWithoutTecnologiaInput>
  }

  export type IndicadorUpdateOneRequiredWithoutTecnologiaNestedInput = {
    create?: XOR<IndicadorCreateWithoutTecnologiaInput, IndicadorUncheckedCreateWithoutTecnologiaInput>
    connectOrCreate?: IndicadorCreateOrConnectWithoutTecnologiaInput
    upsert?: IndicadorUpsertWithoutTecnologiaInput
    connect?: IndicadorWhereUniqueInput
    update?: XOR<XOR<IndicadorUpdateToOneWithWhereWithoutTecnologiaInput, IndicadorUpdateWithoutTecnologiaInput>, IndicadorUncheckedUpdateWithoutTecnologiaInput>
  }

  export type PaisCreateNestedOneWithoutDemografiaInput = {
    create?: XOR<PaisCreateWithoutDemografiaInput, PaisUncheckedCreateWithoutDemografiaInput>
    connectOrCreate?: PaisCreateOrConnectWithoutDemografiaInput
    connect?: PaisWhereUniqueInput
  }

  export type IndicadorCreateNestedOneWithoutDemografiaInput = {
    create?: XOR<IndicadorCreateWithoutDemografiaInput, IndicadorUncheckedCreateWithoutDemografiaInput>
    connectOrCreate?: IndicadorCreateOrConnectWithoutDemografiaInput
    connect?: IndicadorWhereUniqueInput
  }

  export type PaisUpdateOneRequiredWithoutDemografiaNestedInput = {
    create?: XOR<PaisCreateWithoutDemografiaInput, PaisUncheckedCreateWithoutDemografiaInput>
    connectOrCreate?: PaisCreateOrConnectWithoutDemografiaInput
    upsert?: PaisUpsertWithoutDemografiaInput
    connect?: PaisWhereUniqueInput
    update?: XOR<XOR<PaisUpdateToOneWithWhereWithoutDemografiaInput, PaisUpdateWithoutDemografiaInput>, PaisUncheckedUpdateWithoutDemografiaInput>
  }

  export type IndicadorUpdateOneRequiredWithoutDemografiaNestedInput = {
    create?: XOR<IndicadorCreateWithoutDemografiaInput, IndicadorUncheckedCreateWithoutDemografiaInput>
    connectOrCreate?: IndicadorCreateOrConnectWithoutDemografiaInput
    upsert?: IndicadorUpsertWithoutDemografiaInput
    connect?: IndicadorWhereUniqueInput
    update?: XOR<XOR<IndicadorUpdateToOneWithWhereWithoutDemografiaInput, IndicadorUpdateWithoutDemografiaInput>, IndicadorUncheckedUpdateWithoutDemografiaInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumCategoriaFilter<$PrismaModel = never> = {
    equals?: $Enums.Categoria | EnumCategoriaFieldRefInput<$PrismaModel>
    in?: $Enums.Categoria[] | ListEnumCategoriaFieldRefInput<$PrismaModel>
    notIn?: $Enums.Categoria[] | ListEnumCategoriaFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoriaFilter<$PrismaModel> | $Enums.Categoria
  }

  export type NestedEnumCategoriaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Categoria | EnumCategoriaFieldRefInput<$PrismaModel>
    in?: $Enums.Categoria[] | ListEnumCategoriaFieldRefInput<$PrismaModel>
    notIn?: $Enums.Categoria[] | ListEnumCategoriaFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoriaWithAggregatesFilter<$PrismaModel> | $Enums.Categoria
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoriaFilter<$PrismaModel>
    _max?: NestedEnumCategoriaFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SaudeCreateWithoutPaisInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    indicador: IndicadorCreateNestedOneWithoutSaudeInput
  }

  export type SaudeUncheckedCreateWithoutPaisInput = {
    id?: number
    valor: number
    ano: number
    indicadorId: string
    createdAt?: Date | string
  }

  export type SaudeCreateOrConnectWithoutPaisInput = {
    where: SaudeWhereUniqueInput
    create: XOR<SaudeCreateWithoutPaisInput, SaudeUncheckedCreateWithoutPaisInput>
  }

  export type SaudeCreateManyPaisInputEnvelope = {
    data: SaudeCreateManyPaisInput | SaudeCreateManyPaisInput[]
    skipDuplicates?: boolean
  }

  export type EconomiaCreateWithoutPaisInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    indicador: IndicadorCreateNestedOneWithoutEconomiaInput
  }

  export type EconomiaUncheckedCreateWithoutPaisInput = {
    id?: number
    valor: number
    ano: number
    indicadorId: string
    createdAt?: Date | string
  }

  export type EconomiaCreateOrConnectWithoutPaisInput = {
    where: EconomiaWhereUniqueInput
    create: XOR<EconomiaCreateWithoutPaisInput, EconomiaUncheckedCreateWithoutPaisInput>
  }

  export type EconomiaCreateManyPaisInputEnvelope = {
    data: EconomiaCreateManyPaisInput | EconomiaCreateManyPaisInput[]
    skipDuplicates?: boolean
  }

  export type AmbienteCreateWithoutPaisInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    indicador: IndicadorCreateNestedOneWithoutAmbienteInput
  }

  export type AmbienteUncheckedCreateWithoutPaisInput = {
    id?: number
    valor: number
    ano: number
    indicadorId: string
    createdAt?: Date | string
  }

  export type AmbienteCreateOrConnectWithoutPaisInput = {
    where: AmbienteWhereUniqueInput
    create: XOR<AmbienteCreateWithoutPaisInput, AmbienteUncheckedCreateWithoutPaisInput>
  }

  export type AmbienteCreateManyPaisInputEnvelope = {
    data: AmbienteCreateManyPaisInput | AmbienteCreateManyPaisInput[]
    skipDuplicates?: boolean
  }

  export type TecnologiaCreateWithoutPaisInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    indicador: IndicadorCreateNestedOneWithoutTecnologiaInput
  }

  export type TecnologiaUncheckedCreateWithoutPaisInput = {
    id?: number
    valor: number
    ano: number
    indicadorId: string
    createdAt?: Date | string
  }

  export type TecnologiaCreateOrConnectWithoutPaisInput = {
    where: TecnologiaWhereUniqueInput
    create: XOR<TecnologiaCreateWithoutPaisInput, TecnologiaUncheckedCreateWithoutPaisInput>
  }

  export type TecnologiaCreateManyPaisInputEnvelope = {
    data: TecnologiaCreateManyPaisInput | TecnologiaCreateManyPaisInput[]
    skipDuplicates?: boolean
  }

  export type DemografiaCreateWithoutPaisInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    indicador: IndicadorCreateNestedOneWithoutDemografiaInput
  }

  export type DemografiaUncheckedCreateWithoutPaisInput = {
    id?: number
    valor: number
    ano: number
    indicadorId: string
    createdAt?: Date | string
  }

  export type DemografiaCreateOrConnectWithoutPaisInput = {
    where: DemografiaWhereUniqueInput
    create: XOR<DemografiaCreateWithoutPaisInput, DemografiaUncheckedCreateWithoutPaisInput>
  }

  export type DemografiaCreateManyPaisInputEnvelope = {
    data: DemografiaCreateManyPaisInput | DemografiaCreateManyPaisInput[]
    skipDuplicates?: boolean
  }

  export type SaudeUpsertWithWhereUniqueWithoutPaisInput = {
    where: SaudeWhereUniqueInput
    update: XOR<SaudeUpdateWithoutPaisInput, SaudeUncheckedUpdateWithoutPaisInput>
    create: XOR<SaudeCreateWithoutPaisInput, SaudeUncheckedCreateWithoutPaisInput>
  }

  export type SaudeUpdateWithWhereUniqueWithoutPaisInput = {
    where: SaudeWhereUniqueInput
    data: XOR<SaudeUpdateWithoutPaisInput, SaudeUncheckedUpdateWithoutPaisInput>
  }

  export type SaudeUpdateManyWithWhereWithoutPaisInput = {
    where: SaudeScalarWhereInput
    data: XOR<SaudeUpdateManyMutationInput, SaudeUncheckedUpdateManyWithoutPaisInput>
  }

  export type SaudeScalarWhereInput = {
    AND?: SaudeScalarWhereInput | SaudeScalarWhereInput[]
    OR?: SaudeScalarWhereInput[]
    NOT?: SaudeScalarWhereInput | SaudeScalarWhereInput[]
    id?: IntFilter<"Saude"> | number
    valor?: FloatFilter<"Saude"> | number
    ano?: IntFilter<"Saude"> | number
    paisId?: StringFilter<"Saude"> | string
    indicadorId?: StringFilter<"Saude"> | string
    createdAt?: DateTimeFilter<"Saude"> | Date | string
  }

  export type EconomiaUpsertWithWhereUniqueWithoutPaisInput = {
    where: EconomiaWhereUniqueInput
    update: XOR<EconomiaUpdateWithoutPaisInput, EconomiaUncheckedUpdateWithoutPaisInput>
    create: XOR<EconomiaCreateWithoutPaisInput, EconomiaUncheckedCreateWithoutPaisInput>
  }

  export type EconomiaUpdateWithWhereUniqueWithoutPaisInput = {
    where: EconomiaWhereUniqueInput
    data: XOR<EconomiaUpdateWithoutPaisInput, EconomiaUncheckedUpdateWithoutPaisInput>
  }

  export type EconomiaUpdateManyWithWhereWithoutPaisInput = {
    where: EconomiaScalarWhereInput
    data: XOR<EconomiaUpdateManyMutationInput, EconomiaUncheckedUpdateManyWithoutPaisInput>
  }

  export type EconomiaScalarWhereInput = {
    AND?: EconomiaScalarWhereInput | EconomiaScalarWhereInput[]
    OR?: EconomiaScalarWhereInput[]
    NOT?: EconomiaScalarWhereInput | EconomiaScalarWhereInput[]
    id?: IntFilter<"Economia"> | number
    valor?: FloatFilter<"Economia"> | number
    ano?: IntFilter<"Economia"> | number
    paisId?: StringFilter<"Economia"> | string
    indicadorId?: StringFilter<"Economia"> | string
    createdAt?: DateTimeFilter<"Economia"> | Date | string
  }

  export type AmbienteUpsertWithWhereUniqueWithoutPaisInput = {
    where: AmbienteWhereUniqueInput
    update: XOR<AmbienteUpdateWithoutPaisInput, AmbienteUncheckedUpdateWithoutPaisInput>
    create: XOR<AmbienteCreateWithoutPaisInput, AmbienteUncheckedCreateWithoutPaisInput>
  }

  export type AmbienteUpdateWithWhereUniqueWithoutPaisInput = {
    where: AmbienteWhereUniqueInput
    data: XOR<AmbienteUpdateWithoutPaisInput, AmbienteUncheckedUpdateWithoutPaisInput>
  }

  export type AmbienteUpdateManyWithWhereWithoutPaisInput = {
    where: AmbienteScalarWhereInput
    data: XOR<AmbienteUpdateManyMutationInput, AmbienteUncheckedUpdateManyWithoutPaisInput>
  }

  export type AmbienteScalarWhereInput = {
    AND?: AmbienteScalarWhereInput | AmbienteScalarWhereInput[]
    OR?: AmbienteScalarWhereInput[]
    NOT?: AmbienteScalarWhereInput | AmbienteScalarWhereInput[]
    id?: IntFilter<"Ambiente"> | number
    valor?: FloatFilter<"Ambiente"> | number
    ano?: IntFilter<"Ambiente"> | number
    paisId?: StringFilter<"Ambiente"> | string
    indicadorId?: StringFilter<"Ambiente"> | string
    createdAt?: DateTimeFilter<"Ambiente"> | Date | string
  }

  export type TecnologiaUpsertWithWhereUniqueWithoutPaisInput = {
    where: TecnologiaWhereUniqueInput
    update: XOR<TecnologiaUpdateWithoutPaisInput, TecnologiaUncheckedUpdateWithoutPaisInput>
    create: XOR<TecnologiaCreateWithoutPaisInput, TecnologiaUncheckedCreateWithoutPaisInput>
  }

  export type TecnologiaUpdateWithWhereUniqueWithoutPaisInput = {
    where: TecnologiaWhereUniqueInput
    data: XOR<TecnologiaUpdateWithoutPaisInput, TecnologiaUncheckedUpdateWithoutPaisInput>
  }

  export type TecnologiaUpdateManyWithWhereWithoutPaisInput = {
    where: TecnologiaScalarWhereInput
    data: XOR<TecnologiaUpdateManyMutationInput, TecnologiaUncheckedUpdateManyWithoutPaisInput>
  }

  export type TecnologiaScalarWhereInput = {
    AND?: TecnologiaScalarWhereInput | TecnologiaScalarWhereInput[]
    OR?: TecnologiaScalarWhereInput[]
    NOT?: TecnologiaScalarWhereInput | TecnologiaScalarWhereInput[]
    id?: IntFilter<"Tecnologia"> | number
    valor?: FloatFilter<"Tecnologia"> | number
    ano?: IntFilter<"Tecnologia"> | number
    paisId?: StringFilter<"Tecnologia"> | string
    indicadorId?: StringFilter<"Tecnologia"> | string
    createdAt?: DateTimeFilter<"Tecnologia"> | Date | string
  }

  export type DemografiaUpsertWithWhereUniqueWithoutPaisInput = {
    where: DemografiaWhereUniqueInput
    update: XOR<DemografiaUpdateWithoutPaisInput, DemografiaUncheckedUpdateWithoutPaisInput>
    create: XOR<DemografiaCreateWithoutPaisInput, DemografiaUncheckedCreateWithoutPaisInput>
  }

  export type DemografiaUpdateWithWhereUniqueWithoutPaisInput = {
    where: DemografiaWhereUniqueInput
    data: XOR<DemografiaUpdateWithoutPaisInput, DemografiaUncheckedUpdateWithoutPaisInput>
  }

  export type DemografiaUpdateManyWithWhereWithoutPaisInput = {
    where: DemografiaScalarWhereInput
    data: XOR<DemografiaUpdateManyMutationInput, DemografiaUncheckedUpdateManyWithoutPaisInput>
  }

  export type DemografiaScalarWhereInput = {
    AND?: DemografiaScalarWhereInput | DemografiaScalarWhereInput[]
    OR?: DemografiaScalarWhereInput[]
    NOT?: DemografiaScalarWhereInput | DemografiaScalarWhereInput[]
    id?: IntFilter<"Demografia"> | number
    valor?: FloatFilter<"Demografia"> | number
    ano?: IntFilter<"Demografia"> | number
    paisId?: StringFilter<"Demografia"> | string
    indicadorId?: StringFilter<"Demografia"> | string
    createdAt?: DateTimeFilter<"Demografia"> | Date | string
  }

  export type SaudeCreateWithoutIndicadorInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    pais: PaisCreateNestedOneWithoutSaudeInput
  }

  export type SaudeUncheckedCreateWithoutIndicadorInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    createdAt?: Date | string
  }

  export type SaudeCreateOrConnectWithoutIndicadorInput = {
    where: SaudeWhereUniqueInput
    create: XOR<SaudeCreateWithoutIndicadorInput, SaudeUncheckedCreateWithoutIndicadorInput>
  }

  export type SaudeCreateManyIndicadorInputEnvelope = {
    data: SaudeCreateManyIndicadorInput | SaudeCreateManyIndicadorInput[]
    skipDuplicates?: boolean
  }

  export type EconomiaCreateWithoutIndicadorInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    pais: PaisCreateNestedOneWithoutEconomiaInput
  }

  export type EconomiaUncheckedCreateWithoutIndicadorInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    createdAt?: Date | string
  }

  export type EconomiaCreateOrConnectWithoutIndicadorInput = {
    where: EconomiaWhereUniqueInput
    create: XOR<EconomiaCreateWithoutIndicadorInput, EconomiaUncheckedCreateWithoutIndicadorInput>
  }

  export type EconomiaCreateManyIndicadorInputEnvelope = {
    data: EconomiaCreateManyIndicadorInput | EconomiaCreateManyIndicadorInput[]
    skipDuplicates?: boolean
  }

  export type AmbienteCreateWithoutIndicadorInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    pais: PaisCreateNestedOneWithoutAmbienteInput
  }

  export type AmbienteUncheckedCreateWithoutIndicadorInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    createdAt?: Date | string
  }

  export type AmbienteCreateOrConnectWithoutIndicadorInput = {
    where: AmbienteWhereUniqueInput
    create: XOR<AmbienteCreateWithoutIndicadorInput, AmbienteUncheckedCreateWithoutIndicadorInput>
  }

  export type AmbienteCreateManyIndicadorInputEnvelope = {
    data: AmbienteCreateManyIndicadorInput | AmbienteCreateManyIndicadorInput[]
    skipDuplicates?: boolean
  }

  export type TecnologiaCreateWithoutIndicadorInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    pais: PaisCreateNestedOneWithoutTecnologiaInput
  }

  export type TecnologiaUncheckedCreateWithoutIndicadorInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    createdAt?: Date | string
  }

  export type TecnologiaCreateOrConnectWithoutIndicadorInput = {
    where: TecnologiaWhereUniqueInput
    create: XOR<TecnologiaCreateWithoutIndicadorInput, TecnologiaUncheckedCreateWithoutIndicadorInput>
  }

  export type TecnologiaCreateManyIndicadorInputEnvelope = {
    data: TecnologiaCreateManyIndicadorInput | TecnologiaCreateManyIndicadorInput[]
    skipDuplicates?: boolean
  }

  export type DemografiaCreateWithoutIndicadorInput = {
    valor: number
    ano: number
    createdAt?: Date | string
    pais: PaisCreateNestedOneWithoutDemografiaInput
  }

  export type DemografiaUncheckedCreateWithoutIndicadorInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    createdAt?: Date | string
  }

  export type DemografiaCreateOrConnectWithoutIndicadorInput = {
    where: DemografiaWhereUniqueInput
    create: XOR<DemografiaCreateWithoutIndicadorInput, DemografiaUncheckedCreateWithoutIndicadorInput>
  }

  export type DemografiaCreateManyIndicadorInputEnvelope = {
    data: DemografiaCreateManyIndicadorInput | DemografiaCreateManyIndicadorInput[]
    skipDuplicates?: boolean
  }

  export type SaudeUpsertWithWhereUniqueWithoutIndicadorInput = {
    where: SaudeWhereUniqueInput
    update: XOR<SaudeUpdateWithoutIndicadorInput, SaudeUncheckedUpdateWithoutIndicadorInput>
    create: XOR<SaudeCreateWithoutIndicadorInput, SaudeUncheckedCreateWithoutIndicadorInput>
  }

  export type SaudeUpdateWithWhereUniqueWithoutIndicadorInput = {
    where: SaudeWhereUniqueInput
    data: XOR<SaudeUpdateWithoutIndicadorInput, SaudeUncheckedUpdateWithoutIndicadorInput>
  }

  export type SaudeUpdateManyWithWhereWithoutIndicadorInput = {
    where: SaudeScalarWhereInput
    data: XOR<SaudeUpdateManyMutationInput, SaudeUncheckedUpdateManyWithoutIndicadorInput>
  }

  export type EconomiaUpsertWithWhereUniqueWithoutIndicadorInput = {
    where: EconomiaWhereUniqueInput
    update: XOR<EconomiaUpdateWithoutIndicadorInput, EconomiaUncheckedUpdateWithoutIndicadorInput>
    create: XOR<EconomiaCreateWithoutIndicadorInput, EconomiaUncheckedCreateWithoutIndicadorInput>
  }

  export type EconomiaUpdateWithWhereUniqueWithoutIndicadorInput = {
    where: EconomiaWhereUniqueInput
    data: XOR<EconomiaUpdateWithoutIndicadorInput, EconomiaUncheckedUpdateWithoutIndicadorInput>
  }

  export type EconomiaUpdateManyWithWhereWithoutIndicadorInput = {
    where: EconomiaScalarWhereInput
    data: XOR<EconomiaUpdateManyMutationInput, EconomiaUncheckedUpdateManyWithoutIndicadorInput>
  }

  export type AmbienteUpsertWithWhereUniqueWithoutIndicadorInput = {
    where: AmbienteWhereUniqueInput
    update: XOR<AmbienteUpdateWithoutIndicadorInput, AmbienteUncheckedUpdateWithoutIndicadorInput>
    create: XOR<AmbienteCreateWithoutIndicadorInput, AmbienteUncheckedCreateWithoutIndicadorInput>
  }

  export type AmbienteUpdateWithWhereUniqueWithoutIndicadorInput = {
    where: AmbienteWhereUniqueInput
    data: XOR<AmbienteUpdateWithoutIndicadorInput, AmbienteUncheckedUpdateWithoutIndicadorInput>
  }

  export type AmbienteUpdateManyWithWhereWithoutIndicadorInput = {
    where: AmbienteScalarWhereInput
    data: XOR<AmbienteUpdateManyMutationInput, AmbienteUncheckedUpdateManyWithoutIndicadorInput>
  }

  export type TecnologiaUpsertWithWhereUniqueWithoutIndicadorInput = {
    where: TecnologiaWhereUniqueInput
    update: XOR<TecnologiaUpdateWithoutIndicadorInput, TecnologiaUncheckedUpdateWithoutIndicadorInput>
    create: XOR<TecnologiaCreateWithoutIndicadorInput, TecnologiaUncheckedCreateWithoutIndicadorInput>
  }

  export type TecnologiaUpdateWithWhereUniqueWithoutIndicadorInput = {
    where: TecnologiaWhereUniqueInput
    data: XOR<TecnologiaUpdateWithoutIndicadorInput, TecnologiaUncheckedUpdateWithoutIndicadorInput>
  }

  export type TecnologiaUpdateManyWithWhereWithoutIndicadorInput = {
    where: TecnologiaScalarWhereInput
    data: XOR<TecnologiaUpdateManyMutationInput, TecnologiaUncheckedUpdateManyWithoutIndicadorInput>
  }

  export type DemografiaUpsertWithWhereUniqueWithoutIndicadorInput = {
    where: DemografiaWhereUniqueInput
    update: XOR<DemografiaUpdateWithoutIndicadorInput, DemografiaUncheckedUpdateWithoutIndicadorInput>
    create: XOR<DemografiaCreateWithoutIndicadorInput, DemografiaUncheckedCreateWithoutIndicadorInput>
  }

  export type DemografiaUpdateWithWhereUniqueWithoutIndicadorInput = {
    where: DemografiaWhereUniqueInput
    data: XOR<DemografiaUpdateWithoutIndicadorInput, DemografiaUncheckedUpdateWithoutIndicadorInput>
  }

  export type DemografiaUpdateManyWithWhereWithoutIndicadorInput = {
    where: DemografiaScalarWhereInput
    data: XOR<DemografiaUpdateManyMutationInput, DemografiaUncheckedUpdateManyWithoutIndicadorInput>
  }

  export type PaisCreateWithoutSaudeInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
    economia?: EconomiaCreateNestedManyWithoutPaisInput
    ambiente?: AmbienteCreateNestedManyWithoutPaisInput
    tecnologia?: TecnologiaCreateNestedManyWithoutPaisInput
    demografia?: DemografiaCreateNestedManyWithoutPaisInput
  }

  export type PaisUncheckedCreateWithoutSaudeInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
    economia?: EconomiaUncheckedCreateNestedManyWithoutPaisInput
    ambiente?: AmbienteUncheckedCreateNestedManyWithoutPaisInput
    tecnologia?: TecnologiaUncheckedCreateNestedManyWithoutPaisInput
    demografia?: DemografiaUncheckedCreateNestedManyWithoutPaisInput
  }

  export type PaisCreateOrConnectWithoutSaudeInput = {
    where: PaisWhereUniqueInput
    create: XOR<PaisCreateWithoutSaudeInput, PaisUncheckedCreateWithoutSaudeInput>
  }

  export type IndicadorCreateWithoutSaudeInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    economia?: EconomiaCreateNestedManyWithoutIndicadorInput
    ambiente?: AmbienteCreateNestedManyWithoutIndicadorInput
    tecnologia?: TecnologiaCreateNestedManyWithoutIndicadorInput
    demografia?: DemografiaCreateNestedManyWithoutIndicadorInput
  }

  export type IndicadorUncheckedCreateWithoutSaudeInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    economia?: EconomiaUncheckedCreateNestedManyWithoutIndicadorInput
    ambiente?: AmbienteUncheckedCreateNestedManyWithoutIndicadorInput
    tecnologia?: TecnologiaUncheckedCreateNestedManyWithoutIndicadorInput
    demografia?: DemografiaUncheckedCreateNestedManyWithoutIndicadorInput
  }

  export type IndicadorCreateOrConnectWithoutSaudeInput = {
    where: IndicadorWhereUniqueInput
    create: XOR<IndicadorCreateWithoutSaudeInput, IndicadorUncheckedCreateWithoutSaudeInput>
  }

  export type PaisUpsertWithoutSaudeInput = {
    update: XOR<PaisUpdateWithoutSaudeInput, PaisUncheckedUpdateWithoutSaudeInput>
    create: XOR<PaisCreateWithoutSaudeInput, PaisUncheckedCreateWithoutSaudeInput>
    where?: PaisWhereInput
  }

  export type PaisUpdateToOneWithWhereWithoutSaudeInput = {
    where?: PaisWhereInput
    data: XOR<PaisUpdateWithoutSaudeInput, PaisUncheckedUpdateWithoutSaudeInput>
  }

  export type PaisUpdateWithoutSaudeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    economia?: EconomiaUpdateManyWithoutPaisNestedInput
    ambiente?: AmbienteUpdateManyWithoutPaisNestedInput
    tecnologia?: TecnologiaUpdateManyWithoutPaisNestedInput
    demografia?: DemografiaUpdateManyWithoutPaisNestedInput
  }

  export type PaisUncheckedUpdateWithoutSaudeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    economia?: EconomiaUncheckedUpdateManyWithoutPaisNestedInput
    ambiente?: AmbienteUncheckedUpdateManyWithoutPaisNestedInput
    tecnologia?: TecnologiaUncheckedUpdateManyWithoutPaisNestedInput
    demografia?: DemografiaUncheckedUpdateManyWithoutPaisNestedInput
  }

  export type IndicadorUpsertWithoutSaudeInput = {
    update: XOR<IndicadorUpdateWithoutSaudeInput, IndicadorUncheckedUpdateWithoutSaudeInput>
    create: XOR<IndicadorCreateWithoutSaudeInput, IndicadorUncheckedCreateWithoutSaudeInput>
    where?: IndicadorWhereInput
  }

  export type IndicadorUpdateToOneWithWhereWithoutSaudeInput = {
    where?: IndicadorWhereInput
    data: XOR<IndicadorUpdateWithoutSaudeInput, IndicadorUncheckedUpdateWithoutSaudeInput>
  }

  export type IndicadorUpdateWithoutSaudeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
    economia?: EconomiaUpdateManyWithoutIndicadorNestedInput
    ambiente?: AmbienteUpdateManyWithoutIndicadorNestedInput
    tecnologia?: TecnologiaUpdateManyWithoutIndicadorNestedInput
    demografia?: DemografiaUpdateManyWithoutIndicadorNestedInput
  }

  export type IndicadorUncheckedUpdateWithoutSaudeInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
    economia?: EconomiaUncheckedUpdateManyWithoutIndicadorNestedInput
    ambiente?: AmbienteUncheckedUpdateManyWithoutIndicadorNestedInput
    tecnologia?: TecnologiaUncheckedUpdateManyWithoutIndicadorNestedInput
    demografia?: DemografiaUncheckedUpdateManyWithoutIndicadorNestedInput
  }

  export type PaisCreateWithoutEconomiaInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
    saude?: SaudeCreateNestedManyWithoutPaisInput
    ambiente?: AmbienteCreateNestedManyWithoutPaisInput
    tecnologia?: TecnologiaCreateNestedManyWithoutPaisInput
    demografia?: DemografiaCreateNestedManyWithoutPaisInput
  }

  export type PaisUncheckedCreateWithoutEconomiaInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
    saude?: SaudeUncheckedCreateNestedManyWithoutPaisInput
    ambiente?: AmbienteUncheckedCreateNestedManyWithoutPaisInput
    tecnologia?: TecnologiaUncheckedCreateNestedManyWithoutPaisInput
    demografia?: DemografiaUncheckedCreateNestedManyWithoutPaisInput
  }

  export type PaisCreateOrConnectWithoutEconomiaInput = {
    where: PaisWhereUniqueInput
    create: XOR<PaisCreateWithoutEconomiaInput, PaisUncheckedCreateWithoutEconomiaInput>
  }

  export type IndicadorCreateWithoutEconomiaInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    saude?: SaudeCreateNestedManyWithoutIndicadorInput
    ambiente?: AmbienteCreateNestedManyWithoutIndicadorInput
    tecnologia?: TecnologiaCreateNestedManyWithoutIndicadorInput
    demografia?: DemografiaCreateNestedManyWithoutIndicadorInput
  }

  export type IndicadorUncheckedCreateWithoutEconomiaInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    saude?: SaudeUncheckedCreateNestedManyWithoutIndicadorInput
    ambiente?: AmbienteUncheckedCreateNestedManyWithoutIndicadorInput
    tecnologia?: TecnologiaUncheckedCreateNestedManyWithoutIndicadorInput
    demografia?: DemografiaUncheckedCreateNestedManyWithoutIndicadorInput
  }

  export type IndicadorCreateOrConnectWithoutEconomiaInput = {
    where: IndicadorWhereUniqueInput
    create: XOR<IndicadorCreateWithoutEconomiaInput, IndicadorUncheckedCreateWithoutEconomiaInput>
  }

  export type PaisUpsertWithoutEconomiaInput = {
    update: XOR<PaisUpdateWithoutEconomiaInput, PaisUncheckedUpdateWithoutEconomiaInput>
    create: XOR<PaisCreateWithoutEconomiaInput, PaisUncheckedCreateWithoutEconomiaInput>
    where?: PaisWhereInput
  }

  export type PaisUpdateToOneWithWhereWithoutEconomiaInput = {
    where?: PaisWhereInput
    data: XOR<PaisUpdateWithoutEconomiaInput, PaisUncheckedUpdateWithoutEconomiaInput>
  }

  export type PaisUpdateWithoutEconomiaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saude?: SaudeUpdateManyWithoutPaisNestedInput
    ambiente?: AmbienteUpdateManyWithoutPaisNestedInput
    tecnologia?: TecnologiaUpdateManyWithoutPaisNestedInput
    demografia?: DemografiaUpdateManyWithoutPaisNestedInput
  }

  export type PaisUncheckedUpdateWithoutEconomiaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saude?: SaudeUncheckedUpdateManyWithoutPaisNestedInput
    ambiente?: AmbienteUncheckedUpdateManyWithoutPaisNestedInput
    tecnologia?: TecnologiaUncheckedUpdateManyWithoutPaisNestedInput
    demografia?: DemografiaUncheckedUpdateManyWithoutPaisNestedInput
  }

  export type IndicadorUpsertWithoutEconomiaInput = {
    update: XOR<IndicadorUpdateWithoutEconomiaInput, IndicadorUncheckedUpdateWithoutEconomiaInput>
    create: XOR<IndicadorCreateWithoutEconomiaInput, IndicadorUncheckedCreateWithoutEconomiaInput>
    where?: IndicadorWhereInput
  }

  export type IndicadorUpdateToOneWithWhereWithoutEconomiaInput = {
    where?: IndicadorWhereInput
    data: XOR<IndicadorUpdateWithoutEconomiaInput, IndicadorUncheckedUpdateWithoutEconomiaInput>
  }

  export type IndicadorUpdateWithoutEconomiaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
    saude?: SaudeUpdateManyWithoutIndicadorNestedInput
    ambiente?: AmbienteUpdateManyWithoutIndicadorNestedInput
    tecnologia?: TecnologiaUpdateManyWithoutIndicadorNestedInput
    demografia?: DemografiaUpdateManyWithoutIndicadorNestedInput
  }

  export type IndicadorUncheckedUpdateWithoutEconomiaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
    saude?: SaudeUncheckedUpdateManyWithoutIndicadorNestedInput
    ambiente?: AmbienteUncheckedUpdateManyWithoutIndicadorNestedInput
    tecnologia?: TecnologiaUncheckedUpdateManyWithoutIndicadorNestedInput
    demografia?: DemografiaUncheckedUpdateManyWithoutIndicadorNestedInput
  }

  export type PaisCreateWithoutAmbienteInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
    saude?: SaudeCreateNestedManyWithoutPaisInput
    economia?: EconomiaCreateNestedManyWithoutPaisInput
    tecnologia?: TecnologiaCreateNestedManyWithoutPaisInput
    demografia?: DemografiaCreateNestedManyWithoutPaisInput
  }

  export type PaisUncheckedCreateWithoutAmbienteInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
    saude?: SaudeUncheckedCreateNestedManyWithoutPaisInput
    economia?: EconomiaUncheckedCreateNestedManyWithoutPaisInput
    tecnologia?: TecnologiaUncheckedCreateNestedManyWithoutPaisInput
    demografia?: DemografiaUncheckedCreateNestedManyWithoutPaisInput
  }

  export type PaisCreateOrConnectWithoutAmbienteInput = {
    where: PaisWhereUniqueInput
    create: XOR<PaisCreateWithoutAmbienteInput, PaisUncheckedCreateWithoutAmbienteInput>
  }

  export type IndicadorCreateWithoutAmbienteInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    saude?: SaudeCreateNestedManyWithoutIndicadorInput
    economia?: EconomiaCreateNestedManyWithoutIndicadorInput
    tecnologia?: TecnologiaCreateNestedManyWithoutIndicadorInput
    demografia?: DemografiaCreateNestedManyWithoutIndicadorInput
  }

  export type IndicadorUncheckedCreateWithoutAmbienteInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    saude?: SaudeUncheckedCreateNestedManyWithoutIndicadorInput
    economia?: EconomiaUncheckedCreateNestedManyWithoutIndicadorInput
    tecnologia?: TecnologiaUncheckedCreateNestedManyWithoutIndicadorInput
    demografia?: DemografiaUncheckedCreateNestedManyWithoutIndicadorInput
  }

  export type IndicadorCreateOrConnectWithoutAmbienteInput = {
    where: IndicadorWhereUniqueInput
    create: XOR<IndicadorCreateWithoutAmbienteInput, IndicadorUncheckedCreateWithoutAmbienteInput>
  }

  export type PaisUpsertWithoutAmbienteInput = {
    update: XOR<PaisUpdateWithoutAmbienteInput, PaisUncheckedUpdateWithoutAmbienteInput>
    create: XOR<PaisCreateWithoutAmbienteInput, PaisUncheckedCreateWithoutAmbienteInput>
    where?: PaisWhereInput
  }

  export type PaisUpdateToOneWithWhereWithoutAmbienteInput = {
    where?: PaisWhereInput
    data: XOR<PaisUpdateWithoutAmbienteInput, PaisUncheckedUpdateWithoutAmbienteInput>
  }

  export type PaisUpdateWithoutAmbienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saude?: SaudeUpdateManyWithoutPaisNestedInput
    economia?: EconomiaUpdateManyWithoutPaisNestedInput
    tecnologia?: TecnologiaUpdateManyWithoutPaisNestedInput
    demografia?: DemografiaUpdateManyWithoutPaisNestedInput
  }

  export type PaisUncheckedUpdateWithoutAmbienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saude?: SaudeUncheckedUpdateManyWithoutPaisNestedInput
    economia?: EconomiaUncheckedUpdateManyWithoutPaisNestedInput
    tecnologia?: TecnologiaUncheckedUpdateManyWithoutPaisNestedInput
    demografia?: DemografiaUncheckedUpdateManyWithoutPaisNestedInput
  }

  export type IndicadorUpsertWithoutAmbienteInput = {
    update: XOR<IndicadorUpdateWithoutAmbienteInput, IndicadorUncheckedUpdateWithoutAmbienteInput>
    create: XOR<IndicadorCreateWithoutAmbienteInput, IndicadorUncheckedCreateWithoutAmbienteInput>
    where?: IndicadorWhereInput
  }

  export type IndicadorUpdateToOneWithWhereWithoutAmbienteInput = {
    where?: IndicadorWhereInput
    data: XOR<IndicadorUpdateWithoutAmbienteInput, IndicadorUncheckedUpdateWithoutAmbienteInput>
  }

  export type IndicadorUpdateWithoutAmbienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
    saude?: SaudeUpdateManyWithoutIndicadorNestedInput
    economia?: EconomiaUpdateManyWithoutIndicadorNestedInput
    tecnologia?: TecnologiaUpdateManyWithoutIndicadorNestedInput
    demografia?: DemografiaUpdateManyWithoutIndicadorNestedInput
  }

  export type IndicadorUncheckedUpdateWithoutAmbienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
    saude?: SaudeUncheckedUpdateManyWithoutIndicadorNestedInput
    economia?: EconomiaUncheckedUpdateManyWithoutIndicadorNestedInput
    tecnologia?: TecnologiaUncheckedUpdateManyWithoutIndicadorNestedInput
    demografia?: DemografiaUncheckedUpdateManyWithoutIndicadorNestedInput
  }

  export type PaisCreateWithoutTecnologiaInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
    saude?: SaudeCreateNestedManyWithoutPaisInput
    economia?: EconomiaCreateNestedManyWithoutPaisInput
    ambiente?: AmbienteCreateNestedManyWithoutPaisInput
    demografia?: DemografiaCreateNestedManyWithoutPaisInput
  }

  export type PaisUncheckedCreateWithoutTecnologiaInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
    saude?: SaudeUncheckedCreateNestedManyWithoutPaisInput
    economia?: EconomiaUncheckedCreateNestedManyWithoutPaisInput
    ambiente?: AmbienteUncheckedCreateNestedManyWithoutPaisInput
    demografia?: DemografiaUncheckedCreateNestedManyWithoutPaisInput
  }

  export type PaisCreateOrConnectWithoutTecnologiaInput = {
    where: PaisWhereUniqueInput
    create: XOR<PaisCreateWithoutTecnologiaInput, PaisUncheckedCreateWithoutTecnologiaInput>
  }

  export type IndicadorCreateWithoutTecnologiaInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    saude?: SaudeCreateNestedManyWithoutIndicadorInput
    economia?: EconomiaCreateNestedManyWithoutIndicadorInput
    ambiente?: AmbienteCreateNestedManyWithoutIndicadorInput
    demografia?: DemografiaCreateNestedManyWithoutIndicadorInput
  }

  export type IndicadorUncheckedCreateWithoutTecnologiaInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    saude?: SaudeUncheckedCreateNestedManyWithoutIndicadorInput
    economia?: EconomiaUncheckedCreateNestedManyWithoutIndicadorInput
    ambiente?: AmbienteUncheckedCreateNestedManyWithoutIndicadorInput
    demografia?: DemografiaUncheckedCreateNestedManyWithoutIndicadorInput
  }

  export type IndicadorCreateOrConnectWithoutTecnologiaInput = {
    where: IndicadorWhereUniqueInput
    create: XOR<IndicadorCreateWithoutTecnologiaInput, IndicadorUncheckedCreateWithoutTecnologiaInput>
  }

  export type PaisUpsertWithoutTecnologiaInput = {
    update: XOR<PaisUpdateWithoutTecnologiaInput, PaisUncheckedUpdateWithoutTecnologiaInput>
    create: XOR<PaisCreateWithoutTecnologiaInput, PaisUncheckedCreateWithoutTecnologiaInput>
    where?: PaisWhereInput
  }

  export type PaisUpdateToOneWithWhereWithoutTecnologiaInput = {
    where?: PaisWhereInput
    data: XOR<PaisUpdateWithoutTecnologiaInput, PaisUncheckedUpdateWithoutTecnologiaInput>
  }

  export type PaisUpdateWithoutTecnologiaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saude?: SaudeUpdateManyWithoutPaisNestedInput
    economia?: EconomiaUpdateManyWithoutPaisNestedInput
    ambiente?: AmbienteUpdateManyWithoutPaisNestedInput
    demografia?: DemografiaUpdateManyWithoutPaisNestedInput
  }

  export type PaisUncheckedUpdateWithoutTecnologiaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saude?: SaudeUncheckedUpdateManyWithoutPaisNestedInput
    economia?: EconomiaUncheckedUpdateManyWithoutPaisNestedInput
    ambiente?: AmbienteUncheckedUpdateManyWithoutPaisNestedInput
    demografia?: DemografiaUncheckedUpdateManyWithoutPaisNestedInput
  }

  export type IndicadorUpsertWithoutTecnologiaInput = {
    update: XOR<IndicadorUpdateWithoutTecnologiaInput, IndicadorUncheckedUpdateWithoutTecnologiaInput>
    create: XOR<IndicadorCreateWithoutTecnologiaInput, IndicadorUncheckedCreateWithoutTecnologiaInput>
    where?: IndicadorWhereInput
  }

  export type IndicadorUpdateToOneWithWhereWithoutTecnologiaInput = {
    where?: IndicadorWhereInput
    data: XOR<IndicadorUpdateWithoutTecnologiaInput, IndicadorUncheckedUpdateWithoutTecnologiaInput>
  }

  export type IndicadorUpdateWithoutTecnologiaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
    saude?: SaudeUpdateManyWithoutIndicadorNestedInput
    economia?: EconomiaUpdateManyWithoutIndicadorNestedInput
    ambiente?: AmbienteUpdateManyWithoutIndicadorNestedInput
    demografia?: DemografiaUpdateManyWithoutIndicadorNestedInput
  }

  export type IndicadorUncheckedUpdateWithoutTecnologiaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
    saude?: SaudeUncheckedUpdateManyWithoutIndicadorNestedInput
    economia?: EconomiaUncheckedUpdateManyWithoutIndicadorNestedInput
    ambiente?: AmbienteUncheckedUpdateManyWithoutIndicadorNestedInput
    demografia?: DemografiaUncheckedUpdateManyWithoutIndicadorNestedInput
  }

  export type PaisCreateWithoutDemografiaInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
    saude?: SaudeCreateNestedManyWithoutPaisInput
    economia?: EconomiaCreateNestedManyWithoutPaisInput
    ambiente?: AmbienteCreateNestedManyWithoutPaisInput
    tecnologia?: TecnologiaCreateNestedManyWithoutPaisInput
  }

  export type PaisUncheckedCreateWithoutDemografiaInput = {
    id: string
    nome: string
    iso3: string
    createdAt?: Date | string
    updatedAt?: Date | string
    saude?: SaudeUncheckedCreateNestedManyWithoutPaisInput
    economia?: EconomiaUncheckedCreateNestedManyWithoutPaisInput
    ambiente?: AmbienteUncheckedCreateNestedManyWithoutPaisInput
    tecnologia?: TecnologiaUncheckedCreateNestedManyWithoutPaisInput
  }

  export type PaisCreateOrConnectWithoutDemografiaInput = {
    where: PaisWhereUniqueInput
    create: XOR<PaisCreateWithoutDemografiaInput, PaisUncheckedCreateWithoutDemografiaInput>
  }

  export type IndicadorCreateWithoutDemografiaInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    saude?: SaudeCreateNestedManyWithoutIndicadorInput
    economia?: EconomiaCreateNestedManyWithoutIndicadorInput
    ambiente?: AmbienteCreateNestedManyWithoutIndicadorInput
    tecnologia?: TecnologiaCreateNestedManyWithoutIndicadorInput
  }

  export type IndicadorUncheckedCreateWithoutDemografiaInput = {
    id: string
    nome: string
    categoria: $Enums.Categoria
    saude?: SaudeUncheckedCreateNestedManyWithoutIndicadorInput
    economia?: EconomiaUncheckedCreateNestedManyWithoutIndicadorInput
    ambiente?: AmbienteUncheckedCreateNestedManyWithoutIndicadorInput
    tecnologia?: TecnologiaUncheckedCreateNestedManyWithoutIndicadorInput
  }

  export type IndicadorCreateOrConnectWithoutDemografiaInput = {
    where: IndicadorWhereUniqueInput
    create: XOR<IndicadorCreateWithoutDemografiaInput, IndicadorUncheckedCreateWithoutDemografiaInput>
  }

  export type PaisUpsertWithoutDemografiaInput = {
    update: XOR<PaisUpdateWithoutDemografiaInput, PaisUncheckedUpdateWithoutDemografiaInput>
    create: XOR<PaisCreateWithoutDemografiaInput, PaisUncheckedCreateWithoutDemografiaInput>
    where?: PaisWhereInput
  }

  export type PaisUpdateToOneWithWhereWithoutDemografiaInput = {
    where?: PaisWhereInput
    data: XOR<PaisUpdateWithoutDemografiaInput, PaisUncheckedUpdateWithoutDemografiaInput>
  }

  export type PaisUpdateWithoutDemografiaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saude?: SaudeUpdateManyWithoutPaisNestedInput
    economia?: EconomiaUpdateManyWithoutPaisNestedInput
    ambiente?: AmbienteUpdateManyWithoutPaisNestedInput
    tecnologia?: TecnologiaUpdateManyWithoutPaisNestedInput
  }

  export type PaisUncheckedUpdateWithoutDemografiaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    iso3?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saude?: SaudeUncheckedUpdateManyWithoutPaisNestedInput
    economia?: EconomiaUncheckedUpdateManyWithoutPaisNestedInput
    ambiente?: AmbienteUncheckedUpdateManyWithoutPaisNestedInput
    tecnologia?: TecnologiaUncheckedUpdateManyWithoutPaisNestedInput
  }

  export type IndicadorUpsertWithoutDemografiaInput = {
    update: XOR<IndicadorUpdateWithoutDemografiaInput, IndicadorUncheckedUpdateWithoutDemografiaInput>
    create: XOR<IndicadorCreateWithoutDemografiaInput, IndicadorUncheckedCreateWithoutDemografiaInput>
    where?: IndicadorWhereInput
  }

  export type IndicadorUpdateToOneWithWhereWithoutDemografiaInput = {
    where?: IndicadorWhereInput
    data: XOR<IndicadorUpdateWithoutDemografiaInput, IndicadorUncheckedUpdateWithoutDemografiaInput>
  }

  export type IndicadorUpdateWithoutDemografiaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
    saude?: SaudeUpdateManyWithoutIndicadorNestedInput
    economia?: EconomiaUpdateManyWithoutIndicadorNestedInput
    ambiente?: AmbienteUpdateManyWithoutIndicadorNestedInput
    tecnologia?: TecnologiaUpdateManyWithoutIndicadorNestedInput
  }

  export type IndicadorUncheckedUpdateWithoutDemografiaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaFieldUpdateOperationsInput | $Enums.Categoria
    saude?: SaudeUncheckedUpdateManyWithoutIndicadorNestedInput
    economia?: EconomiaUncheckedUpdateManyWithoutIndicadorNestedInput
    ambiente?: AmbienteUncheckedUpdateManyWithoutIndicadorNestedInput
    tecnologia?: TecnologiaUncheckedUpdateManyWithoutIndicadorNestedInput
  }

  export type SaudeCreateManyPaisInput = {
    id?: number
    valor: number
    ano: number
    indicadorId: string
    createdAt?: Date | string
  }

  export type EconomiaCreateManyPaisInput = {
    id?: number
    valor: number
    ano: number
    indicadorId: string
    createdAt?: Date | string
  }

  export type AmbienteCreateManyPaisInput = {
    id?: number
    valor: number
    ano: number
    indicadorId: string
    createdAt?: Date | string
  }

  export type TecnologiaCreateManyPaisInput = {
    id?: number
    valor: number
    ano: number
    indicadorId: string
    createdAt?: Date | string
  }

  export type DemografiaCreateManyPaisInput = {
    id?: number
    valor: number
    ano: number
    indicadorId: string
    createdAt?: Date | string
  }

  export type SaudeUpdateWithoutPaisInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    indicador?: IndicadorUpdateOneRequiredWithoutSaudeNestedInput
  }

  export type SaudeUncheckedUpdateWithoutPaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaudeUncheckedUpdateManyWithoutPaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EconomiaUpdateWithoutPaisInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    indicador?: IndicadorUpdateOneRequiredWithoutEconomiaNestedInput
  }

  export type EconomiaUncheckedUpdateWithoutPaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EconomiaUncheckedUpdateManyWithoutPaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbienteUpdateWithoutPaisInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    indicador?: IndicadorUpdateOneRequiredWithoutAmbienteNestedInput
  }

  export type AmbienteUncheckedUpdateWithoutPaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbienteUncheckedUpdateManyWithoutPaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TecnologiaUpdateWithoutPaisInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    indicador?: IndicadorUpdateOneRequiredWithoutTecnologiaNestedInput
  }

  export type TecnologiaUncheckedUpdateWithoutPaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TecnologiaUncheckedUpdateManyWithoutPaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemografiaUpdateWithoutPaisInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    indicador?: IndicadorUpdateOneRequiredWithoutDemografiaNestedInput
  }

  export type DemografiaUncheckedUpdateWithoutPaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemografiaUncheckedUpdateManyWithoutPaisInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    indicadorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaudeCreateManyIndicadorInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    createdAt?: Date | string
  }

  export type EconomiaCreateManyIndicadorInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    createdAt?: Date | string
  }

  export type AmbienteCreateManyIndicadorInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    createdAt?: Date | string
  }

  export type TecnologiaCreateManyIndicadorInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    createdAt?: Date | string
  }

  export type DemografiaCreateManyIndicadorInput = {
    id?: number
    valor: number
    ano: number
    paisId: string
    createdAt?: Date | string
  }

  export type SaudeUpdateWithoutIndicadorInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pais?: PaisUpdateOneRequiredWithoutSaudeNestedInput
  }

  export type SaudeUncheckedUpdateWithoutIndicadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SaudeUncheckedUpdateManyWithoutIndicadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EconomiaUpdateWithoutIndicadorInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pais?: PaisUpdateOneRequiredWithoutEconomiaNestedInput
  }

  export type EconomiaUncheckedUpdateWithoutIndicadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EconomiaUncheckedUpdateManyWithoutIndicadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbienteUpdateWithoutIndicadorInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pais?: PaisUpdateOneRequiredWithoutAmbienteNestedInput
  }

  export type AmbienteUncheckedUpdateWithoutIndicadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbienteUncheckedUpdateManyWithoutIndicadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TecnologiaUpdateWithoutIndicadorInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pais?: PaisUpdateOneRequiredWithoutTecnologiaNestedInput
  }

  export type TecnologiaUncheckedUpdateWithoutIndicadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TecnologiaUncheckedUpdateManyWithoutIndicadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemografiaUpdateWithoutIndicadorInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pais?: PaisUpdateOneRequiredWithoutDemografiaNestedInput
  }

  export type DemografiaUncheckedUpdateWithoutIndicadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemografiaUncheckedUpdateManyWithoutIndicadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    paisId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}